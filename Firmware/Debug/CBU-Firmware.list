
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08011db8  08011db8  00021db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012460  08012460  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08012460  08012460  00022460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012468  08012468  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012468  08012468  00022468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801246c  0801246c  0002246c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08012470  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002990  20000358  080127c8  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ce8  080127c8  00032ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bcc  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004765  00000000  00000000  00053f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  000586c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  0005a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000632e  00000000  00000000  0005c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f912  00000000  00000000  0006242e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ad0  00000000  00000000  00081d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094bc  00000000  00000000  00174860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011d9c 	.word	0x08011d9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	08011d9c 	.word	0x08011d9c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <case_insensitive_strcmp+0x16>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e056      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d10d      	bne.n	8001066 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e050      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e04a      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d103      	bne.n	8001086 <case_insensitive_strcmp+0x5e>
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f103 0220 	add.w	r2, r3, #32
 8001084:	e000      	b.n	8001088 <case_insensitive_strcmp+0x60>
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73bb      	strb	r3, [r7, #14]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	3301      	adds	r3, #1
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001094:	440b      	add	r3, r1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <case_insensitive_strcmp+0x7e>
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	3320      	adds	r3, #32
 80010a4:	e000      	b.n	80010a8 <case_insensitive_strcmp+0x80>
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0d0      	beq.n	800104e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	737b      	strb	r3, [r7, #13]
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d103      	bne.n	80010cc <case_insensitive_strcmp+0xa4>
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	f103 0220 	add.w	r2, r3, #32
 80010ca:	e000      	b.n	80010ce <case_insensitive_strcmp+0xa6>
 80010cc:	7b7a      	ldrb	r2, [r7, #13]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	733b      	strb	r3, [r7, #12]
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4908      	ldr	r1, [pc, #32]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010da:	440b      	add	r3, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <case_insensitive_strcmp+0xc4>
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	3320      	adds	r3, #32
 80010ea:	e000      	b.n	80010ee <case_insensitive_strcmp+0xc6>
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	1ad3      	subs	r3, r2, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	08012010 	.word	0x08012010

08001100 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <cJSON_strdup+0x1c>
    {
        return NULL;
 8001118:	2300      	movs	r3, #0
 800111a:	e015      	b.n	8001148 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f869 	bl	80001f4 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	4798      	blx	r3
 8001130:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <cJSON_strdup+0x3c>
    {
        return NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	e005      	b.n	8001148 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f00d f967 	bl	800e414 <memcpy>

    return copy;
 8001146:	68bb      	ldr	r3, [r7, #8]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2028      	movs	r0, #40	; 0x28
 800115e:	4798      	blx	r3
 8001160:	60f8      	str	r0, [r7, #12]
    if (node)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001168:	2228      	movs	r2, #40	; 0x28
 800116a:	2100      	movs	r1, #0
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f00d f95f 	bl	800e430 <memset>
    }

    return node;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001188:	e037      	b.n	80011fa <cJSON_Delete+0x7e>
    {
        next = item->next;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <cJSON_Delete+0x32>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffe7 	bl	800117c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <cJSON_Delete+0x52>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <cJSON_Delete+0x90>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6912      	ldr	r2, [r2, #16]
 80011ca:	4610      	mov	r0, r2
 80011cc:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <cJSON_Delete+0x72>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <cJSON_Delete+0x90>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6a12      	ldr	r2, [r2, #32]
 80011ea:	4610      	mov	r0, r2
 80011ec:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <cJSON_Delete+0x90>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
        item = next;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1c4      	bne.n	800118a <cJSON_Delete+0xe>
    }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001214:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b098      	sub	sp, #96	; 0x60
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    double number = 0;
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001236:	2300      	movs	r3, #0
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800123a:	f7ff ffe9 	bl	8001210 <get_decimal_point>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <parse_number+0x36>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <parse_number+0x3a>
    {
        return false;
 8001256:	2300      	movs	r3, #0
 8001258:	e0c6      	b.n	80013e8 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800125e:	e063      	b.n	8001328 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6899      	ldr	r1, [r3, #8]
 8001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126a:	440b      	add	r3, r1
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b45      	cmp	r3, #69	; 0x45
 8001272:	dc3d      	bgt.n	80012f0 <parse_number+0xd0>
 8001274:	2b2b      	cmp	r3, #43	; 0x2b
 8001276:	db66      	blt.n	8001346 <parse_number+0x126>
 8001278:	3b2b      	subs	r3, #43	; 0x2b
 800127a:	2b1a      	cmp	r3, #26
 800127c:	d863      	bhi.n	8001346 <parse_number+0x126>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <parse_number+0x64>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012f5 	.word	0x080012f5
 8001288:	08001347 	.word	0x08001347
 800128c:	080012f5 	.word	0x080012f5
 8001290:	08001313 	.word	0x08001313
 8001294:	08001347 	.word	0x08001347
 8001298:	080012f5 	.word	0x080012f5
 800129c:	080012f5 	.word	0x080012f5
 80012a0:	080012f5 	.word	0x080012f5
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	080012f5 	.word	0x080012f5
 80012ac:	080012f5 	.word	0x080012f5
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	080012f5 	.word	0x080012f5
 80012b8:	080012f5 	.word	0x080012f5
 80012bc:	080012f5 	.word	0x080012f5
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	08001347 	.word	0x08001347
 80012e0:	08001347 	.word	0x08001347
 80012e4:	08001347 	.word	0x08001347
 80012e8:	08001347 	.word	0x08001347
 80012ec:	080012f5 	.word	0x080012f5
 80012f0:	2b65      	cmp	r3, #101	; 0x65
 80012f2:	d128      	bne.n	8001346 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fe:	440b      	add	r3, r1
 8001300:	4413      	add	r3, r2
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	f107 0208 	add.w	r2, r7, #8
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	4413      	add	r3, r2
 800130c:	460a      	mov	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
                break;
 8001310:	e007      	b.n	8001322 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	4413      	add	r3, r2
 800131a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800131e:	701a      	strb	r2, [r3, #0]
                break;
 8001320:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001324:	3301      	adds	r3, #1
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	2b3e      	cmp	r3, #62	; 0x3e
 800132c:	d80d      	bhi.n	800134a <parse_number+0x12a>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <parse_number+0x12a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	441a      	add	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d38d      	bcc.n	8001260 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001344:	e001      	b.n	800134a <parse_number+0x12a>
                goto loop_end;
 8001346:	bf00      	nop
 8001348:	e000      	b.n	800134c <parse_number+0x12c>
loop_end:
 800134a:	bf00      	nop
    number_c_string[i] = '\0';
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001358:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f00e f89e 	bl	800f4a4 <strtod>
 8001368:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800136c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001376:	2300      	movs	r3, #0
 8001378:	e036      	b.n	80013e8 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001380:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001384:	a31b      	add	r3, pc, #108	; (adr r3, 80013f4 <parse_number+0x1d4>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800138e:	f7ff fbd1 	bl	8000b34 <__aeabi_dcmpge>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	e015      	b.n	80013ce <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <parse_number+0x1d0>)
 80013a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013ac:	f7ff fbb8 	bl	8000b20 <__aeabi_dcmple>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	e006      	b.n	80013ce <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80013c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013c4:	f7ff fbe0 	bl	8000b88 <__aeabi_d2iz>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2208      	movs	r2, #8
 80013d2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	1a8a      	subs	r2, r1, r2
 80013e0:	441a      	add	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	609a      	str	r2, [r3, #8]
    return true;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3760      	adds	r7, #96	; 0x60
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	c1e00000 	.word	0xc1e00000
 80013f4:	ffc00000 	.word	0xffc00000
 80013f8:	41dfffff 	.word	0x41dfffff

080013fc <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <ensure+0x20>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <ensure+0x24>
    {
        return NULL;
 800141c:	2300      	movs	r3, #0
 800141e:	e083      	b.n	8001528 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <ensure+0x3c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d301      	bcc.n	8001438 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	e077      	b.n	8001528 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da01      	bge.n	8001442 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800143e:	2300      	movs	r3, #0
 8001440:	e072      	b.n	8001528 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	3301      	adds	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d805      	bhi.n	8001464 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4413      	add	r3, r2
 8001462:	e061      	b.n	8001528 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <ensure+0x74>
        return NULL;
 800146c:	2300      	movs	r3, #0
 800146e:	e05b      	b.n	8001528 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001476:	d308      	bcc.n	800148a <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db03      	blt.n	8001486 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800147e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	e004      	b.n	8001490 <ensure+0x94>
        }
        else
        {
            return NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	e04e      	b.n	8001528 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d018      	beq.n	80014ca <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	4610      	mov	r0, r2
 80014a4:	4798      	blx	r3
 80014a6:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d132      	bne.n	8001514 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4610      	mov	r0, r2
 80014b8:	4798      	blx	r3
            p->length = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

            return NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e02e      	b.n	8001528 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	4798      	blx	r3
 80014d2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4610      	mov	r0, r2
 80014e4:	4798      	blx	r3
            p->length = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

            return NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e018      	b.n	8001528 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	3301      	adds	r3, #1
 8001500:	461a      	mov	r2, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f00c ff86 	bl	800e414 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	4610      	mov	r0, r2
 8001512:	4798      	blx	r3
    }
    p->length = newsize;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d013      	beq.n	800156a <update_offset+0x3a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00f      	beq.n	800156a <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689c      	ldr	r4, [r3, #8]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7fe fe4a 	bl	80001f4 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	18e2      	adds	r2, r4, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e000      	b.n	800156c <update_offset+0x3c>
        return;
 800156a:	bf00      	nop
}
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
	...

08001574 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001580:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	68fe      	ldr	r6, [r7, #12]
 8001588:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	687e      	ldr	r6, [r7, #4]
 8001590:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001594:	f7ff fad8 	bl	8000b48 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <compare_double+0x34>
 800159e:	68bc      	ldr	r4, [r7, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015a6:	e003      	b.n	80015b0 <compare_double+0x3c>
 80015a8:	683c      	ldr	r4, [r7, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015b0:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80015b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015bc:	f7fe fe7c 	bl	80002b8 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4690      	mov	r8, r2
 80015c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <compare_double+0x8c>)
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	f7ff f828 	bl	8000628 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	2101      	movs	r1, #1
 80015de:	460c      	mov	r4, r1
 80015e0:	4640      	mov	r0, r8
 80015e2:	4649      	mov	r1, r9
 80015e4:	f7ff fa9c 	bl	8000b20 <__aeabi_dcmple>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <compare_double+0x7e>
 80015ee:	2300      	movs	r3, #0
 80015f0:	461c      	mov	r4, r3
 80015f2:	b2e3      	uxtb	r3, r4
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	bf00      	nop
 8001600:	3cb00000 	.word	0x3cb00000

08001604 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b093      	sub	sp, #76	; 0x4c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800160e:	2300      	movs	r3, #0
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001618:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800163a:	f7ff fde9 	bl	8001210 <get_decimal_point>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <print_number+0x56>
    {
        return false;
 8001656:	2300      	movs	r3, #0
 8001658:	e0b4      	b.n	80017c4 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800165a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800165e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001662:	f7ff fa7b 	bl	8000b5c <__aeabi_dcmpun>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <print_number+0xac>
 800166c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001674:	2301      	movs	r3, #1
 8001676:	461e      	mov	r6, r3
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <print_number+0x1c8>)
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7ff fa6b 	bl	8000b5c <__aeabi_dcmpun>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <print_number+0xa0>
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <print_number+0x1c8>)
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7ff fa43 	bl	8000b20 <__aeabi_dcmple>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <print_number+0xa0>
 80016a0:	2300      	movs	r3, #0
 80016a2:	461e      	mov	r6, r3
 80016a4:	b2f3      	uxtb	r3, r6
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4946      	ldr	r1, [pc, #280]	; (80017d0 <print_number+0x1cc>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00d f824 	bl	800e704 <siprintf>
 80016bc:	6478      	str	r0, [r7, #68]	; 0x44
 80016be:	e03f      	b.n	8001740 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff45 	bl	8000554 <__aeabi_i2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016d2:	f7ff fa11 	bl	8000af8 <__aeabi_dcmpeq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	493b      	ldr	r1, [pc, #236]	; (80017d4 <print_number+0x1d0>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00d f80c 	bl	800e704 <siprintf>
 80016ec:	6478      	str	r0, [r7, #68]	; 0x44
 80016ee:	e027      	b.n	8001740 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016f0:	f107 0014 	add.w	r0, r7, #20
 80016f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <print_number+0x1d4>)
 80016fa:	f00d f803 	bl	800e704 <siprintf>
 80016fe:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001700:	f107 0208 	add.w	r2, r7, #8
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4934      	ldr	r1, [pc, #208]	; (80017dc <print_number+0x1d8>)
 800170a:	4618      	mov	r0, r3
 800170c:	f00d f81a 	bl	800e744 <siscanf>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10c      	bne.n	8001730 <print_number+0x12c>
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	f7ff ff25 	bl	8001574 <compare_double>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001730:	f107 0014 	add.w	r0, r7, #20
 8001734:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001738:	4929      	ldr	r1, [pc, #164]	; (80017e0 <print_number+0x1dc>)
 800173a:	f00c ffe3 	bl	800e704 <siprintf>
 800173e:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001742:	2b00      	cmp	r3, #0
 8001744:	db02      	blt.n	800174c <print_number+0x148>
 8001746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001748:	2b19      	cmp	r3, #25
 800174a:	dd01      	ble.n	8001750 <print_number+0x14c>
    {
        return false;
 800174c:	2300      	movs	r3, #0
 800174e:	e039      	b.n	80017c4 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	3301      	adds	r3, #1
 8001754:	4619      	mov	r1, r3
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f7ff fe50 	bl	80013fc <ensure>
 800175c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <print_number+0x164>
    {
        return false;
 8001764:	2300      	movs	r3, #0
 8001766:	e02d      	b.n	80017c4 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
 800176c:	e01a      	b.n	80017a4 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800176e:	f107 0214 	add.w	r2, r7, #20
 8001772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800177c:	429a      	cmp	r2, r3
 800177e:	d105      	bne.n	800178c <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001784:	4413      	add	r3, r2
 8001786:	222e      	movs	r2, #46	; 0x2e
 8001788:	701a      	strb	r2, [r3, #0]
            continue;
 800178a:	e008      	b.n	800179e <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 800178c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800178e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001790:	4413      	add	r3, r2
 8001792:	f107 0114 	add.w	r1, r7, #20
 8001796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001798:	440a      	add	r2, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800179e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a0:	3301      	adds	r3, #1
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
 80017a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d3e0      	bcc.n	800176e <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80017ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b0:	4413      	add	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017bc:	441a      	add	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	609a      	str	r2, [r3, #8]

    return true;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	374c      	adds	r7, #76	; 0x4c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017cc:	7fefffff 	.word	0x7fefffff
 80017d0:	08011dc4 	.word	0x08011dc4
 80017d4:	08011dcc 	.word	0x08011dcc
 80017d8:	08011dd0 	.word	0x08011dd0
 80017dc:	08011dd8 	.word	0x08011dd8
 80017e0:	08011ddc 	.word	0x08011ddc

080017e4 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	e04c      	b.n	8001894 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b2f      	cmp	r3, #47	; 0x2f
 8001804:	d90f      	bls.n	8001826 <parse_hex4+0x42>
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b39      	cmp	r3, #57	; 0x39
 8001810:	d809      	bhi.n	8001826 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	3b30      	subs	r3, #48	; 0x30
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e02d      	b.n	8001882 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d90f      	bls.n	8001852 <parse_hex4+0x6e>
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b46      	cmp	r3, #70	; 0x46
 800183c:	d809      	bhi.n	8001852 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	3b37      	subs	r3, #55	; 0x37
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e017      	b.n	8001882 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b60      	cmp	r3, #96	; 0x60
 800185c:	d90f      	bls.n	800187e <parse_hex4+0x9a>
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b66      	cmp	r3, #102	; 0x66
 8001868:	d809      	bhi.n	800187e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	3b57      	subs	r3, #87	; 0x57
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e001      	b.n	8001882 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800187e:	2300      	movs	r3, #0
 8001880:	e00c      	b.n	800189c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d802      	bhi.n	800188e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9af      	bls.n	80017fa <parse_hex4+0x16>
        }
    }

    return h;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b05      	cmp	r3, #5
 80018e0:	f340 80b7 	ble.w	8001a52 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3302      	adds	r3, #2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff7b 	bl	80017e4 <parse_hex4>
 80018ee:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018f6:	d304      	bcc.n	8001902 <utf16_literal_to_utf8+0x5a>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018fe:	f0c0 80aa 	bcc.w	8001a56 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001908:	d337      	bcc.n	800197a <utf16_literal_to_utf8+0xd2>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001910:	d233      	bcs.n	800197a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3306      	adds	r3, #6
 8001916:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800191c:	230c      	movs	r3, #12
 800191e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	f340 8096 	ble.w	8001a5a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b5c      	cmp	r3, #92	; 0x5c
 8001934:	f040 8093 	bne.w	8001a5e <utf16_literal_to_utf8+0x1b6>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b75      	cmp	r3, #117	; 0x75
 8001940:	f040 808d 	bne.w	8001a5e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3302      	adds	r3, #2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff4b 	bl	80017e4 <parse_hex4>
 800194e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001956:	f0c0 8084 	bcc.w	8001a62 <utf16_literal_to_utf8+0x1ba>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001960:	d27f      	bcs.n	8001a62 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	029a      	lsls	r2, r3, #10
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <utf16_literal_to_utf8+0x1cc>)
 8001968:	4013      	ands	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001970:	4313      	orrs	r3, r2
 8001972:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001978:	e004      	b.n	8001984 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800197a:	2306      	movs	r3, #6
 800197c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	2b7f      	cmp	r3, #127	; 0x7f
 8001988:	d803      	bhi.n	8001992 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001990:	e01f      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001998:	d206      	bcs.n	80019a8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800199a:	2302      	movs	r3, #2
 800199c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	f887 3020 	strb.w	r3, [r7, #32]
 80019a6:	e014      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d206      	bcs.n	80019be <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80019b6:	23e0      	movs	r3, #224	; 0xe0
 80019b8:	f887 3020 	strb.w	r3, [r7, #32]
 80019bc:	e009      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019c4:	d24f      	bcs.n	8001a66 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019c6:	2304      	movs	r3, #4
 80019c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019cc:	23f0      	movs	r3, #240	; 0xf0
 80019ce:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019dc:	e015      	b.n	8001a0a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019f0:	440b      	add	r3, r1
 80019f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001a00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a04:	3b01      	subs	r3, #1
 8001a06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e5      	bne.n	80019de <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d909      	bls.n	8001a2e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	b2d9      	uxtb	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e007      	b.n	8001a3e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a46:	441a      	add	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a50:	e00b      	b.n	8001a6a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a52:	bf00      	nop
 8001a54:	e008      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a56:	bf00      	nop
 8001a58:	e006      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a5a:	bf00      	nop
 8001a5c:	e004      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a66:	bf00      	nop

fail:
    return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	000ffc00 	.word	0x000ffc00

08001a78 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b22      	cmp	r3, #34	; 0x22
 8001ab4:	f040 8102 	bne.w	8001cbc <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ac0:	e017      	b.n	8001af2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b5c      	cmp	r3, #92	; 0x5c
 8001ac8:	d110      	bne.n	8001aec <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	f080 80f0 	bcs.w	8001cc0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3301      	adds	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d203      	bcs.n	8001b0c <parse_string+0x94>
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b22      	cmp	r3, #34	; 0x22
 8001b0a:	d1da      	bne.n	8001ac2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f080 80d2 	bcs.w	8001cc4 <parse_string+0x24c>
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b22      	cmp	r3, #34	; 0x22
 8001b26:	f040 80cd 	bne.w	8001cc4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	3201      	adds	r2, #1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4798      	blx	r3
 8001b4c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b9 	beq.w	8001cc8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b5a:	e093      	b.n	8001c84 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b5c      	cmp	r3, #92	; 0x5c
 8001b62:	d008      	beq.n	8001b76 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	1c53      	adds	r3, r2, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1c59      	adds	r1, r3, #1
 8001b6e:	60f9      	str	r1, [r7, #12]
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e086      	b.n	8001c84 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b7a:	6a3a      	ldr	r2, [r7, #32]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f340 80a3 	ble.w	8001ccc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b75      	cmp	r3, #117	; 0x75
 8001b8e:	f300 809f 	bgt.w	8001cd0 <parse_string+0x258>
 8001b92:	2b5c      	cmp	r3, #92	; 0x5c
 8001b94:	da04      	bge.n	8001ba0 <parse_string+0x128>
 8001b96:	2b22      	cmp	r3, #34	; 0x22
 8001b98:	d05c      	beq.n	8001c54 <parse_string+0x1dc>
 8001b9a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b9c:	d05a      	beq.n	8001c54 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b9e:	e097      	b.n	8001cd0 <parse_string+0x258>
            switch (input_pointer[1])
 8001ba0:	3b5c      	subs	r3, #92	; 0x5c
 8001ba2:	2b19      	cmp	r3, #25
 8001ba4:	f200 8094 	bhi.w	8001cd0 <parse_string+0x258>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <parse_string+0x138>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001c55 	.word	0x08001c55
 8001bb4:	08001cd1 	.word	0x08001cd1
 8001bb8:	08001cd1 	.word	0x08001cd1
 8001bbc:	08001cd1 	.word	0x08001cd1
 8001bc0:	08001cd1 	.word	0x08001cd1
 8001bc4:	08001cd1 	.word	0x08001cd1
 8001bc8:	08001c19 	.word	0x08001c19
 8001bcc:	08001cd1 	.word	0x08001cd1
 8001bd0:	08001cd1 	.word	0x08001cd1
 8001bd4:	08001cd1 	.word	0x08001cd1
 8001bd8:	08001c25 	.word	0x08001c25
 8001bdc:	08001cd1 	.word	0x08001cd1
 8001be0:	08001cd1 	.word	0x08001cd1
 8001be4:	08001cd1 	.word	0x08001cd1
 8001be8:	08001cd1 	.word	0x08001cd1
 8001bec:	08001cd1 	.word	0x08001cd1
 8001bf0:	08001cd1 	.word	0x08001cd1
 8001bf4:	08001cd1 	.word	0x08001cd1
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001cd1 	.word	0x08001cd1
 8001c00:	08001cd1 	.word	0x08001cd1
 8001c04:	08001cd1 	.word	0x08001cd1
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001cd1 	.word	0x08001cd1
 8001c10:	08001c49 	.word	0x08001c49
 8001c14:	08001c63 	.word	0x08001c63
                    *output_pointer++ = '\b';
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60fa      	str	r2, [r7, #12]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	701a      	strb	r2, [r3, #0]
                    break;
 8001c22:	e02b      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60fa      	str	r2, [r7, #12]
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2e:	e025      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60fa      	str	r2, [r7, #12]
 8001c36:	220a      	movs	r2, #10
 8001c38:	701a      	strb	r2, [r3, #0]
                    break;
 8001c3a:	e01f      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60fa      	str	r2, [r7, #12]
 8001c42:	220d      	movs	r2, #13
 8001c44:	701a      	strb	r2, [r3, #0]
                    break;
 8001c46:	e019      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60fa      	str	r2, [r7, #12]
 8001c4e:	2209      	movs	r2, #9
 8001c50:	701a      	strb	r2, [r3, #0]
                    break;
 8001c52:	e013      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60fa      	str	r2, [r7, #12]
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	7852      	ldrb	r2, [r2, #1]
 8001c5e:	701a      	strb	r2, [r3, #0]
                    break;
 8001c60:	e00c      	b.n	8001c7c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	461a      	mov	r2, r3
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c6c:	f7ff fe1c 	bl	80018a8 <utf16_literal_to_utf8>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02c      	beq.n	8001cd4 <parse_string+0x25c>
                    break;
 8001c7a:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	4413      	add	r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f4ff af67 	bcc.w	8001b5c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2210      	movs	r2, #16
 8001c98:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	609a      	str	r2, [r3, #8]

    return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01e      	b.n	8001cfa <parse_string+0x282>
        goto fail;
 8001cbc:	bf00      	nop
 8001cbe:	e00a      	b.n	8001cd6 <parse_string+0x25e>
                    goto fail;
 8001cc0:	bf00      	nop
 8001cc2:	e008      	b.n	8001cd6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001cc4:	bf00      	nop
 8001cc6:	e006      	b.n	8001cd6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001cc8:	bf00      	nop
 8001cca:	e004      	b.n	8001cd6 <parse_string+0x25e>
                goto fail;
 8001ccc:	bf00      	nop
 8001cce:	e002      	b.n	8001cd6 <parse_string+0x25e>
                    goto fail;
 8001cd0:	bf00      	nop
 8001cd2:	e000      	b.n	8001cd6 <parse_string+0x25e>
                        goto fail;
 8001cd4:	bf00      	nop

fail:
    if (output != NULL)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	69f8      	ldr	r0, [r7, #28]
 8001ce2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop

08001d04 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <print_string_ptr+0x28>
    {
        return false;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e110      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d111      	bne.n	8001d56 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d32:	2103      	movs	r1, #3
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff fb61 	bl	80013fc <ensure>
 8001d3a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <print_string_ptr+0x42>
        {
            return false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e103      	b.n	8001f4e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4a83      	ldr	r2, [pc, #524]	; (8001f58 <print_string_ptr+0x254>)
 8001d4a:	8811      	ldrh	r1, [r2, #0]
 8001d4c:	7892      	ldrb	r2, [r2, #2]
 8001d4e:	8019      	strh	r1, [r3, #0]
 8001d50:	709a      	strb	r2, [r3, #2]

        return true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0fb      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e023      	b.n	8001da4 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b22      	cmp	r3, #34	; 0x22
 8001d62:	dc0e      	bgt.n	8001d82 <print_string_ptr+0x7e>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	db12      	blt.n	8001d8e <print_string_ptr+0x8a>
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <print_string_ptr+0x258>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <print_string_ptr+0x82>
 8001d80:	e005      	b.n	8001d8e <print_string_ptr+0x8a>
 8001d82:	2b5c      	cmp	r3, #92	; 0x5c
 8001d84:	d103      	bne.n	8001d8e <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
                break;
 8001d8c:	e007      	b.n	8001d9e <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b1f      	cmp	r3, #31
 8001d94:	d802      	bhi.n	8001d9c <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3305      	adds	r3, #5
 8001d9a:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d9c:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1d7      	bne.n	8001d5c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7ff fb1b 	bl	80013fc <ensure>
 8001dc6:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <print_string_ptr+0xce>
    {
        return false;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e0bd      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d117      	bne.n	8001e08 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2222      	movs	r2, #34	; 0x22
 8001ddc:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3301      	adds	r3, #1
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00c fb14 	bl	800e414 <memcpy>
        output[output_length + 1] = '\"';
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	2222      	movs	r2, #34	; 0x22
 8001df6:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

        return true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0a2      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2222      	movs	r2, #34	; 0x22
 8001e0c:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	e087      	b.n	8001f2a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b1f      	cmp	r3, #31
 8001e20:	d90c      	bls.n	8001e3c <print_string_ptr+0x138>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b22      	cmp	r3, #34	; 0x22
 8001e28:	d008      	beq.n	8001e3c <print_string_ptr+0x138>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b5c      	cmp	r3, #92	; 0x5c
 8001e30:	d004      	beq.n	8001e3c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e070      	b.n	8001f1e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	61ba      	str	r2, [r7, #24]
 8001e42:	225c      	movs	r2, #92	; 0x5c
 8001e44:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b22      	cmp	r3, #34	; 0x22
 8001e4c:	dc3e      	bgt.n	8001ecc <print_string_ptr+0x1c8>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	db5a      	blt.n	8001f08 <print_string_ptr+0x204>
 8001e52:	3b08      	subs	r3, #8
 8001e54:	2b1a      	cmp	r3, #26
 8001e56:	d857      	bhi.n	8001f08 <print_string_ptr+0x204>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <print_string_ptr+0x15c>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001ee1 	.word	0x08001ee1
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001ef1 	.word	0x08001ef1
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001ef9 	.word	0x08001ef9
 8001e78:	08001f09 	.word	0x08001f09
 8001e7c:	08001f09 	.word	0x08001f09
 8001e80:	08001f09 	.word	0x08001f09
 8001e84:	08001f09 	.word	0x08001f09
 8001e88:	08001f09 	.word	0x08001f09
 8001e8c:	08001f09 	.word	0x08001f09
 8001e90:	08001f09 	.word	0x08001f09
 8001e94:	08001f09 	.word	0x08001f09
 8001e98:	08001f09 	.word	0x08001f09
 8001e9c:	08001f09 	.word	0x08001f09
 8001ea0:	08001f09 	.word	0x08001f09
 8001ea4:	08001f09 	.word	0x08001f09
 8001ea8:	08001f09 	.word	0x08001f09
 8001eac:	08001f09 	.word	0x08001f09
 8001eb0:	08001f09 	.word	0x08001f09
 8001eb4:	08001f09 	.word	0x08001f09
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f09 	.word	0x08001f09
 8001ec0:	08001f09 	.word	0x08001f09
 8001ec4:	08001f09 	.word	0x08001f09
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	2b5c      	cmp	r3, #92	; 0x5c
 8001ece:	d11b      	bne.n	8001f08 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	225c      	movs	r2, #92	; 0x5c
 8001ed4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed6:	e022      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2222      	movs	r2, #34	; 0x22
 8001edc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ede:	e01e      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2262      	movs	r2, #98	; 0x62
 8001ee4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee6:	e01a      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2266      	movs	r2, #102	; 0x66
 8001eec:	701a      	strb	r2, [r3, #0]
                    break;
 8001eee:	e016      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	226e      	movs	r2, #110	; 0x6e
 8001ef4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ef6:	e012      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2272      	movs	r2, #114	; 0x72
 8001efc:	701a      	strb	r2, [r3, #0]
                    break;
 8001efe:	e00e      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2274      	movs	r2, #116	; 0x74
 8001f04:	701a      	strb	r2, [r3, #0]
                    break;
 8001f06:	e00a      	b.n	8001f1e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	; (8001f60 <print_string_ptr+0x25c>)
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f00c fbf7 	bl	800e704 <siprintf>
                    output_pointer += 4;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	61bb      	str	r3, [r7, #24]
                    break;
 8001f1c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f47f af73 	bne.w	8001e1a <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2222      	movs	r2, #34	; 0x22
 8001f3e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3302      	adds	r3, #2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

    return true;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08011de4 	.word	0x08011de4
 8001f5c:	04000037 	.word	0x04000037
 8001f60:	08011de8 	.word	0x08011de8

08001f64 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fec5 	bl	8001d04 <print_string_ptr>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <buffer_skip_whitespace+0x16>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e02c      	b.n	8001ff8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <buffer_skip_whitespace+0x2c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d306      	bcc.n	8001fbe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	e021      	b.n	8001ff8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <buffer_skip_whitespace+0x5c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <buffer_skip_whitespace+0x5c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d9e9      	bls.n	8001fb4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d104      	bne.n	8001ff6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <skip_utf8_bom+0x1e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <skip_utf8_bom+0x1e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	e01c      	b.n	8002060 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <skip_utf8_bom+0x5a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	1d1a      	adds	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d211      	bcs.n	800205e <skip_utf8_bom+0x5a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4413      	add	r3, r2
 8002044:	2203      	movs	r2, #3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <skip_utf8_bom+0x64>)
 8002048:	4618      	mov	r0, r3
 800204a:	f00c fbf4 	bl	800e836 <strncmp>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d104      	bne.n	800205e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	1cda      	adds	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08011df0 	.word	0x08011df0

0800206c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	e00c      	b.n	800209c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe f8b6 	bl	80001f4 <strlen>
 8002088:	4603      	mov	r3, r0
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f805 	bl	80020a4 <cJSON_ParseWithLengthOpts>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	615a      	str	r2, [r3, #20]
 80020c4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d042      	beq.n	8002162 <cJSON_ParseWithLengthOpts+0xbe>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03f      	beq.n	8002162 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020ee:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <cJSON_ParseWithLengthOpts+0x130>)
 80020f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020fa:	4836      	ldr	r0, [pc, #216]	; (80021d4 <cJSON_ParseWithLengthOpts+0x130>)
 80020fc:	f7ff f828 	bl	8001150 <cJSON_New_Item>
 8002100:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02e      	beq.n	8002166 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff79 	bl	8002004 <skip_utf8_bom>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <buffer_skip_whitespace>
 800211a:	4603      	mov	r3, r0
 800211c:	4619      	mov	r1, r3
 800211e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002120:	f000 f8fc 	bl	800231c <parse_value>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01f      	beq.n	800216a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff25 	bl	8001f84 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800213a:	6a3a      	ldr	r2, [r7, #32]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	429a      	cmp	r2, r3
 8002140:	d215      	bcs.n	800216e <cJSON_ParseWithLengthOpts+0xca>
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	e031      	b.n	80021c6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002162:	bf00      	nop
 8002164:	e004      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800216e:	bf00      	nop

fail:
    if (item != NULL)
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002178:	f7ff f800 	bl	800117c <cJSON_Delete>
    }

    if (value != NULL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	429a      	cmp	r2, r3
 8002190:	d202      	bcs.n	8002198 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e005      	b.n	80021a4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80021b6:	461a      	mov	r2, r3
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021c0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3738      	adds	r7, #56	; 0x38
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000374 	.word	0x20000374
 80021d4:	20000000 	.word	0x20000000

080021d8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff41 	bl	800206c <cJSON_ParseWithOpts>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2224      	movs	r2, #36	; 0x24
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00c f90f 	bl	800e430 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <print+0x104>)
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4610      	mov	r0, r2
 800221c:	4798      	blx	r3
 800221e:	4603      	mov	r3, r0
 8002220:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <print+0x104>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002232:	ca07      	ldmia	r2, {r0, r1, r2}
 8002234:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4619      	mov	r1, r3
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f955 	bl	80024f4 <print_value>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d039      	beq.n	80022c4 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f96b 	bl	8001530 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	6938      	ldr	r0, [r7, #16]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	3201      	adds	r2, #1
 800226c:	4611      	mov	r1, r2
 800226e:	4798      	blx	r3
 8002270:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	2b00      	cmp	r3, #0
 8002276:	d027      	beq.n	80022c8 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e01e      	b.n	80022bc <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	3201      	adds	r2, #1
 8002286:	4610      	mov	r0, r2
 8002288:	4798      	blx	r3
 800228a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4293      	cmp	r3, r2
 800229c:	bf28      	it	cs
 800229e:	4613      	movcs	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022a4:	f00c f8b6 	bl	800e414 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ac:	4413      	add	r3, r2
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
    }

    return printed;
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	e016      	b.n	80022ee <print+0xfa>
        goto fail;
 80022c0:	bf00      	nop
 80022c2:	e004      	b.n	80022ce <print+0xda>
        goto fail;
 80022c4:	bf00      	nop
 80022c6:	e002      	b.n	80022ce <print+0xda>
            goto fail;
 80022c8:	bf00      	nop
 80022ca:	e000      	b.n	80022ce <print+0xda>
            goto fail;
 80022cc:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4610      	mov	r0, r2
 80022dc:	4798      	blx	r3
    }

    if (printed != NULL)
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <print+0xf8>
    {
        hooks->deallocate(printed);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022ea:	4798      	blx	r3
    }

    return NULL;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3738      	adds	r7, #56	; 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	08011f00 	.word	0x08011f00

080022fc <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <cJSON_PrintUnformatted+0x1c>)
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff73 	bl	80021f4 <print>
 800230e:	4603      	mov	r3, r0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000000 	.word	0x20000000

0800231c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <parse_value+0x18>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <parse_value+0x1c>
    {
        return false; /* no input */
 8002334:	2300      	movs	r3, #0
 8002336:	e0d2      	b.n	80024de <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01d      	beq.n	800237a <parse_value+0x5e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d816      	bhi.n	800237a <parse_value+0x5e>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4413      	add	r3, r2
 8002356:	2204      	movs	r2, #4
 8002358:	4963      	ldr	r1, [pc, #396]	; (80024e8 <parse_value+0x1cc>)
 800235a:	4618      	mov	r0, r3
 800235c:	f00c fa6b 	bl	800e836 <strncmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	1d1a      	adds	r2, r3, #4
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	609a      	str	r2, [r3, #8]
        return true;
 8002376:	2301      	movs	r3, #1
 8002378:	e0b1      	b.n	80024de <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01d      	beq.n	80023bc <parse_value+0xa0>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	1d5a      	adds	r2, r3, #5
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d816      	bhi.n	80023bc <parse_value+0xa0>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4413      	add	r3, r2
 8002398:	2205      	movs	r2, #5
 800239a:	4954      	ldr	r1, [pc, #336]	; (80024ec <parse_value+0x1d0>)
 800239c:	4618      	mov	r0, r3
 800239e:	f00c fa4a 	bl	800e836 <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	1d5a      	adds	r2, r3, #5
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	609a      	str	r2, [r3, #8]
        return true;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e090      	b.n	80024de <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d020      	beq.n	8002404 <parse_value+0xe8>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d819      	bhi.n	8002404 <parse_value+0xe8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	2204      	movs	r2, #4
 80023dc:	4944      	ldr	r1, [pc, #272]	; (80024f0 <parse_value+0x1d4>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f00c fa29 	bl	800e836 <strncmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]
        return true;
 8002400:	2301      	movs	r3, #1
 8002402:	e06c      	b.n	80024de <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d013      	beq.n	8002432 <parse_value+0x116>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20d      	bcs.n	8002432 <parse_value+0x116>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b22      	cmp	r3, #34	; 0x22
 8002424:	d105      	bne.n	8002432 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fb25 	bl	8001a78 <parse_string>
 800242e:	4603      	mov	r3, r0
 8002430:	e055      	b.n	80024de <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <parse_value+0x164>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d21d      	bcs.n	8002480 <parse_value+0x164>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b2d      	cmp	r3, #45	; 0x2d
 8002452:	d00f      	beq.n	8002474 <parse_value+0x158>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b2f      	cmp	r3, #47	; 0x2f
 8002462:	d90d      	bls.n	8002480 <parse_value+0x164>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b39      	cmp	r3, #57	; 0x39
 8002472:	d805      	bhi.n	8002480 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fed2 	bl	8001220 <parse_number>
 800247c:	4603      	mov	r3, r0
 800247e:	e02e      	b.n	80024de <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d013      	beq.n	80024ae <parse_value+0x192>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20d      	bcs.n	80024ae <parse_value+0x192>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b5b      	cmp	r3, #91	; 0x5b
 80024a0:	d105      	bne.n	80024ae <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f909 	bl	80026bc <parse_array>
 80024aa:	4603      	mov	r3, r0
 80024ac:	e017      	b.n	80024de <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <parse_value+0x1c0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d20d      	bcs.n	80024dc <parse_value+0x1c0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b7b      	cmp	r3, #123	; 0x7b
 80024ce:	d105      	bne.n	80024dc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa3c 	bl	8002950 <parse_object>
 80024d8:	4603      	mov	r3, r0
 80024da:	e000      	b.n	80024de <parse_value+0x1c2>
    }

    return false;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08011dc4 	.word	0x08011dc4
 80024ec:	08011df4 	.word	0x08011df4
 80024f0:	08011dfc 	.word	0x08011dfc

080024f4 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <print_value+0x1a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <print_value+0x1e>
    {
        return false;
 800250e:	2300      	movs	r3, #0
 8002510:	e0c9      	b.n	80026a6 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	f000 808e 	beq.w	800263a <print_value+0x146>
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	f300 80c0 	bgt.w	80026a4 <print_value+0x1b0>
 8002524:	2b20      	cmp	r3, #32
 8002526:	dc49      	bgt.n	80025bc <print_value+0xc8>
 8002528:	2b00      	cmp	r3, #0
 800252a:	f340 80bb 	ble.w	80026a4 <print_value+0x1b0>
 800252e:	3b01      	subs	r3, #1
 8002530:	2b1f      	cmp	r3, #31
 8002532:	f200 80b7 	bhi.w	80026a4 <print_value+0x1b0>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <print_value+0x48>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	080025e7 	.word	0x080025e7
 8002540:	0800260b 	.word	0x0800260b
 8002544:	080026a5 	.word	0x080026a5
 8002548:	080025c3 	.word	0x080025c3
 800254c:	080026a5 	.word	0x080026a5
 8002550:	080026a5 	.word	0x080026a5
 8002554:	080026a5 	.word	0x080026a5
 8002558:	0800262f 	.word	0x0800262f
 800255c:	080026a5 	.word	0x080026a5
 8002560:	080026a5 	.word	0x080026a5
 8002564:	080026a5 	.word	0x080026a5
 8002568:	080026a5 	.word	0x080026a5
 800256c:	080026a5 	.word	0x080026a5
 8002570:	080026a5 	.word	0x080026a5
 8002574:	080026a5 	.word	0x080026a5
 8002578:	08002681 	.word	0x08002681
 800257c:	080026a5 	.word	0x080026a5
 8002580:	080026a5 	.word	0x080026a5
 8002584:	080026a5 	.word	0x080026a5
 8002588:	080026a5 	.word	0x080026a5
 800258c:	080026a5 	.word	0x080026a5
 8002590:	080026a5 	.word	0x080026a5
 8002594:	080026a5 	.word	0x080026a5
 8002598:	080026a5 	.word	0x080026a5
 800259c:	080026a5 	.word	0x080026a5
 80025a0:	080026a5 	.word	0x080026a5
 80025a4:	080026a5 	.word	0x080026a5
 80025a8:	080026a5 	.word	0x080026a5
 80025ac:	080026a5 	.word	0x080026a5
 80025b0:	080026a5 	.word	0x080026a5
 80025b4:	080026a5 	.word	0x080026a5
 80025b8:	0800268d 	.word	0x0800268d
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d06b      	beq.n	8002698 <print_value+0x1a4>
 80025c0:	e070      	b.n	80026a4 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025c2:	2105      	movs	r1, #5
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f7fe ff19 	bl	80013fc <ensure>
 80025ca:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <print_value+0xe2>
            {
                return false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e067      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <print_value+0x1bc>)
 80025da:	6810      	ldr	r0, [r2, #0]
 80025dc:	6018      	str	r0, [r3, #0]
 80025de:	7912      	ldrb	r2, [r2, #4]
 80025e0:	711a      	strb	r2, [r3, #4]
            return true;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e05f      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80025e6:	2106      	movs	r1, #6
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f7fe ff07 	bl	80013fc <ensure>
 80025ee:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <print_value+0x106>
            {
                return false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e055      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <print_value+0x1c0>)
 80025fe:	6810      	ldr	r0, [r2, #0]
 8002600:	6018      	str	r0, [r3, #0]
 8002602:	8892      	ldrh	r2, [r2, #4]
 8002604:	809a      	strh	r2, [r3, #4]
            return true;
 8002606:	2301      	movs	r3, #1
 8002608:	e04d      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800260a:	2105      	movs	r1, #5
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f7fe fef5 	bl	80013fc <ensure>
 8002612:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <print_value+0x12a>
            {
                return false;
 800261a:	2300      	movs	r3, #0
 800261c:	e043      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <print_value+0x1c4>)
 8002622:	6810      	ldr	r0, [r2, #0]
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	7912      	ldrb	r2, [r2, #4]
 8002628:	711a      	strb	r2, [r3, #4]
            return true;
 800262a:	2301      	movs	r3, #1
 800262c:	e03b      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe ffe7 	bl	8001604 <print_number>
 8002636:	4603      	mov	r3, r0
 8002638:	e035      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <print_value+0x156>
            {
                return false;
 8002646:	2300      	movs	r3, #0
 8002648:	e02d      	b.n	80026a6 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fdd0 	bl	80001f4 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	3301      	adds	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7fe fecd 	bl	80013fc <ensure>
 8002662:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <print_value+0x17a>
            {
                return false;
 800266a:	2300      	movs	r3, #0
 800266c:	e01b      	b.n	80026a6 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	4619      	mov	r1, r3
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f00b fecc 	bl	800e414 <memcpy>
            return true;
 800267c:	2301      	movs	r3, #1
 800267e:	e012      	b.n	80026a6 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fc6e 	bl	8001f64 <print_string>
 8002688:	4603      	mov	r3, r0
 800268a:	e00c      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8d8 	bl	8002844 <print_array>
 8002694:	4603      	mov	r3, r0
 8002696:	e006      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa57 	bl	8002b4e <print_object>
 80026a0:	4603      	mov	r3, r0
 80026a2:	e000      	b.n	80026a6 <print_value+0x1b2>

        default:
            return false;
 80026a4:	2300      	movs	r3, #0
    }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08011dc4 	.word	0x08011dc4
 80026b4:	08011df4 	.word	0x08011df4
 80026b8:	08011dfc 	.word	0x08011dfc

080026bc <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d301      	bcc.n	80026dc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026d8:	2300      	movs	r3, #0
 80026da:	e0af      	b.n	800283c <parse_array+0x180>
    }
    input_buffer->depth++;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b5b      	cmp	r3, #91	; 0x5b
 80026f4:	f040 8094 	bne.w	8002820 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7ff fc3e 	bl	8001f84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <parse_array+0x6e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d207      	bcs.n	800272a <parse_array+0x6e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b5d      	cmp	r3, #93	; 0x5d
 8002728:	d061      	beq.n	80027ee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <parse_array+0x80>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d305      	bcc.n	8002748 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	609a      	str	r2, [r3, #8]
        goto fail;
 8002746:	e072      	b.n	800282e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3310      	adds	r3, #16
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fcfa 	bl	8001150 <cJSON_New_Item>
 800275c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05f      	beq.n	8002824 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e007      	b.n	8002784 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7ff fbf8 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	6938      	ldr	r0, [r7, #16]
 8002798:	f7ff fdc0 	bl	800231c <parse_value>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d042      	beq.n	8002828 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f7ff fbee 	bl	8001f84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00d      	beq.n	80027ca <parse_array+0x10e>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d207      	bcs.n	80027ca <parse_array+0x10e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b2c      	cmp	r3, #44	; 0x2c
 80027c8:	d0c3      	beq.n	8002752 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02d      	beq.n	800282c <parse_array+0x170>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d227      	bcs.n	800282c <parse_array+0x170>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b5d      	cmp	r3, #93	; 0x5d
 80027ea:	d11f      	bne.n	800282c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027ec:	e000      	b.n	80027f0 <parse_array+0x134>
        goto success;
 80027ee:	bf00      	nop
    input_buffer->depth--;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <parse_array+0x14a>
        head->prev = current_item;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]

    return true;
 800281c:	2301      	movs	r3, #1
 800281e:	e00d      	b.n	800283c <parse_array+0x180>
        goto fail;
 8002820:	bf00      	nop
 8002822:	e004      	b.n	800282e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002824:	bf00      	nop
 8002826:	e002      	b.n	800282e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <parse_array+0x172>
        goto fail; /* expected end of array */
 800282c:	bf00      	nop

fail:
    if (head != NULL)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7fe fca1 	bl	800117c <cJSON_Delete>
    }

    return false;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <print_array+0x22>
    {
        return false;
 8002862:	2300      	movs	r3, #0
 8002864:	e070      	b.n	8002948 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002866:	2101      	movs	r1, #1
 8002868:	6838      	ldr	r0, [r7, #0]
 800286a:	f7fe fdc7 	bl	80013fc <ensure>
 800286e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <print_array+0x36>
    {
        return false;
 8002876:	2300      	movs	r3, #0
 8002878:	e066      	b.n	8002948 <print_array+0x104>
    }

    *output_pointer = '[';
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	225b      	movs	r2, #91	; 0x5b
 800287e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002894:	e03d      	b.n	8002912 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f7ff fe2b 	bl	80024f4 <print_value>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <print_array+0x64>
        {
            return false;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e04f      	b.n	8002948 <print_array+0x104>
        }
        update_offset(output_buffer);
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f7fe fe41 	bl	8001530 <update_offset>
        if (current_element->next)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02a      	beq.n	800290c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <print_array+0x7e>
 80028be:	2302      	movs	r3, #2
 80028c0:	e000      	b.n	80028c4 <print_array+0x80>
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4619      	mov	r1, r3
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7fe fd95 	bl	80013fc <ensure>
 80028d2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <print_array+0x9a>
            {
                return false;
 80028da:	2300      	movs	r3, #0
 80028dc:	e034      	b.n	8002948 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	617a      	str	r2, [r7, #20]
 80028e4:	222c      	movs	r2, #44	; 0x2c
 80028e6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	617a      	str	r2, [r7, #20]
 80028f6:	2220      	movs	r2, #32
 80028f8:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	441a      	add	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1be      	bne.n	8002896 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002918:	2102      	movs	r1, #2
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f7fe fd6e 	bl	80013fc <ensure>
 8002920:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <print_array+0xe8>
    {
        return false;
 8002928:	2300      	movs	r3, #0
 800292a:	e00d      	b.n	8002948 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	617a      	str	r2, [r7, #20]
 8002932:	225d      	movs	r2, #93	; 0x5d
 8002934:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60da      	str	r2, [r3, #12]

    return true;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296a:	d301      	bcc.n	8002970 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800296c:	2300      	movs	r3, #0
 800296e:	e0ea      	b.n	8002b46 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80d0 	beq.w	8002b22 <parse_object+0x1d2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	f080 80c9 	bcs.w	8002b22 <parse_object+0x1d2>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b7b      	cmp	r3, #123	; 0x7b
 800299e:	f040 80c0 	bne.w	8002b22 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f7ff fae9 	bl	8001f84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <parse_object+0x86>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d208      	bcs.n	80029d6 <parse_object+0x86>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4413      	add	r3, r2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b7d      	cmp	r3, #125	; 0x7d
 80029d2:	f000 808d 	beq.w	8002af0 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <parse_object+0x98>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d305      	bcc.n	80029f4 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	609a      	str	r2, [r3, #8]
        goto fail;
 80029f2:	e0a1      	b.n	8002b38 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3310      	adds	r3, #16
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fba4 	bl	8001150 <cJSON_New_Item>
 8002a08:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808a 	beq.w	8002b26 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	e007      	b.n	8002a32 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a3c:	6838      	ldr	r0, [r7, #0]
 8002a3e:	f7ff faa1 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	6938      	ldr	r0, [r7, #16]
 8002a46:	f7ff f817 	bl	8001a78 <parse_string>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d06c      	beq.n	8002b2a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f7ff fa97 	bl	8001f84 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d061      	beq.n	8002b2e <parse_object+0x1de>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d25b      	bcs.n	8002b2e <parse_object+0x1de>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b3a      	cmp	r3, #58	; 0x3a
 8002a84:	d153      	bne.n	8002b2e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a90:	6838      	ldr	r0, [r7, #0]
 8002a92:	f7ff fa77 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	6938      	ldr	r0, [r7, #16]
 8002a9a:	f7ff fc3f 	bl	800231c <parse_value>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d046      	beq.n	8002b32 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f7ff fa6d 	bl	8001f84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <parse_object+0x17c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <parse_object+0x17c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b2c      	cmp	r3, #44	; 0x2c
 8002aca:	d098      	beq.n	80029fe <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d031      	beq.n	8002b36 <parse_object+0x1e6>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d22b      	bcs.n	8002b36 <parse_object+0x1e6>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b7d      	cmp	r3, #125	; 0x7d
 8002aec:	d123      	bne.n	8002b36 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002aee:	e000      	b.n	8002af2 <parse_object+0x1a2>
        goto success; /* empty object */
 8002af0:	bf00      	nop
    input_buffer->depth--;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <parse_object+0x1b8>
        head->prev = current_item;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	609a      	str	r2, [r3, #8]
    return true;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e011      	b.n	8002b46 <parse_object+0x1f6>
        goto fail; /* not an object */
 8002b22:	bf00      	nop
 8002b24:	e008      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002b26:	bf00      	nop
 8002b28:	e006      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002b36:	bf00      	nop

fail:
    if (head != NULL)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7fe fb1c 	bl	800117c <cJSON_Delete>
    }

    return false;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <print_object+0x22>
    {
        return false;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e108      	b.n	8002d82 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <print_object+0x2e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e000      	b.n	8002b7e <print_object+0x30>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4619      	mov	r1, r3
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f7fe fc38 	bl	80013fc <ensure>
 8002b8c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <print_object+0x4a>
    {
        return false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e0f4      	b.n	8002d82 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	227b      	movs	r2, #123	; 0x7b
 8002ba0:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	220a      	movs	r2, #10
 8002bbc:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bca:	e0a0      	b.n	8002d0e <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d022      	beq.n	8002c1a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f7fe fc0e 	bl	80013fc <ensure>
 8002be0:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <print_object+0x9e>
            {
                return false;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e0ca      	b.n	8002d82 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e007      	b.n	8002c02 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	61fa      	str	r2, [r7, #28]
 8002bf8:	2209      	movs	r2, #9
 8002bfa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3f2      	bcc.n	8002bf2 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	441a      	add	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f86f 	bl	8001d04 <print_string_ptr>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <print_object+0xe2>
        {
            return false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e0a8      	b.n	8002d82 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f7fe fc7d 	bl	8001530 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <print_object+0xf4>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e000      	b.n	8002c44 <print_object+0xf6>
 8002c42:	2301      	movs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f7fe fbd7 	bl	80013fc <ensure>
 8002c4e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <print_object+0x10c>
        {
            return false;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e093      	b.n	8002d82 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	223a      	movs	r2, #58	; 0x3a
 8002c62:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	61fa      	str	r2, [r7, #28]
 8002c72:	2209      	movs	r2, #9
 8002c74:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	69b8      	ldr	r0, [r7, #24]
 8002c86:	f7ff fc35 	bl	80024f4 <print_value>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <print_object+0x146>
        {
            return false;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e076      	b.n	8002d82 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c94:	6838      	ldr	r0, [r7, #0]
 8002c96:	f7fe fc4b 	bl	8001530 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <print_object+0x158>
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	e000      	b.n	8002ca8 <print_object+0x15a>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <print_object+0x166>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <print_object+0x168>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7fe fb9b 	bl	80013fc <ensure>
 8002cc6:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <print_object+0x184>
        {
            return false;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e057      	b.n	8002d82 <print_object+0x234>
        }
        if (current_item->next)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	222c      	movs	r2, #44	; 0x2c
 8002ce2:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	61fa      	str	r2, [r7, #28]
 8002cf2:	220a      	movs	r2, #10
 8002cf4:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	441a      	add	r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af5b 	bne.w	8002bcc <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <print_object+0x1d8>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	e000      	b.n	8002d28 <print_object+0x1da>
 8002d26:	2302      	movs	r3, #2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	f7fe fb66 	bl	80013fc <ensure>
 8002d30:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <print_object+0x1ee>
    {
        return false;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e022      	b.n	8002d82 <print_object+0x234>
    }
    if (output_buffer->format)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e007      	b.n	8002d5a <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	61fa      	str	r2, [r7, #28]
 8002d50:	2209      	movs	r2, #9
 8002d52:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	3301      	adds	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3f1      	bcc.n	8002d4a <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	61fa      	str	r2, [r7, #28]
 8002d6c:	227d      	movs	r2, #125	; 0x7d
 8002d6e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	60da      	str	r2, [r3, #12]

    return true;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <get_object_item+0x1c>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <get_object_item+0x20>
    {
        return NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e033      	b.n	8002e12 <get_object_item+0x88>
    }

    current_element = object->child;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002db6:	e002      	b.n	8002dbe <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01c      	beq.n	8002dfe <get_object_item+0x74>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <get_object_item+0x74>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68b8      	ldr	r0, [r7, #8]
 8002dd4:	f7fd fa04 	bl	80001e0 <strcmp>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ec      	bne.n	8002db8 <get_object_item+0x2e>
 8002dde:	e00e      	b.n	8002dfe <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <get_object_item+0x74>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68b8      	ldr	r0, [r7, #8]
 8002df4:	f7fe f918 	bl	8001028 <case_insensitive_strcmp>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <get_object_item+0x82>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <get_object_item+0x86>
        return NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <get_object_item+0x88>
    }

    return current_element;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002e24:	2200      	movs	r2, #0
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffae 	bl	8002d8a <get_object_item>
 8002e2e:	4603      	mov	r3, r0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <add_item_to_array+0x22>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <add_item_to_array+0x22>
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d101      	bne.n	8002e80 <add_item_to_array+0x26>
    {
        return false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e01e      	b.n	8002ebe <add_item_to_array+0x64>
    }

    child = array->child;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e00d      	b.n	8002ebc <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ffc2 	bl	8002e38 <suffix_object>
            array->child->prev = item;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002ece:	687b      	ldr	r3, [r7, #4]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <add_item_to_object+0x30>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <add_item_to_object+0x30>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <add_item_to_object+0x30>
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d101      	bne.n	8002f10 <add_item_to_object+0x34>
    {
        return false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e036      	b.n	8002f7e <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f7ff ffd5 	bl	8002ec6 <cast_away_const>
 8002f1c:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00e      	b.n	8002f48 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	68b8      	ldr	r0, [r7, #8]
 8002f2e:	f7fe f8e7 	bl	8001100 <cJSON_strdup>
 8002f32:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <add_item_to_object+0x62>
        {
            return false;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e01f      	b.n	8002f7e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f46:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <add_item_to_object+0x8c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a12      	ldr	r2, [r2, #32]
 8002f64:	4610      	mov	r0, r2
 8002f66:	4798      	blx	r3
    }

    item->string = new_key;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ff6f 	bl	8002e5a <add_item_to_array>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002f96:	ed97 0b00 	vldr	d0, [r7]
 8002f9a:	f000 f819 	bl	8002fd0 <cJSON_CreateNumber>
 8002f9e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <cJSON_AddNumberToObject+0x44>)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff96 	bl	8002edc <add_item_to_object>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e003      	b.n	8002fc2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7fe f8de 	bl	800117c <cJSON_Delete>
    return NULL;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002fda:	481f      	ldr	r0, [pc, #124]	; (8003058 <cJSON_CreateNumber+0x88>)
 8002fdc:	f7fe f8b8 	bl	8001150 <cJSON_New_Item>
 8002fe0:	60f8      	str	r0, [r7, #12]
    if(item)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02c      	beq.n	8003042 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2208      	movs	r2, #8
 8002fec:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002ff8:	a315      	add	r3, pc, #84	; (adr r3, 8003050 <cJSON_CreateNumber+0x80>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003002:	f7fd fd97 	bl	8000b34 <__aeabi_dcmpge>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	e015      	b.n	8003042 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <cJSON_CreateNumber+0x8c>)
 800301c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003020:	f7fd fd7e 	bl	8000b20 <__aeabi_dcmple>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	e006      	b.n	8003042 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8003034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003038:	f7fd fda6 	bl	8000b88 <__aeabi_d2iz>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	f3af 8000 	nop.w
 8003050:	ffc00000 	.word	0xffc00000
 8003054:	41dfffff 	.word	0x41dfffff
 8003058:	20000000 	.word	0x20000000
 800305c:	c1e00000 	.word	0xc1e00000

08003060 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <cJSON_CreateObject+0x24>)
 8003068:	f7fe f872 	bl	8001150 <cJSON_New_Item>
 800306c:	6078      	str	r0, [r7, #4]
    if (item)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	60da      	str	r2, [r3, #12]
    }

    return item;
 800307a:	687b      	ldr	r3, [r7, #4]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000000 	.word	0x20000000

08003088 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <cJSON_IsBool+0x12>
    {
        return false;
 8003096:	2300      	movs	r3, #0
 8003098:	e008      	b.n	80030ac <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <cJSON_IsNumber+0x12>
    {
        return false;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e007      	b.n	80030da <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <cJSON_IsObject+0x12>
    {
        return false;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e007      	b.n	8003108 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <deserializeJSON>:
 * This function takes a JSON string and fills a GameInfo struct with the deserialized information.
 *
 * @param json_data The JSON data to be deserialized.
 * @param info Pointer to the GameInfo struct to store the deserialized information.
 */
void deserializeJSON(const char* json_data, struct GameInfo* info) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_data);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff f85a 	bl	80021d8 <cJSON_Parse>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24

    // Who is JSON?

    if (root == NULL) {
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d079      	beq.n	8003220 <deserializeJSON+0x10c>
        // Handle the error here, e.g., set default values or return.
        return;
    }

    cJSON *red_json = cJSON_GetObjectItem(root, "team1");
 800312c:	493e      	ldr	r1, [pc, #248]	; (8003228 <deserializeJSON+0x114>)
 800312e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003130:	f7ff fe73 	bl	8002e1a <cJSON_GetObjectItem>
 8003134:	6238      	str	r0, [r7, #32]
    cJSON *blue_json = cJSON_GetObjectItem(root, "team2");
 8003136:	493d      	ldr	r1, [pc, #244]	; (800322c <deserializeJSON+0x118>)
 8003138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313a:	f7ff fe6e 	bl	8002e1a <cJSON_GetObjectItem>
 800313e:	61f8      	str	r0, [r7, #28]
    cJSON *end_of_round_json = cJSON_GetObjectItem(root, "end_of_round");
 8003140:	493b      	ldr	r1, [pc, #236]	; (8003230 <deserializeJSON+0x11c>)
 8003142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003144:	f7ff fe69 	bl	8002e1a <cJSON_GetObjectItem>
 8003148:	61b8      	str	r0, [r7, #24]

    if (red_json && cJSON_IsObject(red_json)) {
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d029      	beq.n	80031a4 <deserializeJSON+0x90>
 8003150:	6a38      	ldr	r0, [r7, #32]
 8003152:	f7ff ffc8 	bl	80030e6 <cJSON_IsObject>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <deserializeJSON+0x90>
        cJSON *score_json = cJSON_GetObjectItem(red_json, "score");
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <deserializeJSON+0x120>)
 800315e:	6a38      	ldr	r0, [r7, #32]
 8003160:	f7ff fe5b 	bl	8002e1a <cJSON_GetObjectItem>
 8003164:	6178      	str	r0, [r7, #20]
        cJSON *state_json = cJSON_GetObjectItem(red_json, "state");
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <deserializeJSON+0x124>)
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f7ff fe56 	bl	8002e1a <cJSON_GetObjectItem>
 800316e:	6138      	str	r0, [r7, #16]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <deserializeJSON+0x76>
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff9e 	bl	80030b8 <cJSON_IsNumber>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <deserializeJSON+0x76>
            info->red.score = score_json->valueint;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <deserializeJSON+0x90>
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	f7ff ff91 	bl	80030b8 <cJSON_IsNumber>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <deserializeJSON+0x90>
            info->red.state = state_json->valueint;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	605a      	str	r2, [r3, #4]
        }
    }

    if (blue_json && cJSON_IsObject(blue_json)) {
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d029      	beq.n	80031fe <deserializeJSON+0xea>
 80031aa:	69f8      	ldr	r0, [r7, #28]
 80031ac:	f7ff ff9b 	bl	80030e6 <cJSON_IsObject>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <deserializeJSON+0xea>
        cJSON *score_json = cJSON_GetObjectItem(blue_json, "score");
 80031b6:	491f      	ldr	r1, [pc, #124]	; (8003234 <deserializeJSON+0x120>)
 80031b8:	69f8      	ldr	r0, [r7, #28]
 80031ba:	f7ff fe2e 	bl	8002e1a <cJSON_GetObjectItem>
 80031be:	60f8      	str	r0, [r7, #12]
        cJSON *state_json = cJSON_GetObjectItem(blue_json, "state");
 80031c0:	491d      	ldr	r1, [pc, #116]	; (8003238 <deserializeJSON+0x124>)
 80031c2:	69f8      	ldr	r0, [r7, #28]
 80031c4:	f7ff fe29 	bl	8002e1a <cJSON_GetObjectItem>
 80031c8:	60b8      	str	r0, [r7, #8]

        if (score_json && cJSON_IsNumber(score_json)) {
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <deserializeJSON+0xd0>
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff ff71 	bl	80030b8 <cJSON_IsNumber>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <deserializeJSON+0xd0>
            info->blue.score = score_json->valueint;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	609a      	str	r2, [r3, #8]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <deserializeJSON+0xea>
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f7ff ff64 	bl	80030b8 <cJSON_IsNumber>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <deserializeJSON+0xea>
            info->blue.state = state_json->valueint;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        }
    }
    if (end_of_round_json && cJSON_IsBool(end_of_round_json)) {
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <deserializeJSON+0x104>
 8003204:	69b8      	ldr	r0, [r7, #24]
 8003206:	f7ff ff3f 	bl	8003088 <cJSON_IsBool>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <deserializeJSON+0x104>
        info->end_of_round = end_of_round_json->valueint;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	611a      	str	r2, [r3, #16]
    }

    cJSON_Delete(root);
 8003218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321a:	f7fd ffaf 	bl	800117c <cJSON_Delete>
 800321e:	e000      	b.n	8003222 <deserializeJSON+0x10e>
        return;
 8003220:	bf00      	nop
}
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	08011e04 	.word	0x08011e04
 800322c:	08011e0c 	.word	0x08011e0c
 8003230:	08011e14 	.word	0x08011e14
 8003234:	08011e24 	.word	0x08011e24
 8003238:	08011e2c 	.word	0x08011e2c

0800323c <serializeJSON>:
 * This function takes a broadcast packet and serializes it into a JSON and stores it in a char array.
 *
 * @param packet Pointer to he JSON data to be seralized.
 * @param data Pointer to the string storing the serialized JSON information.
 */
void* serializeJSON(BroadcastPacket* data, char* dst , uint32_t percentage){
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

	 cJSON* json = cJSON_CreateObject();
 8003248:	f7ff ff0a 	bl	8003060 <cJSON_CreateObject>
 800324c:	6178      	str	r0, [r7, #20]

	    if (json == NULL) {
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <serializeJSON+0x1c>
//	        fprintf(stderr, "Failed to create JSON object.\n");
	        return NULL;
 8003254:	2300      	movs	r3, #0
 8003256:	e03c      	b.n	80032d2 <serializeJSON+0x96>
	    }

	    cJSON_AddNumberToObject(json, "battery", percentage); // battery voltage
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd f96b 	bl	8000534 <__aeabi_ui2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	ec43 2b10 	vmov	d0, r2, r3
 8003266:	491d      	ldr	r1, [pc, #116]	; (80032dc <serializeJSON+0xa0>)
 8003268:	6978      	ldr	r0, [r7, #20]
 800326a:	f7ff fe8d 	bl	8002f88 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team1d", data->redDeltaScore);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f95e 	bl	8000534 <__aeabi_ui2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	ec43 2b10 	vmov	d0, r2, r3
 8003280:	4917      	ldr	r1, [pc, #92]	; (80032e0 <serializeJSON+0xa4>)
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7ff fe80 	bl	8002f88 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team2d", data->blueDeltaScore);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd f951 	bl	8000534 <__aeabi_ui2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	ec43 2b10 	vmov	d0, r2, r3
 800329a:	4912      	ldr	r1, [pc, #72]	; (80032e4 <serializeJSON+0xa8>)
 800329c:	6978      	ldr	r0, [r7, #20]
 800329e:	f7ff fe73 	bl	8002f88 <cJSON_AddNumberToObject>

	    char* temp = cJSON_PrintUnformatted(json);
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff f82a 	bl	80022fc <cJSON_PrintUnformatted>
 80032a8:	6138      	str	r0, [r7, #16]
	    strncat (temp, "\n", 2);
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f7fc ffa2 	bl	80001f4 <strlen>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	490b      	ldr	r1, [pc, #44]	; (80032e8 <serializeJSON+0xac>)
 80032ba:	461a      	mov	r2, r3
 80032bc:	460b      	mov	r3, r1
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	8013      	strh	r3, [r2, #0]
	    strcpy(dst, temp);
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f00b faae 	bl	800e826 <strcpy>
	    cJSON_Delete(json);
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7fd ff56 	bl	800117c <cJSON_Delete>

	    return dst;
 80032d0:	68bb      	ldr	r3, [r7, #8]


}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	08011e34 	.word	0x08011e34
 80032e0:	08011e3c 	.word	0x08011e3c
 80032e4:	08011e44 	.word	0x08011e44
 80032e8:	08011e4c 	.word	0x08011e4c

080032ec <select_rfid_channel>:
volatile st25r95_handle reader_handler;

/**
 * channel index is 1 indexed, 1-12
 */
uint8_t select_rfid_channel(uint8_t channel_index) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]

	if (channel_index < 1 || channel_index > 12) {
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <select_rfid_channel+0x16>
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d901      	bls.n	8003306 <select_rfid_channel+0x1a>
		return 1;  // Invalid switch index
 8003302:	2301      	movs	r3, #1
 8003304:	e0d4      	b.n	80034b0 <select_rfid_channel+0x1c4>
	}

	// Set U2.4
	uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
	if (channel_index <= 4) {
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d80e      	bhi.n	800332e <select_rfid_channel+0x42>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003316:	4868      	ldr	r0, [pc, #416]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003318:	f004 f84e 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003322:	4865      	ldr	r0, [pc, #404]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003324:	f004 f848 	bl	80073b8 <HAL_GPIO_WritePin>
		switch_refdes = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e01f      	b.n	800336e <select_rfid_channel+0x82>
	} else if (channel_index <= 8) {
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d80e      	bhi.n	8003352 <select_rfid_channel+0x66>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003334:	2201      	movs	r2, #1
 8003336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800333a:	485f      	ldr	r0, [pc, #380]	; (80034b8 <select_rfid_channel+0x1cc>)
 800333c:	f004 f83c 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 8003340:	2201      	movs	r2, #1
 8003342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003346:	485c      	ldr	r0, [pc, #368]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003348:	f004 f836 	bl	80073b8 <HAL_GPIO_WritePin>
		switch_refdes = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e00d      	b.n	800336e <select_rfid_channel+0x82>
	} else { // if channel_index <= 12
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003358:	4857      	ldr	r0, [pc, #348]	; (80034b8 <select_rfid_channel+0x1cc>)
 800335a:	f004 f82d 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003364:	4854      	ldr	r0, [pc, #336]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003366:	f004 f827 	bl	80073b8 <HAL_GPIO_WritePin>
		switch_refdes = 3;
 800336a:	2303      	movs	r3, #3
 800336c:	73fb      	strb	r3, [r7, #15]
	}

	// The pattern on each 2nd layer switch is the same, use multiplexing
	uint8_t V0 = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	73bb      	strb	r3, [r7, #14]
	uint8_t V1 = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	737b      	strb	r3, [r7, #13]
	if (channel_index % 4 == 0) {  // 4, 8, 12
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <select_rfid_channel+0xa0>
		V0 = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	737b      	strb	r3, [r7, #13]
 800338a:	e019      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 1) {  // 1, 5, 9
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d104      	bne.n	80033a2 <select_rfid_channel+0xb6>
		V0 = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	737b      	strb	r3, [r7, #13]
 80033a0:	e00e      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 2) {  // 2, 6, 10
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d104      	bne.n	80033b8 <select_rfid_channel+0xcc>
		V0 = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	737b      	strb	r3, [r7, #13]
 80033b6:	e003      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else {  // if channel_index % 4 == 3  // 3, 7, 11
		V0 = 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033bc:	2301      	movs	r3, #1
 80033be:	737b      	strb	r3, [r7, #13]
	}

	// The other switches' V0/V1 are don't care, but set them to 0 anyways
	switch (switch_refdes) {
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d04c      	beq.n	8003460 <select_rfid_channel+0x174>
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	dc6d      	bgt.n	80034a6 <select_rfid_channel+0x1ba>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <select_rfid_channel+0xe8>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d023      	beq.n	800341a <select_rfid_channel+0x12e>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
		break;
	default:
		break;
 80033d2:	e068      	b.n	80034a6 <select_rfid_channel+0x1ba>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	461a      	mov	r2, r3
 80033d8:	2104      	movs	r1, #4
 80033da:	4838      	ldr	r0, [pc, #224]	; (80034bc <select_rfid_channel+0x1d0>)
 80033dc:	f003 ffec 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 80033e0:	7b7b      	ldrb	r3, [r7, #13]
 80033e2:	461a      	mov	r2, r3
 80033e4:	2102      	movs	r1, #2
 80033e6:	4835      	ldr	r0, [pc, #212]	; (80034bc <select_rfid_channel+0x1d0>)
 80033e8:	f003 ffe6 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f2:	4831      	ldr	r0, [pc, #196]	; (80034b8 <select_rfid_channel+0x1cc>)
 80033f4:	f003 ffe0 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fe:	482e      	ldr	r0, [pc, #184]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003400:	f003 ffda 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	482c      	ldr	r0, [pc, #176]	; (80034bc <select_rfid_channel+0x1d0>)
 800340a:	f003 ffd5 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	482a      	ldr	r0, [pc, #168]	; (80034bc <select_rfid_channel+0x1d0>)
 8003414:	f003 ffd0 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 8003418:	e046      	b.n	80034a8 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2104      	movs	r1, #4
 800341e:	4827      	ldr	r0, [pc, #156]	; (80034bc <select_rfid_channel+0x1d0>)
 8003420:	f003 ffca 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2102      	movs	r1, #2
 8003428:	4824      	ldr	r0, [pc, #144]	; (80034bc <select_rfid_channel+0x1d0>)
 800342a:	f003 ffc5 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	461a      	mov	r2, r3
 8003432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003436:	4820      	ldr	r0, [pc, #128]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003438:	f003 ffbe 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003444:	481c      	ldr	r0, [pc, #112]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003446:	f003 ffb7 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	481b      	ldr	r0, [pc, #108]	; (80034bc <select_rfid_channel+0x1d0>)
 8003450:	f003 ffb2 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	4818      	ldr	r0, [pc, #96]	; (80034bc <select_rfid_channel+0x1d0>)
 800345a:	f003 ffad 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 800345e:	e023      	b.n	80034a8 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2104      	movs	r1, #4
 8003464:	4815      	ldr	r0, [pc, #84]	; (80034bc <select_rfid_channel+0x1d0>)
 8003466:	f003 ffa7 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2102      	movs	r1, #2
 800346e:	4813      	ldr	r0, [pc, #76]	; (80034bc <select_rfid_channel+0x1d0>)
 8003470:	f003 ffa2 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800347a:	480f      	ldr	r0, [pc, #60]	; (80034b8 <select_rfid_channel+0x1cc>)
 800347c:	f003 ff9c 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003486:	480c      	ldr	r0, [pc, #48]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003488:	f003 ff96 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	461a      	mov	r2, r3
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	480a      	ldr	r0, [pc, #40]	; (80034bc <select_rfid_channel+0x1d0>)
 8003494:	f003 ff90 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8003498:	7b7b      	ldrb	r3, [r7, #13]
 800349a:	461a      	mov	r2, r3
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4807      	ldr	r0, [pc, #28]	; (80034bc <select_rfid_channel+0x1d0>)
 80034a0:	f003 ff8a 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 80034a4:	e000      	b.n	80034a8 <select_rfid_channel+0x1bc>
		break;
 80034a6:	bf00      	nop
	}

	reader_handler.ant_channel = channel_index;
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <select_rfid_channel+0x1d4>)
 80034ac:	6153      	str	r3, [r2, #20]
	return 0;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	48000400 	.word	0x48000400
 80034bc:	48000800 	.word	0x48000800
 80034c0:	200008d4 	.word	0x200008d4

080034c4 <reader_irq_pulse>:

void reader_irq_pulse() {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2110      	movs	r1, #16
 80034cc:	4807      	ldr	r0, [pc, #28]	; (80034ec <reader_irq_pulse+0x28>)
 80034ce:	f003 ff73 	bl	80073b8 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(1)); // delay 1 ms
 80034d2:	2001      	movs	r0, #1
 80034d4:	f009 f88c 	bl	800c5f0 <vTaskDelay>
	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	2110      	movs	r1, #16
 80034dc:	4803      	ldr	r0, [pc, #12]	; (80034ec <reader_irq_pulse+0x28>)
 80034de:	f003 ff6b 	bl	80073b8 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(100)); // delay 100 ms
 80034e2:	2064      	movs	r0, #100	; 0x64
 80034e4:	f009 f884 	bl	800c5f0 <vTaskDelay>

}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	48000800 	.word	0x48000800

080034f0 <reader_nss>:

void reader_nss(uint8_t enable) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN,
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	2110      	movs	r1, #16
 800350a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350e:	f003 ff53 	bl	80073b8 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b29a      	uxth	r2, r3
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4804      	ldr	r0, [pc, #16]	; (8003544 <reader_tx+0x28>)
 8003532:	f005 fa28 	bl	8008986 <HAL_SPI_Transmit>
 8003536:	4603      	mov	r3, r0
 8003538:	60fb      	str	r3, [r7, #12]
	return ret;
 800353a:	68fb      	ldr	r3, [r7, #12]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	2000042c 	.word	0x2000042c

08003548 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <reader_rx+0x28>)
 800355e:	f005 fb80 	bl	8008c62 <HAL_SPI_Receive>
 8003562:	4603      	mov	r3, r0
 8003564:	60fb      	str	r3, [r7, #12]
	return ret;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	2000042c 	.word	0x2000042c

08003574 <HAL_GPIO_EXTI_Callback>:

BaseType_t xHigherPriorityTaskWoken;

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
	static int errorCounter = 0;

    /* We have not woken a task at the start of the ISR. */
    xHigherPriorityTaskWoken = pdFALSE;
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

	if (pin == RFID_NIRQ_OUT_PIN) {
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d102      	bne.n	8003592 <HAL_GPIO_EXTI_Callback+0x1e>
		reader_handler.irq_flag = 1;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x30>)
 800358e:	2201      	movs	r2, #1
 8003590:	761a      	strb	r2, [r3, #24]
	}
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20000904 	.word	0x20000904
 80035a4:	200008d4 	.word	0x200008d4

080035a8 <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	;
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);  // toggle LED1
 80035c4:	2120      	movs	r1, #32
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <HAL_UART_RxHalfCpltCallback+0x18>)
 80035c8:	f003 ff0e 	bl	80073e8 <HAL_GPIO_TogglePin>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	48000400 	.word	0x48000400

080035d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFF_SIZE - 1);
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	4905      	ldr	r1, [pc, #20]	; (80035f8 <HAL_UART_RxCpltCallback+0x20>)
 80035e4:	4805      	ldr	r0, [pc, #20]	; (80035fc <HAL_UART_RxCpltCallback+0x24>)
 80035e6:	f006 f929 	bl	800983c <HAL_UART_Receive_DMA>

  DMA_RX = 1;
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_UART_RxCpltCallback+0x28>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200006bc 	.word	0x200006bc
 80035fc:	20000490 	.word	0x20000490
 8003600:	200008d0 	.word	0x200008d0

08003604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003608:	f001 ff50 	bl	80054ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800360c:	f000 f8bc 	bl	8003788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003610:	f000 fa4c 	bl	8003aac <MX_GPIO_Init>
  MX_DMA_Init();
 8003614:	f000 fa10 	bl	8003a38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003618:	f000 f9de 	bl	80039d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800361c:	f000 f9ac 	bl	8003978 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003620:	f000 f904 	bl	800382c <MX_ADC1_Init>
  MX_SPI1_Init();
 8003624:	f000 f96a 	bl	80038fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_15693;
 8003628:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <main+0x11c>)
 800362a:	2201      	movs	r2, #1
 800362c:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <main+0x11c>)
 8003630:	2200      	movs	r2, #0
 8003632:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <main+0x11c>)
 8003636:	2200      	movs	r2, #0
 8003638:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <main+0x11c>)
 800363c:	2258      	movs	r2, #88	; 0x58
 800363e:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 8003640:	4b37      	ldr	r3, [pc, #220]	; (8003720 <main+0x11c>)
 8003642:	22d1      	movs	r2, #209	; 0xd1
 8003644:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <main+0x11c>)
 8003648:	2200      	movs	r2, #0
 800364a:	761a      	strb	r2, [r3, #24]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <main+0x11c>)
 800364e:	4a35      	ldr	r2, [pc, #212]	; (8003724 <main+0x120>)
 8003650:	621a      	str	r2, [r3, #32]
  reader_handler.tx = reader_tx;
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <main+0x11c>)
 8003654:	4a34      	ldr	r2, [pc, #208]	; (8003728 <main+0x124>)
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.rx = reader_rx;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <main+0x11c>)
 800365a:	4a34      	ldr	r2, [pc, #208]	; (800372c <main+0x128>)
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  reader_handler.irq_pulse = reader_irq_pulse;
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <main+0x11c>)
 8003660:	4a33      	ldr	r2, [pc, #204]	; (8003730 <main+0x12c>)
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  reader_handler.callback = st25_card_callback;
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <main+0x11c>)
 8003666:	4a33      	ldr	r2, [pc, #204]	; (8003734 <main+0x130>)
 8003668:	61da      	str	r2, [r3, #28]

  BeanBag_setup();
 800366a:	f000 fca7 	bl	8003fbc <BeanBag_setup>

  HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFF_SIZE - 1);
 800366e:	22ff      	movs	r2, #255	; 0xff
 8003670:	4931      	ldr	r1, [pc, #196]	; (8003738 <main+0x134>)
 8003672:	4832      	ldr	r0, [pc, #200]	; (800373c <main+0x138>)
 8003674:	f006 f8e2 	bl	800983c <HAL_UART_Receive_DMA>

  MX_USART1_UART_Init();
 8003678:	f000 f97e 	bl	8003978 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800367c:	f007 fbec 	bl	800ae58 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BLESemaphore */
  BLESemaphoreHandle = osSemaphoreNew(1, 1, &BLESemaphore_attributes);
 8003680:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <main+0x13c>)
 8003682:	2101      	movs	r1, #1
 8003684:	2001      	movs	r0, #1
 8003686:	f007 fdba 	bl	800b1fe <osSemaphoreNew>
 800368a:	4603      	mov	r3, r0
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <main+0x140>)
 800368e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of RFIDTimeout */
  RFIDTimeoutHandle = osTimerNew(RFIDTimeoutCallback, osTimerPeriodic, NULL, &RFIDTimeout_attributes);
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <main+0x144>)
 8003692:	2200      	movs	r2, #0
 8003694:	2101      	movs	r1, #1
 8003696:	482d      	ldr	r0, [pc, #180]	; (800374c <main+0x148>)
 8003698:	f007 fcd0 	bl	800b03c <osTimerNew>
 800369c:	4603      	mov	r3, r0
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <main+0x14c>)
 80036a0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xRFIDEventQueue */
  xRFIDEventQueueHandle = osMessageQueueNew (16, sizeof(RFIDEvent_t), &xRFIDEventQueue_attributes);
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <main+0x150>)
 80036a4:	2101      	movs	r1, #1
 80036a6:	2010      	movs	r0, #16
 80036a8:	f007 fe32 	bl	800b310 <osMessageQueueNew>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <main+0x154>)
 80036b0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BluetoothTXRX_T */
  BluetoothTXRX_THandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothTXRX_T_attributes);
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <main+0x158>)
 80036b4:	2100      	movs	r1, #0
 80036b6:	482a      	ldr	r0, [pc, #168]	; (8003760 <main+0x15c>)
 80036b8:	f007 fc18 	bl	800aeec <osThreadNew>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a29      	ldr	r2, [pc, #164]	; (8003764 <main+0x160>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <main+0x164>)
 80036c4:	2100      	movs	r1, #0
 80036c6:	4829      	ldr	r0, [pc, #164]	; (800376c <main+0x168>)
 80036c8:	f007 fc10 	bl	800aeec <osThreadNew>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a28      	ldr	r2, [pc, #160]	; (8003770 <main+0x16c>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 80036d2:	4a28      	ldr	r2, [pc, #160]	; (8003774 <main+0x170>)
 80036d4:	2100      	movs	r1, #0
 80036d6:	4828      	ldr	r0, [pc, #160]	; (8003778 <main+0x174>)
 80036d8:	f007 fc08 	bl	800aeec <osThreadNew>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a27      	ldr	r2, [pc, #156]	; (800377c <main+0x178>)
 80036e0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */

	if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 80036e2:	2102      	movs	r1, #2
 80036e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e8:	f003 fe4e 	bl	8007388 <HAL_GPIO_ReadPin>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d103      	bne.n	80036fa <main+0xf6>
		CBU_ID[3] = '1';
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <main+0x17c>)
 80036f4:	2231      	movs	r2, #49	; 0x31
 80036f6:	70da      	strb	r2, [r3, #3]
 80036f8:	e002      	b.n	8003700 <main+0xfc>
	} else {
		CBU_ID[3] = '0';
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <main+0x17c>)
 80036fc:	2230      	movs	r2, #48	; 0x30
 80036fe:	70da      	strb	r2, [r3, #3]
	}

	ble.huart = &huart1;
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <main+0x180>)
 8003702:	4a0e      	ldr	r2, [pc, #56]	; (800373c <main+0x138>)
 8003704:	601a      	str	r2, [r3, #0]
	ble.cs_base = BLE_CS_PORT;
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <main+0x180>)
 8003708:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800370c:	605a      	str	r2, [r3, #4]
	ble.cs_pin = BLE_CS_PIN;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <main+0x180>)
 8003710:	2201      	movs	r2, #1
 8003712:	811a      	strh	r2, [r3, #8]
	ble.name = CBU_ID;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <main+0x180>)
 8003716:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <main+0x17c>)
 8003718:	60da      	str	r2, [r3, #12]

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800371a:	f007 fbc1 	bl	800aea0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800371e:	e7fe      	b.n	800371e <main+0x11a>
 8003720:	200008d4 	.word	0x200008d4
 8003724:	080034f1 	.word	0x080034f1
 8003728:	0800351d 	.word	0x0800351d
 800372c:	08003549 	.word	0x08003549
 8003730:	080034c5 	.word	0x080034c5
 8003734:	080035a9 	.word	0x080035a9
 8003738:	200006bc 	.word	0x200006bc
 800373c:	20000490 	.word	0x20000490
 8003740:	08011f98 	.word	0x08011f98
 8003744:	2000069c 	.word	0x2000069c
 8003748:	08011f88 	.word	0x08011f88
 800374c:	08003e6d 	.word	0x08003e6d
 8003750:	20000698 	.word	0x20000698
 8003754:	08011f70 	.word	0x08011f70
 8003758:	20000694 	.word	0x20000694
 800375c:	08011f04 	.word	0x08011f04
 8003760:	08003c01 	.word	0x08003c01
 8003764:	20000688 	.word	0x20000688
 8003768:	08011f28 	.word	0x08011f28
 800376c:	08003d1d 	.word	0x08003d1d
 8003770:	2000068c 	.word	0x2000068c
 8003774:	08011f4c 	.word	0x08011f4c
 8003778:	08003e01 	.word	0x08003e01
 800377c:	20000690 	.word	0x20000690
 8003780:	20000018 	.word	0x20000018
 8003784:	200006a0 	.word	0x200006a0

08003788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b096      	sub	sp, #88	; 0x58
 800378c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	2244      	movs	r2, #68	; 0x44
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f00a fe4a 	bl	800e430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80037aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037ae:	f003 fe5b 	bl	8007468 <HAL_PWREx_ControlVoltageScaling>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80037b8:	f000 fb68 	bl	8003e8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037bc:	2302      	movs	r3, #2
 80037be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ca:	2302      	movs	r3, #2
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037ce:	2302      	movs	r3, #2
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80037d6:	230a      	movs	r3, #10
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037da:	2307      	movs	r3, #7
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037de:	2302      	movs	r3, #2
 80037e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037e2:	2302      	movs	r3, #2
 80037e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fe92 	bl	8007514 <HAL_RCC_OscConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80037f6:	f000 fb49 	bl	8003e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fa:	230f      	movs	r3, #15
 80037fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fe:	2303      	movs	r3, #3
 8003800:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800380e:	463b      	mov	r3, r7
 8003810:	2104      	movs	r1, #4
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fa92 	bl	8007d3c <HAL_RCC_ClockConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800381e:	f000 fb35 	bl	8003e8c <Error_Handler>
  }
}
 8003822:	bf00      	nop
 8003824:	3758      	adds	r7, #88	; 0x58
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003832:	463b      	mov	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
 8003840:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003844:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <MX_ADC1_Init+0xc8>)
 8003846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8003848:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800384a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800384e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003864:	2204      	movs	r2, #4
 8003866:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800386a:	2200      	movs	r2, #0
 800386c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003870:	2201      	movs	r2, #1
 8003872:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003874:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003876:	2201      	movs	r2, #1
 8003878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800388a:	2200      	movs	r2, #0
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <MX_ADC1_Init+0xc4>)
 8003898:	2200      	movs	r2, #0
 800389a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_ADC1_Init+0xc4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <MX_ADC1_Init+0xc4>)
 80038a6:	2204      	movs	r2, #4
 80038a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <MX_ADC1_Init+0xc4>)
 80038ac:	f002 f87a 	bl	80059a4 <HAL_ADC_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80038b6:	f000 fae9 	bl	8003e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <MX_ADC1_Init+0xcc>)
 80038bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038be:	2306      	movs	r3, #6
 80038c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038c6:	237f      	movs	r3, #127	; 0x7f
 80038c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038ca:	2304      	movs	r3, #4
 80038cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038d2:	463b      	mov	r3, r7
 80038d4:	4619      	mov	r1, r3
 80038d6:	4806      	ldr	r0, [pc, #24]	; (80038f0 <MX_ADC1_Init+0xc4>)
 80038d8:	f002 fa52 	bl	8005d80 <HAL_ADC_ConfigChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80038e2:	f000 fad3 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000037c 	.word	0x2000037c
 80038f4:	50040000 	.word	0x50040000
 80038f8:	cb840000 	.word	0xcb840000

080038fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <MX_SPI1_Init+0x74>)
 8003902:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <MX_SPI1_Init+0x78>)
 8003904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <MX_SPI1_Init+0x74>)
 8003908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800390c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <MX_SPI1_Init+0x74>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <MX_SPI1_Init+0x74>)
 8003916:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800391a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <MX_SPI1_Init+0x74>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <MX_SPI1_Init+0x74>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <MX_SPI1_Init+0x74>)
 800392a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <MX_SPI1_Init+0x74>)
 8003932:	2230      	movs	r2, #48	; 0x30
 8003934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_SPI1_Init+0x74>)
 8003938:	2200      	movs	r2, #0
 800393a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_SPI1_Init+0x74>)
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <MX_SPI1_Init+0x74>)
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_SPI1_Init+0x74>)
 800394a:	2207      	movs	r2, #7
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <MX_SPI1_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_SPI1_Init+0x74>)
 8003956:	2208      	movs	r2, #8
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_SPI1_Init+0x74>)
 800395c:	f004 ff70 	bl	8008840 <HAL_SPI_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003966:	f000 fa91 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	2000042c 	.word	0x2000042c
 8003974:	40013000 	.word	0x40013000

08003978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <MX_USART1_UART_Init+0x5c>)
 8003980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 8003984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 8003992:	2200      	movs	r2, #0
 8003994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 800399e:	220c      	movs	r2, #12
 80039a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039ba:	4805      	ldr	r0, [pc, #20]	; (80039d0 <MX_USART1_UART_Init+0x58>)
 80039bc:	f005 fe50 	bl	8009660 <HAL_UART_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039c6:	f000 fa61 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000490 	.word	0x20000490
 80039d4:	40013800 	.word	0x40013800

080039d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039de:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <MX_USART2_UART_Init+0x5c>)
 80039e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 80039fe:	220c      	movs	r2, #12
 8003a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_USART2_UART_Init+0x58>)
 8003a1c:	f005 fe20 	bl	8009660 <HAL_UART_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a26:	f000 fa31 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000544 	.word	0x20000544
 8003a34:	40004400 	.word	0x40004400

08003a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6493      	str	r3, [r2, #72]	; 0x48
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6493      	str	r3, [r2, #72]	; 0x48
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <MX_DMA_Init+0x70>)
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2106      	movs	r1, #6
 8003a72:	200b      	movs	r0, #11
 8003a74:	f003 f861 	bl	8006b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a78:	200b      	movs	r0, #11
 8003a7a:	f003 f87a 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 6, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2106      	movs	r1, #6
 8003a82:	200f      	movs	r0, #15
 8003a84:	f003 f859 	bl	8006b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003a88:	200f      	movs	r0, #15
 8003a8a:	f003 f872 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2105      	movs	r1, #5
 8003a92:	2044      	movs	r0, #68	; 0x44
 8003a94:	f003 f851 	bl	8006b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003a98:	2044      	movs	r0, #68	; 0x44
 8003a9a:	f003 f86a 	bl	8006b72 <HAL_NVIC_EnableIRQ>

}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac2:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	4a44      	ldr	r2, [pc, #272]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a3e      	ldr	r2, [pc, #248]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afe:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <MX_GPIO_Init+0x144>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	21d6      	movs	r1, #214	; 0xd6
 8003b0e:	4839      	ldr	r0, [pc, #228]	; (8003bf4 <MX_GPIO_Init+0x148>)
 8003b10:	f003 fc52 	bl	80073b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 8003b14:	2201      	movs	r2, #1
 8003b16:	2110      	movs	r1, #16
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1c:	f003 fc4c 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b20:	2200      	movs	r2, #0
 8003b22:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8003b26:	4834      	ldr	r0, [pc, #208]	; (8003bf8 <MX_GPIO_Init+0x14c>)
 8003b28:	f003 fc46 	bl	80073b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |LED0_Pin|LED1_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	4619      	mov	r1, r3
 8003b42:	482c      	ldr	r0, [pc, #176]	; (8003bf4 <MX_GPIO_Init+0x148>)
 8003b44:	f003 faa6 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8003b48:	23c6      	movs	r3, #198	; 0xc6
 8003b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4825      	ldr	r0, [pc, #148]	; (8003bf4 <MX_GPIO_Init+0x148>)
 8003b60:	f003 fa98 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 8003b64:	2310      	movs	r3, #16
 8003b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b70:	2303      	movs	r3, #3
 8003b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7e:	f003 fa89 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 8003b82:	2310      	movs	r3, #16
 8003b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	4619      	mov	r1, r3
 8003b98:	4816      	ldr	r0, [pc, #88]	; (8003bf4 <MX_GPIO_Init+0x148>)
 8003b9a:	f003 fa7b 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           LED0_Pin LED1_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b9e:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003ba2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |LED0_Pin|LED1_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4810      	ldr	r0, [pc, #64]	; (8003bf8 <MX_GPIO_Init+0x14c>)
 8003bb8:	f003 fa6c 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8003bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <MX_GPIO_Init+0x14c>)
 8003bd4:	f003 fa5e 	bl	8007094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2106      	movs	r1, #6
 8003bdc:	2028      	movs	r0, #40	; 0x28
 8003bde:	f002 ffac 	bl	8006b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003be2:	2028      	movs	r0, #40	; 0x28
 8003be4:	f002 ffc5 	bl	8006b72 <HAL_NVIC_EnableIRQ>

}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	48000800 	.word	0x48000800
 8003bf8:	48000400 	.word	0x48000400
 8003bfc:	00000000 	.word	0x00000000

08003c00 <StartBluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0c:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8003c0e:	f008 fe3f 	bl	800c890 <xTaskGetTickCount>
 8003c12:	4603      	mov	r3, r0
 8003c14:	60fb      	str	r3, [r7, #12]

	int ret;
	int count = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
	memset(rx_buffer, 0, RX_BUFF_SIZE);
 8003c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4835      	ldr	r0, [pc, #212]	; (8003cf8 <StartBluetoothTask+0xf8>)
 8003c22:	f00a fc05 	bl	800e430 <memset>
	char *json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 8003c26:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <StartBluetoothTask+0xfc>)
 8003c28:	613b      	str	r3, [r7, #16]

	float batteryPercentage = 0;
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]

	for (;;)
	 //osDelay(BROADCAST_PERIOD_MS); // temp for commenting out the rest of the task
	 {
		if (DMA_RX != 0) {
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <StartBluetoothTask+0x100>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d04d      	beq.n	8003cd4 <StartBluetoothTask+0xd4>
			DMA_RX = 0;
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <StartBluetoothTask+0x100>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

			// deserialize packet
			deserializeJSON((char*) rx_buffer, &gameInfo);
 8003c3e:	4931      	ldr	r1, [pc, #196]	; (8003d04 <StartBluetoothTask+0x104>)
 8003c40:	482d      	ldr	r0, [pc, #180]	; (8003cf8 <StartBluetoothTask+0xf8>)
 8003c42:	f7ff fa67 	bl	8003114 <deserializeJSON>
			// send reply packet
			//broadcastPacket.redDeltaScore = 2;
			//broadcastPacket.blueDeltaScore = 3;

			// voltage to percentage
			batteryPercentage = broadcastPacket.batteryVoltage - 3.6;
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <StartBluetoothTask+0x108>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc94 	bl	8000578 <__aeabi_f2d>
 8003c50:	a325      	add	r3, pc, #148	; (adr r3, 8003ce8 <StartBluetoothTask+0xe8>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc fb2f 	bl	80002b8 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fc ffd9 	bl	8000c18 <__aeabi_d2f>
 8003c66:	4603      	mov	r3, r0
 8003c68:	61fb      	str	r3, [r7, #28]
			batteryPercentage /= .024;
 8003c6a:	69f8      	ldr	r0, [r7, #28]
 8003c6c:	f7fc fc84 	bl	8000578 <__aeabi_f2d>
 8003c70:	a31f      	add	r3, pc, #124	; (adr r3, 8003cf0 <StartBluetoothTask+0xf0>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fe01 	bl	800087c <__aeabi_ddiv>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc ffc9 	bl	8000c18 <__aeabi_d2f>
 8003c86:	4603      	mov	r3, r0
 8003c88:	61fb      	str	r3, [r7, #28]
			if (batteryPercentage > 100) batteryPercentage = 100;
 8003c8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c8e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003d0c <StartBluetoothTask+0x10c>
 8003c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	dd01      	ble.n	8003ca0 <StartBluetoothTask+0xa0>
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <StartBluetoothTask+0x110>)
 8003c9e:	61fb      	str	r3, [r7, #28]
			if (batteryPercentage < 0) batteryPercentage = 0;
 8003ca0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	d502      	bpl.n	8003cb4 <StartBluetoothTask+0xb4>
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]

			serializeJSON(&broadcastPacket, (char*) tx_buffer, (uint32_t)batteryPercentage);
 8003cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cbc:	ee17 2a90 	vmov	r2, s15
 8003cc0:	4914      	ldr	r1, [pc, #80]	; (8003d14 <StartBluetoothTask+0x114>)
 8003cc2:	4811      	ldr	r0, [pc, #68]	; (8003d08 <StartBluetoothTask+0x108>)
 8003cc4:	f7ff faba 	bl	800323c <serializeJSON>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) tx_buffer, TX_BUFF_SIZE);
 8003cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ccc:	4911      	ldr	r1, [pc, #68]	; (8003d14 <StartBluetoothTask+0x114>)
 8003cce:	4812      	ldr	r0, [pc, #72]	; (8003d18 <StartBluetoothTask+0x118>)
 8003cd0:	f005 fd24 	bl	800971c <HAL_UART_Transmit_DMA>

		}
		vTaskDelayUntil(&xLastWakeTime, period);
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	69b9      	ldr	r1, [r7, #24]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f008 fc0a 	bl	800c4f4 <vTaskDelayUntil>
		if (DMA_RX != 0) {
 8003ce0:	e7a6      	b.n	8003c30 <StartBluetoothTask+0x30>
 8003ce2:	bf00      	nop
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	cccccccd 	.word	0xcccccccd
 8003cec:	400ccccc 	.word	0x400ccccc
 8003cf0:	bc6a7efa 	.word	0xbc6a7efa
 8003cf4:	3f989374 	.word	0x3f989374
 8003cf8:	200006bc 	.word	0x200006bc
 8003cfc:	08011eac 	.word	0x08011eac
 8003d00:	200008d0 	.word	0x200008d0
 8003d04:	200008bc 	.word	0x200008bc
 8003d08:	2000000c 	.word	0x2000000c
 8003d0c:	42c80000 	.word	0x42c80000
 8003d10:	42c80000 	.word	0x42c80000
 8003d14:	200007bc 	.word	0x200007bc
 8003d18:	20000490 	.word	0x20000490

08003d1c <StartRFIDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */
	st25r95_init((st25r95_handle *)&reader_handler);
 8003d24:	482f      	ldr	r0, [pc, #188]	; (8003de4 <StartRFIDTask+0xc8>)
 8003d26:	f000 faeb 	bl	8004300 <st25r95_init>
	st25r95_calibrate((st25r95_handle *)&reader_handler);
 8003d2a:	482e      	ldr	r0, [pc, #184]	; (8003de4 <StartRFIDTask+0xc8>)
 8003d2c:	f000 ff7c 	bl	8004c28 <st25r95_calibrate>

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 8003d30:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d34:	613b      	str	r3, [r7, #16]

	xLastWakeTime = xTaskGetTickCount();
 8003d36:	f008 fdab 	bl	800c890 <xTaskGetTickCount>
 8003d3a:	60f8      	str	r0, [r7, #12]

	uint8_t redRawScore = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	72fb      	strb	r3, [r7, #11]
	uint8_t blueRawScore = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	72bb      	strb	r3, [r7, #10]

	uint8_t tx_buf[2];

	st25r95_idle((st25r95_handle *)&reader_handler);
 8003d44:	4827      	ldr	r0, [pc, #156]	; (8003de4 <StartRFIDTask+0xc8>)
 8003d46:	f000 ff19 	bl	8004b7c <st25r95_idle>

	osTimerStart(RFIDTimeoutHandle, pdMS_TO_TICKS(TIMER_PERIOD_MS));
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <StartRFIDTask+0xcc>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	23fa      	movs	r3, #250	; 0xfa
 8003d50:	4619      	mov	r1, r3
 8003d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4924      	ldr	r1, [pc, #144]	; (8003dec <StartRFIDTask+0xd0>)
 8003d5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f007 f9e5 	bl	800b134 <osTimerStart>

	/* Infinite loop */
	for (;;)
//	osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
			{
		RFID_readArray(&reader_handler);
 8003d6a:	481e      	ldr	r0, [pc, #120]	; (8003de4 <StartRFIDTask+0xc8>)
 8003d6c:	f000 f8c2 	bl	8003ef4 <RFID_readArray>

		if (ANTICOL_15693) {
			// for each bag
			for (int i = 0; i < NUM_BAGS; i++) {
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e01e      	b.n	8003db4 <StartRFIDTask+0x98>
				if (BagInfo[i].ant_channel > 0) {
 8003d76:	491e      	ldr	r1, [pc, #120]	; (8003df0 <StartRFIDTask+0xd4>)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	3324      	adds	r3, #36	; 0x24
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dd10      	ble.n	8003dae <StartRFIDTask+0x92>
					BagStatus[i] = ANT_POINTS_MAP[BagInfo[i].ant_channel - 1];
 8003d8c:	4918      	ldr	r1, [pc, #96]	; (8003df0 <StartRFIDTask+0xd4>)
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	3324      	adds	r3, #36	; 0x24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <StartRFIDTask+0xd8>)
 8003da2:	5cd1      	ldrb	r1, [r2, r3]
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <StartRFIDTask+0xdc>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	460a      	mov	r2, r1
 8003dac:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < NUM_BAGS; i++) {
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3301      	adds	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b07      	cmp	r3, #7
 8003db8:	dddd      	ble.n	8003d76 <StartRFIDTask+0x5a>
				}
			}
		}

		calculateRawScore(&redRawScore, false);
 8003dba:	f107 030b 	add.w	r3, r7, #11
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f869 	bl	8003e98 <calculateRawScore>
		calculateRawScore(&blueRawScore, true); // true to move BagStatus pointer to the Blue section
 8003dc6:	f107 030a 	add.w	r3, r7, #10
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f863 	bl	8003e98 <calculateRawScore>

		broadcastPacket.redDeltaScore = redRawScore;
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <StartRFIDTask+0xe0>)
 8003dd8:	605a      	str	r2, [r3, #4]
		broadcastPacket.blueDeltaScore = blueRawScore;
 8003dda:	7abb      	ldrb	r3, [r7, #10]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <StartRFIDTask+0xe0>)
 8003de0:	609a      	str	r2, [r3, #8]
		RFID_readArray(&reader_handler);
 8003de2:	e7c2      	b.n	8003d6a <StartRFIDTask+0x4e>
 8003de4:	200008d4 	.word	0x200008d4
 8003de8:	20000698 	.word	0x20000698
 8003dec:	10624dd3 	.word	0x10624dd3
 8003df0:	20000020 	.word	0x20000020
 8003df4:	08011fb8 	.word	0x08011fb8
 8003df8:	20000908 	.word	0x20000908
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <StartBatteryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8003e08:	f247 5330 	movw	r3, #30000	; 0x7530
 8003e0c:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003e0e:	f008 fd3f 	bl	800c890 <xTaskGetTickCount>
 8003e12:	4603      	mov	r3, r0
 8003e14:	613b      	str	r3, [r7, #16]

	uint32_t rawVBat = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
	float VBat = 0.0;
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
	uint32_t VBat_conv = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003e24:	217f      	movs	r1, #127	; 0x7f
 8003e26:	480e      	ldr	r0, [pc, #56]	; (8003e60 <StartBatteryTask+0x60>)
 8003e28:	f002 fd4c 	bl	80068c4 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &rawVBat, 1);
 8003e2c:	f107 030c 	add.w	r3, r7, #12
 8003e30:	2201      	movs	r2, #1
 8003e32:	4619      	mov	r1, r3
 8003e34:	480a      	ldr	r0, [pc, #40]	; (8003e60 <StartBatteryTask+0x60>)
 8003e36:	f001 ff01 	bl	8005c3c <HAL_ADC_Start_DMA>
	uint8_t tx_buf[4];

	/* Infinite loop */
	for (;;) {

		broadcastPacket.batteryVoltage = (float)rawVBat * VBAT_CONVERSION_FACTOR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e44:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003e64 <StartBatteryTask+0x64>
 8003e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <StartBatteryTask+0x68>)
 8003e4e:	edc3 7a00 	vstr	s15, [r3]

		vTaskDelayUntil(&xLastWakeTime, period);
 8003e52:	f107 0310 	add.w	r3, r7, #16
 8003e56:	69f9      	ldr	r1, [r7, #28]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f008 fb4b 	bl	800c4f4 <vTaskDelayUntil>
		broadcastPacket.batteryVoltage = (float)rawVBat * VBAT_CONVERSION_FACTOR;
 8003e5e:	e7ec      	b.n	8003e3a <StartBatteryTask+0x3a>
 8003e60:	2000037c 	.word	0x2000037c
 8003e64:	3b1e6666 	.word	0x3b1e6666
 8003e68:	2000000c 	.word	0x2000000c

08003e6c <RFIDTimeoutCallback>:
  /* USER CODE END StartBatteryTask */
}

/* RFIDTimeoutCallback function */
void RFIDTimeoutCallback(void *argument)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFIDTimeoutCallback */

	reader_handler.timeout_flag = 1;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <RFIDTimeoutCallback+0x1c>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	765a      	strb	r2, [r3, #25]
  /* USER CODE END RFIDTimeoutCallback */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	200008d4 	.word	0x200008d4

08003e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e90:	b672      	cpsid	i
}
 8003e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e94:	e7fe      	b.n	8003e94 <Error_Handler+0x8>
	...

08003e98 <calculateRawScore>:

extern uint8_t select_rfid_channel(uint8_t channel_index);

static const uint8_t UID_ZERO_CMP[UID_SIZE_15693]; // auto-initialized to zero

void calculateRawScore(uint8_t* teamRawScore, bool isBlue) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <calculateRawScore+0x58>)
 8003ea6:	60fb      	str	r3, [r7, #12]

	// Shift pointer to blue section of array
	if (isBlue) bag_p += 4;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <calculateRawScore+0x1c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]

	// Score count routine
	for (int i = 0; i < 4; ++i) {
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	e00c      	b.n	8003eda <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	440b      	add	r3, r1
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	ddef      	ble.n	8003ec0 <calculateRawScore+0x28>
	}

}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000908 	.word	0x20000908

08003ef4 <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(st25r95_handle *handler) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	static int errorCounter = 0;

	BeanBag_clearDetected();
 8003efc:	f000 f864 	bl	8003fc8 <BeanBag_clearDetected>
	BeanBag_clearScore();
 8003f00:	f000 f88c 	bl	800401c <BeanBag_clearScore>

	RFIDEvent_t xRFIDEvent;

	for(uint8_t ant_number = 1; ant_number <= 12; ant_number++){
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e045      	b.n	8003f96 <RFID_readArray+0xa2>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <RFID_readArray+0xb4>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	f083 0301 	eor.w	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d138      	bne.n	8003f8e <RFID_readArray+0x9a>

		select_rfid_channel(ant_number);
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f9e4 	bl	80032ec <select_rfid_channel>

		vTaskDelay(10);
 8003f24:	200a      	movs	r0, #10
 8003f26:	f008 fb63 	bl	800c5f0 <vTaskDelay>

		for(;;) {

			//if (handler->irq_flag) {

				memset(handler->uid, 0, sizeof(handler->uid)); // clear uid
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3307      	adds	r3, #7
 8003f2e:	220a      	movs	r2, #10
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f00a fa7c 	bl	800e430 <memset>

				st25r95_service(handler);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f949 	bl	80041d0 <st25r95_service>
					BagStatus[bag_number] = ANT_POINTS_MAP[ant_number - 1];

				}
			//}

			if (handler->timeout_flag) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7e5b      	ldrb	r3, [r3, #25]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <RFID_readArray+0x36>
				handler->timeout_flag = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	765a      	strb	r2, [r3, #25]

				HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2110      	movs	r1, #16
 8003f52:	4816      	ldr	r0, [pc, #88]	; (8003fac <RFID_readArray+0xb8>)
 8003f54:	f003 fa30 	bl	80073b8 <HAL_GPIO_WritePin>

				HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_5);  // toggle LED1
 8003f58:	2120      	movs	r1, #32
 8003f5a:	4814      	ldr	r0, [pc, #80]	; (8003fac <RFID_readArray+0xb8>)
 8003f5c:	f003 fa44 	bl	80073e8 <HAL_GPIO_TogglePin>

				osTimerStop(RFIDTimeoutHandle);
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <RFID_readArray+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f007 f913 	bl	800b190 <osTimerStop>
				osTimerStart(RFIDTimeoutHandle, pdMS_TO_TICKS(TIMER_PERIOD_MS));
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <RFID_readArray+0xbc>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <RFID_readArray+0xc0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <RFID_readArray+0xc4>)
 8003f7e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f007 f8d4 	bl	800b134 <osTimerStart>

				break;
 8003f8c:	e000      	b.n	8003f90 <RFID_readArray+0x9c>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003f8e:	bf00      	nop
	for(uint8_t ant_number = 1; ant_number <= 12; ant_number++){
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	3301      	adds	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d9b6      	bls.n	8003f0a <RFID_readArray+0x16>
			}
		}
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08011fac 	.word	0x08011fac
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	20000698 	.word	0x20000698
 8003fb4:	08011fa8 	.word	0x08011fa8
 8003fb8:	10624dd3 	.word	0x10624dd3

08003fbc <BeanBag_setup>:

void BeanBag_setup(void) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0

	BeanBag_clearDetected();
 8003fc0:	f000 f802 	bl	8003fc8 <BeanBag_clearDetected>

}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <BeanBag_clearDetected>:

void BeanBag_clearDetected(void) {
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_BAGS; ++i) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e017      	b.n	8004004 <BeanBag_clearDetected+0x3c>
		BagInfo[i].detected = false;
 8003fd4:	4910      	ldr	r1, [pc, #64]	; (8004018 <BeanBag_clearDetected+0x50>)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3320      	adds	r3, #32
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
		BagInfo[i].ant_channel = -1;
 8003fe8:	490b      	ldr	r1, [pc, #44]	; (8004018 <BeanBag_clearDetected+0x50>)
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_BAGS; ++i) {
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3301      	adds	r3, #1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b07      	cmp	r3, #7
 8004008:	dde4      	ble.n	8003fd4 <BeanBag_clearDetected+0xc>
	}
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	20000020 	.word	0x20000020

0800401c <BeanBag_clearScore>:

void BeanBag_clearScore(void) {
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_BAGS; ++i) {
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	e007      	b.n	8004038 <BeanBag_clearScore+0x1c>
		BagStatus[i] = 0;
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <BeanBag_clearScore+0x30>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BAGS; ++i) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3301      	adds	r3, #1
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b07      	cmp	r3, #7
 800403c:	ddf4      	ble.n	8004028 <BeanBag_clearScore+0xc>
	}
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20000908 	.word	0x20000908

08004050 <BeanBag_findIDinArray>:

int BeanBag_findIDinArray(st25r95_handle *handler) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	uint64_t uid = 0;
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memcpy(&uid, handler->uid, UID_SIZE_15693);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1dd9      	adds	r1, r3, #7
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	2208      	movs	r2, #8
 800406e:	4618      	mov	r0, r3
 8004070:	f00a f9d0 	bl	800e414 <memcpy>

	int bag_number = -1;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < NUM_BAGS; ++i) {
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	e044      	b.n	800410a <BeanBag_findIDinArray+0xba>
		if (uid == BagInfo[i].uid[0] || uid == BagInfo[i].uid[1] || uid == BagInfo[i].uid[2] || uid == BagInfo[i].uid[3]) {
 8004080:	493b      	ldr	r1, [pc, #236]	; (8004170 <BeanBag_findIDinArray+0x120>)
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004096:	4299      	cmp	r1, r3
 8004098:	bf08      	it	eq
 800409a:	4290      	cmpeq	r0, r2
 800409c:	d02f      	beq.n	80040fe <BeanBag_findIDinArray+0xae>
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <BeanBag_findIDinArray+0x120>)
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	3308      	adds	r3, #8
 80040ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b6:	4299      	cmp	r1, r3
 80040b8:	bf08      	it	eq
 80040ba:	4290      	cmpeq	r0, r2
 80040bc:	d01f      	beq.n	80040fe <BeanBag_findIDinArray+0xae>
 80040be:	492c      	ldr	r1, [pc, #176]	; (8004170 <BeanBag_findIDinArray+0x120>)
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3310      	adds	r3, #16
 80040ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d6:	4299      	cmp	r1, r3
 80040d8:	bf08      	it	eq
 80040da:	4290      	cmpeq	r0, r2
 80040dc:	d00f      	beq.n	80040fe <BeanBag_findIDinArray+0xae>
 80040de:	4924      	ldr	r1, [pc, #144]	; (8004170 <BeanBag_findIDinArray+0x120>)
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	440b      	add	r3, r1
 80040ec:	3318      	adds	r3, #24
 80040ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f6:	4299      	cmp	r1, r3
 80040f8:	bf08      	it	eq
 80040fa:	4290      	cmpeq	r0, r2
 80040fc:	d102      	bne.n	8004104 <BeanBag_findIDinArray+0xb4>
			bag_number = i;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	617b      	str	r3, [r7, #20]
			break;
 8004102:	e005      	b.n	8004110 <BeanBag_findIDinArray+0xc0>
	for (int i = 0; i < NUM_BAGS; ++i) {
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	3301      	adds	r3, #1
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b07      	cmp	r3, #7
 800410e:	ddb7      	ble.n	8004080 <BeanBag_findIDinArray+0x30>
		}
	}

	if (bag_number == -1) { // UID not mapped to a bag
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d102      	bne.n	800411e <BeanBag_findIDinArray+0xce>
		return -1;
 8004118:	f04f 33ff 	mov.w	r3, #4294967295
 800411c:	e023      	b.n	8004166 <BeanBag_findIDinArray+0x116>

	} else if (BagInfo[bag_number].detected) { // return bag already detected status code
 800411e:	4914      	ldr	r1, [pc, #80]	; (8004170 <BeanBag_findIDinArray+0x120>)
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	440b      	add	r3, r1
 800412c:	3320      	adds	r3, #32
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <BeanBag_findIDinArray+0xea>
		return -2;
 8004134:	f06f 0301 	mvn.w	r3, #1
 8004138:	e015      	b.n	8004166 <BeanBag_findIDinArray+0x116>

	} else { // valid UID, not already detected
		BagInfo[bag_number].detected = true;
 800413a:	490d      	ldr	r1, [pc, #52]	; (8004170 <BeanBag_findIDinArray+0x120>)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	3320      	adds	r3, #32
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
		BagInfo[bag_number].ant_channel = handler->ant_channel;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6959      	ldr	r1, [r3, #20]
 8004152:	4807      	ldr	r0, [pc, #28]	; (8004170 <BeanBag_findIDinArray+0x120>)
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4403      	add	r3, r0
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	6019      	str	r1, [r3, #0]
		return bag_number;
 8004164:	697b      	ldr	r3, [r7, #20]
	}

}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000020 	.word	0x20000020

08004174 <st25r95_spi_tx>:

//volatile static uint8_t rx_buffer[256];
//volatile static size_t rx_len;


void st25r95_spi_tx(st25r95_handle *handler) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	4a05      	ldr	r2, [pc, #20]	; (8004198 <st25r95_spi_tx+0x24>)
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	4611      	mov	r1, r2
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <st25r95_spi_tx+0x28>)
 8004188:	4798      	blx	r3
  tx_len = 0;
 800418a:	4b03      	ldr	r3, [pc, #12]	; (8004198 <st25r95_spi_tx+0x24>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000a10 	.word	0x20000a10
 800419c:	20000910 	.word	0x20000910

080041a0 <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <st25r95_spi_byte+0x28>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80041b2:	4a06      	ldr	r2, [pc, #24]	; (80041cc <st25r95_spi_byte+0x2c>)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ffdb 	bl	8004174 <st25r95_spi_tx>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000a10 	.word	0x20000a10
 80041cc:	20000910 	.word	0x20000910

080041d0 <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  //if (handler->irq_flag == 1) {
    handler->irq_flag = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	761a      	strb	r2, [r3, #24]
//    if (handler->state == ST25_STATE_IDLE) {
      st25r95_init(handler);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f88e 	bl	8004300 <st25r95_init>
      vTaskDelay(1);
 80041e4:	2001      	movs	r0, #1
 80041e6:	f008 fa03 	bl	800c5f0 <vTaskDelay>
      if (handler->protocol == ST25_PROTOCOL_14443A
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d11c      	bne.n	800422c <st25r95_service+0x5c>
    		  && st25r95_14443A_detect(handler)) {
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9e4 	bl	80045c0 <st25r95_14443A_detect>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <st25r95_service+0x5c>
        handler->callback(handler->uid);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	3207      	adds	r2, #7
 8004206:	4610      	mov	r0, r2
 8004208:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 800420a:	2201      	movs	r2, #1
 800420c:	2110      	movs	r1, #16
 800420e:	481b      	ldr	r0, [pc, #108]	; (800427c <st25r95_service+0xac>)
 8004210:	f003 f8d2 	bl	80073b8 <HAL_GPIO_WritePin>
        for(volatile int i=0;i<10000; ++i);
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <st25r95_service+0x50>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3301      	adds	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f242 720f 	movw	r2, #9999	; 0x270f
 8004226:	4293      	cmp	r3, r2
 8004228:	ddf7      	ble.n	800421a <st25r95_service+0x4a>
 800422a:	e022      	b.n	8004272 <st25r95_service+0xa2>
      }
      else if (handler->protocol == ST25_PROTOCOL_15693
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d108      	bne.n	8004246 <st25r95_service+0x76>
          		  && ANTICOL_15693)
	  { // searching for multiple tags
		  st25r95_15693_anticolSetup(handler);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fc27 	bl	8004a88 <st25r95_15693_anticolSetup>
//		  st25r95_15693_anticolSim(handler);
		  HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2110      	movs	r1, #16
 800423e:	480f      	ldr	r0, [pc, #60]	; (800427c <st25r95_service+0xac>)
 8004240:	f003 f8ba 	bl	80073b8 <HAL_GPIO_WritePin>
      }
      //st25r95_idle(handler);
 //   }

 // }
}
 8004244:	e015      	b.n	8004272 <st25r95_service+0xa2>
      else if (handler->protocol == ST25_PROTOCOL_15693
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d111      	bne.n	8004272 <st25r95_service+0xa2>
    		  && st25r95_15693_inventory1(handler)) {
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fb32 	bl	80048b8 <st25r95_15693_inventory1>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <st25r95_service+0xa2>
        handler->callback(handler->uid);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	3207      	adds	r2, #7
 8004262:	4610      	mov	r0, r2
 8004264:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 8004266:	2201      	movs	r2, #1
 8004268:	2110      	movs	r1, #16
 800426a:	4804      	ldr	r0, [pc, #16]	; (800427c <st25r95_service+0xac>)
 800426c:	f003 f8a4 	bl	80073b8 <HAL_GPIO_WritePin>
}
 8004270:	e7ff      	b.n	8004272 <st25r95_service+0xa2>
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	48000400 	.word	0x48000400

08004280 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8004288:	bf00      	nop
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7e1b      	ldrb	r3, [r3, #24]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0fa      	beq.n	800428a <st25r95_response+0xa>
  handler->irq_flag = 0;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	761a      	strb	r2, [r3, #24]
  static uint8_t rx_data[256];
  handler->nss(1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	2001      	movs	r0, #1
 80042a0:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 80042a2:	2102      	movs	r1, #2
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff7b 	bl	80041a0 <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	2101      	movs	r1, #1
 80042b0:	4810      	ldr	r0, [pc, #64]	; (80042f4 <st25r95_response+0x74>)
 80042b2:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO)
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <st25r95_response+0x74>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b55      	cmp	r3, #85	; 0x55
 80042ba:	d105      	bne.n	80042c8 <st25r95_response+0x48>
  {
    handler->nss(0);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	2000      	movs	r0, #0
 80042c2:	4798      	blx	r3
    return rx_data;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <st25r95_response+0x74>)
 80042c6:	e011      	b.n	80042ec <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <st25r95_response+0x78>)
 80042ce:	2101      	movs	r1, #1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <st25r95_response+0x7c>)
 80042da:	4a06      	ldr	r2, [pc, #24]	; (80042f4 <st25r95_response+0x74>)
 80042dc:	7852      	ldrb	r2, [r2, #1]
 80042de:	4611      	mov	r1, r2
 80042e0:	4798      	blx	r3
  handler->nss(0);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	2000      	movs	r0, #0
 80042e8:	4798      	blx	r3
  return rx_data;
 80042ea:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <st25r95_response+0x74>)
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000a34 	.word	0x20000a34
 80042f8:	20000a35 	.word	0x20000a35
 80042fc:	20000a36 	.word	0x20000a36

08004300 <st25r95_init>:
  handler->nss(0);
  return rx_data;
}

void st25r95_init(st25r95_handle *handler)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  handler->state = ST25_STATE_INIT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	701a      	strb	r2, [r3, #0]
  st25r95_reset(handler);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f829 	bl	8004366 <st25r95_reset>
  handler->irq_pulse();
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d012      	beq.n	800434e <st25r95_init+0x4e>
 8004328:	2b02      	cmp	r3, #2
 800432a:	d114      	bne.n	8004356 <st25r95_init+0x56>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f85f 	bl	80043f0 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	795b      	ldrb	r3, [r3, #5]
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8cf 	bl	80044dc <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	799b      	ldrb	r3, [r3, #6]
 8004342:	461a      	mov	r2, r3
 8004344:	2101      	movs	r1, #1
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f900 	bl	800454c <st25r95_write_ARC>
      break;
 800434c:	e007      	b.n	800435e <st25r95_init+0x5e>
    case ST25_PROTOCOL_15693:
      st25r95_15693(handler);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f88a 	bl	8004468 <st25r95_15693>
	  break;
 8004354:	e003      	b.n	800435e <st25r95_init+0x5e>
    default:
      st25r95_off(handler);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f81a 	bl	8004390 <st25r95_off>
      break;
 800435c:	bf00      	nop
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <st25r95_reset>:
  }

}

void st25r95_reset(st25r95_handle *handler)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2001      	movs	r0, #1
 8004374:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8004376:	2101      	movs	r1, #1
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff11 	bl	80041a0 <st25r95_spi_byte>
  handler->nss(0);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	2000      	movs	r0, #0
 8004384:	4798      	blx	r3
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <st25r95_off+0x58>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <st25r95_off+0x58>)
 80043a0:	2202      	movs	r2, #2
 80043a2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <st25r95_off+0x58>)
 80043a6:	2202      	movs	r2, #2
 80043a8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <st25r95_off+0x58>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <st25r95_off+0x58>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <st25r95_off+0x5c>)
 80043b8:	2205      	movs	r2, #5
 80043ba:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	2001      	movs	r0, #1
 80043c2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fed5 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	2000      	movs	r0, #0
 80043d0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff54 	bl	8004280 <st25r95_response>
 80043d8:	60f8      	str	r0, [r7, #12]
  return res[0];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	781b      	ldrb	r3, [r3, #0]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000910 	.word	0x20000910
 80043ec:	20000a10 	.word	0x20000a10

080043f0 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <st25r95_14443A+0x70>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <st25r95_14443A+0x70>)
 8004400:	2202      	movs	r2, #2
 8004402:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <st25r95_14443A+0x70>)
 8004406:	2202      	movs	r2, #2
 8004408:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <st25r95_14443A+0x70>)
 800440c:	2202      	movs	r2, #2
 800440e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	78db      	ldrb	r3, [r3, #3]
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	b25a      	sxtb	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	791b      	ldrb	r3, [r3, #4]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	b25b      	sxtb	r3, r3
 8004420:	4313      	orrs	r3, r2
 8004422:	b25b      	sxtb	r3, r3
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <st25r95_14443A+0x70>)
 8004428:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <st25r95_14443A+0x74>)
 800442c:	2205      	movs	r2, #5
 800442e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	2001      	movs	r0, #1
 8004436:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fe9b 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2000      	movs	r0, #0
 8004444:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff17 	bl	8004280 <st25r95_response>
 8004452:	60f8      	str	r0, [r7, #12]
  return res[0];
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000910 	.word	0x20000910
 8004464:	20000a10 	.word	0x20000a10

08004468 <st25r95_15693>:

st25r95_status_t st25r95_15693(st25r95_handle *handler) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004470:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <st25r95_15693+0x6c>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <st25r95_15693+0x6c>)
 8004478:	2202      	movs	r2, #2
 800447a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <st25r95_15693+0x6c>)
 800447e:	2202      	movs	r2, #2
 8004480:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_15693;
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <st25r95_15693+0x6c>)
 8004484:	2201      	movs	r2, #1
 8004486:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 4 | 1 << 3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	78db      	ldrb	r3, [r3, #3]
 800448c:	011b      	lsls	r3, r3, #4
  	  	  	  	  | 0 << 2 | 0 << 1 | 1 << 0;
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f043 0309 	orr.w	r3, r3, #9
 8004494:	b25b      	sxtb	r3, r3
 8004496:	b2da      	uxtb	r2, r3
  tx_buffer[4] = handler->tx_speed << 4 | 1 << 3
 8004498:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <st25r95_15693+0x6c>)
 800449a:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <st25r95_15693+0x70>)
 800449e:	2205      	movs	r2, #5
 80044a0:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	2001      	movs	r0, #1
 80044a8:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fe62 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2000      	movs	r0, #0
 80044b6:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_15693;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fede 	bl	8004280 <st25r95_response>
 80044c4:	60f8      	str	r0, [r7, #12]
  return res[0];
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	781b      	ldrb	r3, [r3, #0]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000910 	.word	0x20000910
 80044d8:	20000a10 	.word	0x20000a10

080044dc <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <st25r95_write_timerw+0x68>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <st25r95_write_timerw+0x68>)
 80044f0:	2209      	movs	r2, #9
 80044f2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <st25r95_write_timerw+0x68>)
 80044f6:	2204      	movs	r2, #4
 80044f8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <st25r95_write_timerw+0x68>)
 80044fc:	223a      	movs	r2, #58	; 0x3a
 80044fe:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <st25r95_write_timerw+0x68>)
 8004502:	2200      	movs	r2, #0
 8004504:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8004506:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <st25r95_write_timerw+0x68>)
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <st25r95_write_timerw+0x68>)
 800450e:	2204      	movs	r2, #4
 8004510:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <st25r95_write_timerw+0x6c>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	2001      	movs	r0, #1
 800451e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fe27 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	2000      	movs	r0, #0
 800452c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fea6 	bl	8004280 <st25r95_response>
 8004534:	60f8      	str	r0, [r7, #12]
  return res[0];
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	781b      	ldrb	r3, [r3, #0]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000910 	.word	0x20000910
 8004548:	20000a10 	.word	0x20000a10

0800454c <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
 8004558:	4613      	mov	r3, r2
 800455a:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 800455c:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <st25r95_write_ARC+0x6c>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <st25r95_write_ARC+0x6c>)
 8004564:	2209      	movs	r2, #9
 8004566:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <st25r95_write_ARC+0x6c>)
 800456a:	2204      	movs	r2, #4
 800456c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <st25r95_write_ARC+0x6c>)
 8004570:	2268      	movs	r2, #104	; 0x68
 8004572:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 8004574:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <st25r95_write_ARC+0x6c>)
 8004576:	2201      	movs	r2, #1
 8004578:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <st25r95_write_ARC+0x6c>)
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <st25r95_write_ARC+0x6c>)
 8004582:	78bb      	ldrb	r3, [r7, #2]
 8004584:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <st25r95_write_ARC+0x70>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	2001      	movs	r0, #1
 8004592:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fded 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2000      	movs	r0, #0
 80045a0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fe6c 	bl	8004280 <st25r95_response>
 80045a8:	60f8      	str	r0, [r7, #12]
  return res[0];
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000910 	.word	0x20000910
 80045bc:	20000a10 	.word	0x20000a10

080045c0 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 80045c0:	b5b0      	push	{r4, r5, r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af04      	add	r7, sp, #16
 80045c6:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 80045c8:	23ff      	movs	r3, #255	; 0xff
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	f107 0318 	add.w	r3, r7, #24
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 80045d6:	f107 0314 	add.w	r3, r7, #20
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f883 	bl	80046e8 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 80045e2:	7d3b      	ldrb	r3, [r7, #20]
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d101      	bne.n	80045ec <st25r95_14443A_detect+0x2c>
 80045e8:	2300      	movs	r3, #0
 80045ea:	e078      	b.n	80046de <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 80045ec:	7d3b      	ldrb	r3, [r7, #20]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <st25r95_14443A_detect+0x3a>
    return 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e071      	b.n	80046de <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 80045fa:	7d3b      	ldrb	r3, [r7, #20]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e053      	b.n	80046ae <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 8004606:	23ff      	movs	r3, #255	; 0xff
 8004608:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 800460a:	f107 0214 	add.w	r2, r7, #20
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8a4 	bl	8004760 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8004618:	7d3b      	ldrb	r3, [r7, #20]
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	d101      	bne.n	8004622 <st25r95_14443A_detect+0x62>
 800461e:	2300      	movs	r3, #0
 8004620:	e05d      	b.n	80046de <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 8004622:	7d3a      	ldrb	r2, [r7, #20]
 8004624:	7d7b      	ldrb	r3, [r7, #21]
 8004626:	4053      	eors	r3, r2
 8004628:	b2da      	uxtb	r2, r3
 800462a:	7dbb      	ldrb	r3, [r7, #22]
 800462c:	4053      	eors	r3, r2
 800462e:	b2da      	uxtb	r2, r3
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	4053      	eors	r3, r2
 8004634:	b2da      	uxtb	r2, r3
 8004636:	7e3b      	ldrb	r3, [r7, #24]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <st25r95_14443A_detect+0x80>
 800463c:	2300      	movs	r3, #0
 800463e:	e04e      	b.n	80046de <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8004640:	7ffb      	ldrb	r3, [r7, #31]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	7d3a      	ldrb	r2, [r7, #20]
 8004646:	3320      	adds	r3, #32
 8004648:	443b      	add	r3, r7
 800464a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 800464e:	7ffb      	ldrb	r3, [r7, #31]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	3301      	adds	r3, #1
 8004654:	7d7a      	ldrb	r2, [r7, #21]
 8004656:	3320      	adds	r3, #32
 8004658:	443b      	add	r3, r7
 800465a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3302      	adds	r3, #2
 8004664:	7dba      	ldrb	r2, [r7, #22]
 8004666:	3320      	adds	r3, #32
 8004668:	443b      	add	r3, r7
 800466a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	3303      	adds	r3, #3
 8004674:	7dfa      	ldrb	r2, [r7, #23]
 8004676:	3320      	adds	r3, #32
 8004678:	443b      	add	r3, r7
 800467a:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 800467e:	7d3d      	ldrb	r5, [r7, #20]
 8004680:	7d7b      	ldrb	r3, [r7, #21]
 8004682:	7dba      	ldrb	r2, [r7, #22]
 8004684:	7df9      	ldrb	r1, [r7, #23]
 8004686:	f107 0414 	add.w	r4, r7, #20
 800468a:	7ff8      	ldrb	r0, [r7, #31]
 800468c:	9102      	str	r1, [sp, #8]
 800468e:	9201      	str	r2, [sp, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	462b      	mov	r3, r5
 8004694:	4622      	mov	r2, r4
 8004696:	4601      	mov	r1, r0
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8a7 	bl	80047ec <st25r95_14443A_select>
    if (data[0] & 0x4)
 800469e:	7d3b      	ldrb	r3, [r7, #20]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 80046a8:	7ffb      	ldrb	r3, [r7, #31]
 80046aa:	3301      	adds	r3, #1
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	7fba      	ldrb	r2, [r7, #30]
 80046b0:	7ffb      	ldrb	r3, [r7, #31]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d2a7      	bcs.n	8004606 <st25r95_14443A_detect+0x46>
 80046b6:	e000      	b.n	80046ba <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 80046b8:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3307      	adds	r3, #7
 80046be:	220a      	movs	r2, #10
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f009 feb4 	bl	800e430 <memset>
  memcpy(handler->uid, UID, 10);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3307      	adds	r3, #7
 80046cc:	461a      	mov	r2, r3
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	cb03      	ldmia	r3!, {r0, r1}
 80046d4:	6010      	str	r0, [r2, #0]
 80046d6:	6051      	str	r1, [r2, #4]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	8113      	strh	r3, [r2, #8]
  return 1;
 80046dc:	2301      	movs	r3, #1
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080046e8 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <st25r95_14443A_REQA+0x70>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 80046f8:	4b17      	ldr	r3, [pc, #92]	; (8004758 <st25r95_14443A_REQA+0x70>)
 80046fa:	2204      	movs	r2, #4
 80046fc:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <st25r95_14443A_REQA+0x70>)
 8004700:	2202      	movs	r2, #2
 8004702:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <st25r95_14443A_REQA+0x70>)
 8004706:	2226      	movs	r2, #38	; 0x26
 8004708:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <st25r95_14443A_REQA+0x70>)
 800470c:	2207      	movs	r2, #7
 800470e:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <st25r95_14443A_REQA+0x74>)
 8004712:	2205      	movs	r2, #5
 8004714:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	2001      	movs	r0, #1
 800471c:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fd28 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2000      	movs	r0, #0
 800472a:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fda7 	bl	8004280 <st25r95_response>
 8004732:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d109      	bne.n	8004750 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1c99      	adds	r1, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6838      	ldr	r0, [r7, #0]
 800474a:	f009 fe63 	bl	800e414 <memcpy>
 800474e:	e000      	b.n	8004752 <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8004750:	bf00      	nop

}
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000910 	.word	0x20000910
 800475c:	20000a10 	.word	0x20000a10

08004760 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	460b      	mov	r3, r1
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8004774:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004776:	2204      	movs	r2, #4
 8004778:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 800477c:	2203      	movs	r2, #3
 800477e:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <st25r95_14443A_ANTICOLLISION+0x84>)
 8004784:	5cd2      	ldrb	r2, [r2, r3]
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004788:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 800478c:	2220      	movs	r2, #32
 800478e:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004792:	2208      	movs	r2, #8
 8004794:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <st25r95_14443A_ANTICOLLISION+0x88>)
 8004798:	2206      	movs	r2, #6
 800479a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	2001      	movs	r0, #1
 80047a2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fce5 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	2000      	movs	r0, #0
 80047b0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff fd64 	bl	8004280 <st25r95_response>
 80047b8:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d109      	bne.n	80047d6 <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1c99      	adds	r1, r3, #2
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	3301      	adds	r3, #1
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f009 fe20 	bl	800e414 <memcpy>
 80047d4:	e000      	b.n	80047d8 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 80047d6:	bf00      	nop
}
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000910 	.word	0x20000910
 80047e4:	08011fc4 	.word	0x08011fc4
 80047e8:	20000a10 	.word	0x20000a10

080047ec <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	460b      	mov	r3, r1
 80047fa:	72fb      	strb	r3, [r7, #11]
 80047fc:	4613      	mov	r3, r2
 80047fe:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <st25r95_14443A_select+0xc0>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <st25r95_14443A_select+0xc0>)
 8004808:	2204      	movs	r2, #4
 800480a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <st25r95_14443A_select+0xc0>)
 800480e:	2208      	movs	r2, #8
 8004810:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <st25r95_14443A_select+0xc4>)
 8004816:	5cd2      	ldrb	r2, [r2, r3]
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <st25r95_14443A_select+0xc0>)
 800481a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <st25r95_14443A_select+0xc0>)
 800481e:	2270      	movs	r2, #112	; 0x70
 8004820:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 8004822:	4a22      	ldr	r2, [pc, #136]	; (80048ac <st25r95_14443A_select+0xc0>)
 8004824:	7abb      	ldrb	r3, [r7, #10]
 8004826:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <st25r95_14443A_select+0xc0>)
 800482a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800482e:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8004830:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <st25r95_14443A_select+0xc0>)
 8004832:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004836:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <st25r95_14443A_select+0xc0>)
 800483a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800483e:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8004840:	7aba      	ldrb	r2, [r7, #10]
 8004842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004846:	4053      	eors	r3, r2
 8004848:	b2da      	uxtb	r2, r3
 800484a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800484e:	4053      	eors	r3, r2
 8004850:	b2da      	uxtb	r2, r3
 8004852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004856:	4053      	eors	r3, r2
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <st25r95_14443A_select+0xc0>)
 800485c:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 800485e:	4b13      	ldr	r3, [pc, #76]	; (80048ac <st25r95_14443A_select+0xc0>)
 8004860:	2228      	movs	r2, #40	; 0x28
 8004862:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <st25r95_14443A_select+0xc8>)
 8004866:	220b      	movs	r2, #11
 8004868:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	2001      	movs	r0, #1
 8004870:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fc7e 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	2000      	movs	r0, #0
 800487e:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff fcfd 	bl	8004280 <st25r95_response>
 8004886:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d109      	bne.n	80048a4 <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1c99      	adds	r1, r3, #2
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3301      	adds	r3, #1
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f009 fdb9 	bl	800e414 <memcpy>
 80048a2:	e000      	b.n	80048a6 <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 80048a4:	bf00      	nop
}
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000910 	.word	0x20000910
 80048b0:	08011fc4 	.word	0x08011fc4
 80048b4:	20000a10 	.word	0x20000a10

080048b8 <st25r95_15693_inventory1>:

uint8_t st25r95_15693_inventory1(st25r95_handle *handler)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  handler->state = ST25_STATE_INIT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
  tx_buffer[0] = ST25_SEND;
 80048c6:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048ce:	2204      	movs	r2, #4
 80048d0:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x3; // length of 15693 command frame
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048d4:	2203      	movs	r2, #3
 80048d6:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x26; // flags
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048da:	2226      	movs	r2, #38	; 0x26
 80048dc:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x01; // command code
 80048de:	4b19      	ldr	r3, [pc, #100]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x00; // non-addressed & no mask
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <st25r95_15693_inventory1+0x8c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	715a      	strb	r2, [r3, #5]
  // CRC automatically appended by 15693 protocol select
  tx_len = 6;
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <st25r95_15693_inventory1+0x90>)
 80048ec:	2206      	movs	r2, #6
 80048ee:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	2001      	movs	r0, #1
 80048f6:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fc3b 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2000      	movs	r0, #0
 8004904:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fcba 	bl	8004280 <st25r95_response>
 800490c:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return 0;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d001      	beq.n	800491a <st25r95_15693_inventory1+0x62>
 8004916:	2300      	movs	r3, #0
 8004918:	e00f      	b.n	800493a <st25r95_15693_inventory1+0x82>

  memset(handler->uid, 0, 8);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3307      	adds	r3, #7
 800491e:	2208      	movs	r2, #8
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f009 fd84 	bl	800e430 <memset>
  memcpy(handler->uid, res+4, 8);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1dd8      	adds	r0, r3, #7
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3304      	adds	r3, #4
 8004930:	2208      	movs	r2, #8
 8004932:	4619      	mov	r1, r3
 8004934:	f009 fd6e 	bl	800e414 <memcpy>
  return 1;
 8004938:	2301      	movs	r3, #1
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000910 	.word	0x20000910
 8004948:	20000a10 	.word	0x20000a10

0800494c <st25r95_15693_select>:

uint8_t st25r95_15693_select(st25r95_handle *handler, uint8_t uid[8])
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	tx_buffer[0] = ST25_SEND;
 8004956:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <st25r95_15693_select+0x98>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = ST25_SR;
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <st25r95_15693_select+0x98>)
 800495e:	2204      	movs	r2, #4
 8004960:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = 0x0A; // length of 15693 command frame
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <st25r95_15693_select+0x98>)
 8004964:	220a      	movs	r2, #10
 8004966:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = 0b00100010; // flags
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <st25r95_15693_select+0x98>)
 800496a:	2222      	movs	r2, #34	; 0x22
 800496c:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = 0x25; // command code
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <st25r95_15693_select+0x98>)
 8004970:	2225      	movs	r2, #37	; 0x25
 8004972:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = uid[0]; // UID required
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <st25r95_15693_select+0x98>)
 800497a:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = uid[1];
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785a      	ldrb	r2, [r3, #1]
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <st25r95_15693_select+0x98>)
 8004982:	719a      	strb	r2, [r3, #6]
	tx_buffer[7] = uid[2];
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	789a      	ldrb	r2, [r3, #2]
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <st25r95_15693_select+0x98>)
 800498a:	71da      	strb	r2, [r3, #7]
	tx_buffer[8] = uid[3];
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	78da      	ldrb	r2, [r3, #3]
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <st25r95_15693_select+0x98>)
 8004992:	721a      	strb	r2, [r3, #8]
	tx_buffer[9] = uid[4];
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	791a      	ldrb	r2, [r3, #4]
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <st25r95_15693_select+0x98>)
 800499a:	725a      	strb	r2, [r3, #9]
	tx_buffer[10] = uid[5];
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	795a      	ldrb	r2, [r3, #5]
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <st25r95_15693_select+0x98>)
 80049a2:	729a      	strb	r2, [r3, #10]
	tx_buffer[11] = uid[6];
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	799a      	ldrb	r2, [r3, #6]
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <st25r95_15693_select+0x98>)
 80049aa:	72da      	strb	r2, [r3, #11]
	tx_buffer[12] = uid[7];
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	79da      	ldrb	r2, [r3, #7]
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <st25r95_15693_select+0x98>)
 80049b2:	731a      	strb	r2, [r3, #12]
	tx_len = 13;
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <st25r95_15693_select+0x9c>)
 80049b6:	220d      	movs	r2, #13
 80049b8:	601a      	str	r2, [r3, #0]

	handler->nss(1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	2001      	movs	r0, #1
 80049c0:	4798      	blx	r3
	st25r95_spi_tx(handler);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fbd6 	bl	8004174 <st25r95_spi_tx>
	handler->nss(0);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	2000      	movs	r0, #0
 80049ce:	4798      	blx	r3

	uint8_t *res = st25r95_response(handler);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fc55 	bl	8004280 <st25r95_response>
 80049d6:	60f8      	str	r0, [r7, #12]

	return *res;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	781b      	ldrb	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000910 	.word	0x20000910
 80049e8:	20000a10 	.word	0x20000a10

080049ec <st25r95_15693_quiet>:

void st25r95_15693_quiet(st25r95_handle *handler, uint8_t uid[8])
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
	tx_buffer[0] = ST25_SEND;
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <st25r95_15693_quiet+0x94>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = ST25_SR;
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <st25r95_15693_quiet+0x94>)
 80049fe:	2204      	movs	r2, #4
 8004a00:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = 0x0A; // length of command frame
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a04:	220a      	movs	r2, #10
 8004a06:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = 0b00100010; // flags
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a0a:	2222      	movs	r2, #34	; 0x22
 8004a0c:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = 0x02; // command code
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a10:	2202      	movs	r2, #2
 8004a12:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = uid[0]; // UID required
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a1a:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = uid[1];
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785a      	ldrb	r2, [r3, #1]
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a22:	719a      	strb	r2, [r3, #6]
	tx_buffer[7] = uid[2];
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	789a      	ldrb	r2, [r3, #2]
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a2a:	71da      	strb	r2, [r3, #7]
	tx_buffer[8] = uid[3];
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	78da      	ldrb	r2, [r3, #3]
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a32:	721a      	strb	r2, [r3, #8]
	tx_buffer[9] = uid[4];
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791a      	ldrb	r2, [r3, #4]
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a3a:	725a      	strb	r2, [r3, #9]
	tx_buffer[10] = uid[5];
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	795a      	ldrb	r2, [r3, #5]
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a42:	729a      	strb	r2, [r3, #10]
	tx_buffer[11] = uid[6];
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	799a      	ldrb	r2, [r3, #6]
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a4a:	72da      	strb	r2, [r3, #11]
	tx_buffer[12] = uid[7];
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	79da      	ldrb	r2, [r3, #7]
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <st25r95_15693_quiet+0x94>)
 8004a52:	731a      	strb	r2, [r3, #12]
	tx_len = 13;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <st25r95_15693_quiet+0x98>)
 8004a56:	220d      	movs	r2, #13
 8004a58:	601a      	str	r2, [r3, #0]

	handler->nss(1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	2001      	movs	r0, #1
 8004a60:	4798      	blx	r3
	st25r95_spi_tx(handler);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fb86 	bl	8004174 <st25r95_spi_tx>
	handler->nss(0);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	4798      	blx	r3

	uint8_t *res = st25r95_response(handler);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fc05 	bl	8004280 <st25r95_response>
 8004a76:	60f8      	str	r0, [r7, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000910 	.word	0x20000910
 8004a84:	20000a10 	.word	0x20000a10

08004a88 <st25r95_15693_anticolSetup>:

	uint8_t *res = st25r95_response(handler);
}

void st25r95_15693_anticolSetup(st25r95_handle *handler)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	uint8_t rc = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]

	memset(skip_uids, 0, NUM_BAGS * NUM_TAGS_PER_BAG);
 8004a94:	2220      	movs	r2, #32
 8004a96:	2100      	movs	r1, #0
 8004a98:	4835      	ldr	r0, [pc, #212]	; (8004b70 <st25r95_15693_anticolSetup+0xe8>)
 8004a9a:	f009 fcc9 	bl	800e430 <memset>

	// for each bag
	for (int i = 0; i < NUM_BAGS; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e05d      	b.n	8004b60 <st25r95_15693_anticolSetup+0xd8>
	{
		if (BagInfo[i].detected) continue;
 8004aa4:	4933      	ldr	r1, [pc, #204]	; (8004b74 <st25r95_15693_anticolSetup+0xec>)
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3320      	adds	r3, #32
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d14e      	bne.n	8004b58 <st25r95_15693_anticolSetup+0xd0>
		// for each tag (on the bag)
		for (int j = 0; j < NUM_TAGS_PER_BAG; j++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e047      	b.n	8004b50 <st25r95_15693_anticolSetup+0xc8>
		{
			// select and sleep the current tag
			vTaskDelay(1);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f007 fd95 	bl	800c5f0 <vTaskDelay>
			rc = st25r95_15693_select(handler, BagInfo[i].uid + j);
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4a28      	ldr	r2, [pc, #160]	; (8004b74 <st25r95_15693_anticolSetup+0xec>)
 8004ad2:	441a      	add	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff35 	bl	800494c <st25r95_15693_select>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]

			if (rc != 0x80) { // UID not found
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d007      	beq.n	8004afc <st25r95_15693_anticolSetup+0x74>
				skip_uids[i * NUM_TAGS_PER_BAG + j] = 1; // skip uid for rest of service
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	009a      	lsls	r2, r3, #2
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	4a1e      	ldr	r2, [pc, #120]	; (8004b70 <st25r95_15693_anticolSetup+0xe8>)
 8004af6:	2101      	movs	r1, #1
 8004af8:	54d1      	strb	r1, [r2, r3]
				continue;
 8004afa:	e026      	b.n	8004b4a <st25r95_15693_anticolSetup+0xc2>
			} else { // UID Found
				// record UID in handler
				HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 8004afc:	2201      	movs	r2, #1
 8004afe:	2110      	movs	r1, #16
 8004b00:	481d      	ldr	r0, [pc, #116]	; (8004b78 <st25r95_15693_anticolSetup+0xf0>)
 8004b02:	f002 fc59 	bl	80073b8 <HAL_GPIO_WritePin>
				handler->uid[0] = BagInfo[i].uid[j];
 8004b06:	491b      	ldr	r1, [pc, #108]	; (8004b74 <st25r95_15693_anticolSetup+0xec>)
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	71da      	strb	r2, [r3, #7]
				BeanBag_findIDinArray(handler);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fa94 	bl	8004050 <BeanBag_findIDinArray>
			}

			vTaskDelay(1);
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f007 fd61 	bl	800c5f0 <vTaskDelay>
			st25r95_15693_quiet(handler, BagInfo[i].uid + j);
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <st25r95_15693_anticolSetup+0xec>)
 8004b3a:	441a      	add	r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff51 	bl	80049ec <st25r95_15693_quiet>
		for (int j = 0; j < NUM_TAGS_PER_BAG; j++)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	ddb4      	ble.n	8004ac0 <st25r95_15693_anticolSetup+0x38>
 8004b56:	e000      	b.n	8004b5a <st25r95_15693_anticolSetup+0xd2>
		if (BagInfo[i].detected) continue;
 8004b58:	bf00      	nop
	for (int i = 0; i < NUM_BAGS; i++)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b07      	cmp	r3, #7
 8004b64:	dd9e      	ble.n	8004aa4 <st25r95_15693_anticolSetup+0x1c>
		}
	}
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000a14 	.word	0x20000a14
 8004b74:	20000020 	.word	0x20000020
 8004b78:	48000400 	.word	0x48000400

08004b7c <st25r95_idle>:
	}
}



void st25r95_idle(st25r95_handle *handler) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004b84:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <st25r95_idle+0xa4>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8004b8a:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <st25r95_idle+0xa4>)
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8004b90:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <st25r95_idle+0xa4>)
 8004b92:	220e      	movs	r2, #14
 8004b94:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0b00001011;
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <st25r95_idle+0xa4>)
 8004b98:	220b      	movs	r2, #11
 8004b9a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <st25r95_idle+0xa4>)
 8004b9e:	2221      	movs	r2, #33	; 0x21
 8004ba0:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <st25r95_idle+0xa4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <st25r95_idle+0xa4>)
 8004baa:	2279      	movs	r2, #121	; 0x79
 8004bac:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <st25r95_idle+0xa4>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <st25r95_idle+0xa4>)
 8004bb6:	2218      	movs	r2, #24
 8004bb8:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <st25r95_idle+0xa4>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <st25r95_idle+0xa4>)
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <st25r95_idle+0xa4>)
 8004bc8:	2260      	movs	r2, #96	; 0x60
 8004bca:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <st25r95_idle+0xa4>)
 8004bce:	2260      	movs	r2, #96	; 0x60
 8004bd0:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	789b      	ldrb	r3, [r3, #2]
 8004bd6:	3b08      	subs	r3, #8
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <st25r95_idle+0xa4>)
 8004bdc:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	789b      	ldrb	r3, [r3, #2]
 8004be2:	3308      	adds	r3, #8
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <st25r95_idle+0xa4>)
 8004be8:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8004bea:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <st25r95_idle+0xa4>)
 8004bec:	223f      	movs	r2, #63	; 0x3f
 8004bee:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <st25r95_idle+0xa4>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <st25r95_idle+0xa8>)
 8004bf8:	2211      	movs	r2, #17
 8004bfa:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	2001      	movs	r0, #1
 8004c02:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fab5 	bl	8004174 <st25r95_spi_tx>
  handler->nss(0);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	2000      	movs	r0, #0
 8004c10:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000910 	.word	0x20000910
 8004c24:	20000a10 	.word	0x20000a10

08004c28 <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e0bf      	b.n	8004db6 <st25r95_calibrate+0x18e>
    tx_len = 17;
 8004c36:	4b66      	ldr	r3, [pc, #408]	; (8004dd0 <st25r95_calibrate+0x1a8>)
 8004c38:	2211      	movs	r2, #17
 8004c3a:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8004c3c:	4a65      	ldr	r2, [pc, #404]	; (8004dd4 <st25r95_calibrate+0x1ac>)
 8004c3e:	4b66      	ldr	r3, [pc, #408]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004c40:	4614      	mov	r4, r2
 8004c42:	461d      	mov	r5, r3
 8004c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2001      	movs	r0, #1
 8004c52:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fa8d 	bl	8004174 <st25r95_spi_tx>
    handler->nss(0);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	2000      	movs	r0, #0
 8004c60:	4798      	blx	r3

    res = st25r95_response(handler);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fb0c 	bl	8004280 <st25r95_response>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <st25r95_calibrate+0x1b4>)
 8004c6c:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	; (8004ddc <st25r95_calibrate+0x1b4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 809a 	bne.w	8004dae <st25r95_calibrate+0x186>
 8004c7a:	4b58      	ldr	r3, [pc, #352]	; (8004ddc <st25r95_calibrate+0x1b4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	f040 8093 	bne.w	8004dae <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 8004c88:	4b54      	ldr	r3, [pc, #336]	; (8004ddc <st25r95_calibrate+0x1b4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d13e      	bne.n	8004d12 <st25r95_calibrate+0xea>
        switch (i - 1) {
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	2b07      	cmp	r3, #7
 8004c9a:	f200 8089 	bhi.w	8004db0 <st25r95_calibrate+0x188>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <st25r95_calibrate+0x7c>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004db1 	.word	0x08004db1
 8004cac:	08004ccd 	.word	0x08004ccd
 8004cb0:	08004cdb 	.word	0x08004cdb
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004db1 	.word	0x08004db1
          case 0:
            calibrate_data[14] = 0xFC;
 8004cc4:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cc6:	22fc      	movs	r2, #252	; 0xfc
 8004cc8:	739a      	strb	r2, [r3, #14]
            break;
 8004cca:	e071      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cce:	7b9b      	ldrb	r3, [r3, #14]
 8004cd0:	3340      	adds	r3, #64	; 0x40
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cd6:	739a      	strb	r2, [r3, #14]
            break;
 8004cd8:	e06a      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 8004cda:	4b3f      	ldr	r3, [pc, #252]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cdc:	7b9b      	ldrb	r3, [r3, #14]
 8004cde:	3320      	adds	r3, #32
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004ce4:	739a      	strb	r2, [r3, #14]
            break;
 8004ce6:	e063      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cea:	7b9b      	ldrb	r3, [r3, #14]
 8004cec:	3310      	adds	r3, #16
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cf2:	739a      	strb	r2, [r3, #14]
            break;
 8004cf4:	e05c      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 8004cf6:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004cf8:	7b9b      	ldrb	r3, [r3, #14]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d00:	739a      	strb	r2, [r3, #14]
            break;
 8004d02:	e055      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d06:	7b9b      	ldrb	r3, [r3, #14]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d0e:	739a      	strb	r2, [r3, #14]
            break;
 8004d10:	e04e      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 8004d12:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <st25r95_calibrate+0x1b4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3302      	adds	r3, #2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d147      	bne.n	8004dae <st25r95_calibrate+0x186>
        switch (i - 1) {
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	d844      	bhi.n	8004db0 <st25r95_calibrate+0x188>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <st25r95_calibrate+0x104>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004db1 	.word	0x08004db1
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	08004d5b 	.word	0x08004d5b
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d77 	.word	0x08004d77
 8004d40:	08004d85 	.word	0x08004d85
 8004d44:	08004d93 	.word	0x08004d93
 8004d48:	08004da1 	.word	0x08004da1
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8004d4c:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d4e:	7b9b      	ldrb	r3, [r3, #14]
 8004d50:	3b80      	subs	r3, #128	; 0x80
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d56:	739a      	strb	r2, [r3, #14]
            break;
 8004d58:	e02a      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d5c:	7b9b      	ldrb	r3, [r3, #14]
 8004d5e:	3b40      	subs	r3, #64	; 0x40
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d64:	739a      	strb	r2, [r3, #14]
            break;
 8004d66:	e023      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d6a:	7b9b      	ldrb	r3, [r3, #14]
 8004d6c:	3b20      	subs	r3, #32
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d72:	739a      	strb	r2, [r3, #14]
            break;
 8004d74:	e01c      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d78:	7b9b      	ldrb	r3, [r3, #14]
 8004d7a:	3b10      	subs	r3, #16
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d80:	739a      	strb	r2, [r3, #14]
            break;
 8004d82:	e015      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d86:	7b9b      	ldrb	r3, [r3, #14]
 8004d88:	3b08      	subs	r3, #8
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d8e:	739a      	strb	r2, [r3, #14]
            break;
 8004d90:	e00e      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d94:	7b9b      	ldrb	r3, [r3, #14]
 8004d96:	3b04      	subs	r3, #4
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004d9c:	739a      	strb	r2, [r3, #14]
            break;
 8004d9e:	e007      	b.n	8004db0 <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004da2:	7b9b      	ldrb	r3, [r3, #14]
 8004da4:	3b04      	subs	r3, #4
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004daa:	739a      	strb	r2, [r3, #14]
            break;
 8004dac:	e000      	b.n	8004db0 <st25r95_calibrate+0x188>
        }
      }
 8004dae:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	3301      	adds	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	f67f af3c 	bls.w	8004c36 <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <st25r95_calibrate+0x1b0>)
 8004dc0:	7b9a      	ldrb	r2, [r3, #14]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	709a      	strb	r2, [r3, #2]
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000a10 	.word	0x20000a10
 8004dd4:	20000910 	.word	0x20000910
 8004dd8:	20000160 	.word	0x20000160
 8004ddc:	20000b34 	.word	0x20000b34

08004de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_MspInit+0x4c>)
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <HAL_MspInit+0x4c>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6613      	str	r3, [r2, #96]	; 0x60
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_MspInit+0x4c>)
 8004df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_MspInit+0x4c>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_MspInit+0x4c>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_MspInit+0x4c>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	210f      	movs	r1, #15
 8004e1a:	f06f 0001 	mvn.w	r0, #1
 8004e1e:	f001 fe8c 	bl	8006b3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000

08004e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b09e      	sub	sp, #120	; 0x78
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	2268      	movs	r2, #104	; 0x68
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f009 faf5 	bl	800e430 <memset>
  if(hadc->Instance==ADC1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2e      	ldr	r2, [pc, #184]	; (8004f04 <HAL_ADC_MspInit+0xd4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d155      	bne.n	8004efc <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004e56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004e64:	2308      	movs	r3, #8
 8004e66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004e68:	2307      	movs	r3, #7
 8004e6a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004e70:	2302      	movs	r3, #2
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e7a:	f107 0310 	add.w	r3, r7, #16
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f003 f980 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8004e8a:	f7fe ffff 	bl	8003e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_ADC_MspInit+0xd8>)
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_ADC_MspInit+0xd8>)
 8004e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_ADC_MspInit+0xd8>)
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ea8:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <HAL_ADC_MspInit+0xe0>)
 8004eaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004eac:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ee0:	480a      	ldr	r0, [pc, #40]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ee2:	f001 fe61 	bl	8006ba8 <HAL_DMA_Init>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004eec:	f7fe ffce 	bl	8003e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a06      	ldr	r2, [pc, #24]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <HAL_ADC_MspInit+0xdc>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004efc:	bf00      	nop
 8004efe:	3778      	adds	r7, #120	; 0x78
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	50040000 	.word	0x50040000
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	200003e4 	.word	0x200003e4
 8004f10:	40020008 	.word	0x40020008

08004f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_SPI_MspInit+0x7c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d128      	bne.n	8004f88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f36:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3a:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f40:	6613      	str	r3, [r2, #96]	; 0x60
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f4e:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_SPI_MspInit+0x80>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004f66:	23c2      	movs	r3, #194	; 0xc2
 8004f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f72:	2303      	movs	r3, #3
 8004f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f76:	2305      	movs	r3, #5
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f84:	f002 f886 	bl	8007094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f88:	bf00      	nop
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40013000 	.word	0x40013000
 8004f94:	40021000 	.word	0x40021000

08004f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b0a6      	sub	sp, #152	; 0x98
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	2268      	movs	r2, #104	; 0x68
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f009 fa39 	bl	800e430 <memset>
  if(huart->Instance==USART1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a71      	ldr	r2, [pc, #452]	; (8005188 <HAL_UART_MspInit+0x1f0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	f040 809a 	bne.w	80050fe <HAL_UART_MspInit+0x166>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fd2:	f107 031c 	add.w	r3, r7, #28
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 f8d4 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004fe2:	f7fe ff53 	bl	8003e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fe6:	4b69      	ldr	r3, [pc, #420]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fea:	4a68      	ldr	r2, [pc, #416]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8004fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ff2:	4b66      	ldr	r3, [pc, #408]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4a62      	ldr	r2, [pc, #392]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800500a:	4b60      	ldr	r3, [pc, #384]	; (800518c <HAL_UART_MspInit+0x1f4>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8005016:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501e:	2302      	movs	r3, #2
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502a:	2303      	movs	r3, #3
 800502c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005030:	2307      	movs	r3, #7
 8005032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005036:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800503a:	4619      	mov	r1, r3
 800503c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005040:	f002 f828 	bl	8007094 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005044:	4b52      	ldr	r3, [pc, #328]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005046:	4a53      	ldr	r2, [pc, #332]	; (8005194 <HAL_UART_MspInit+0x1fc>)
 8005048:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800504a:	4b51      	ldr	r3, [pc, #324]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 800504c:	2202      	movs	r2, #2
 800504e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005050:	4b4f      	ldr	r3, [pc, #316]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005058:	2200      	movs	r2, #0
 800505a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800505c:	4b4c      	ldr	r3, [pc, #304]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005062:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005064:	2200      	movs	r2, #0
 8005066:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005068:	4b49      	ldr	r3, [pc, #292]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 800506a:	2200      	movs	r2, #0
 800506c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800506e:	4b48      	ldr	r3, [pc, #288]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005070:	2200      	movs	r2, #0
 8005072:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005074:	4b46      	ldr	r3, [pc, #280]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800507a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800507c:	4844      	ldr	r0, [pc, #272]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 800507e:	f001 fd93 	bl	8006ba8 <HAL_DMA_Init>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8005088:	f7fe ff00 	bl	8003e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a40      	ldr	r2, [pc, #256]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005090:	671a      	str	r2, [r3, #112]	; 0x70
 8005092:	4a3f      	ldr	r2, [pc, #252]	; (8005190 <HAL_UART_MspInit+0x1f8>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_UART_MspInit+0x200>)
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <HAL_UART_MspInit+0x204>)
 800509c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800509e:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050a0:	2202      	movs	r2, #2
 80050a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050a4:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050a6:	2210      	movs	r2, #16
 80050a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050b0:	4b39      	ldr	r3, [pc, #228]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80050c2:	4b35      	ldr	r3, [pc, #212]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80050c8:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80050d0:	4831      	ldr	r0, [pc, #196]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050d2:	f001 fd69 	bl	8006ba8 <HAL_DMA_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 80050dc:	f7fe fed6 	bl	8003e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80050e6:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <HAL_UART_MspInit+0x200>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80050ec:	2200      	movs	r2, #0
 80050ee:	2106      	movs	r1, #6
 80050f0:	2025      	movs	r0, #37	; 0x25
 80050f2:	f001 fd22 	bl	8006b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050f6:	2025      	movs	r0, #37	; 0x25
 80050f8:	f001 fd3b 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050fc:	e040      	b.n	8005180 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a27      	ldr	r2, [pc, #156]	; (80051a0 <HAL_UART_MspInit+0x208>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d13b      	bne.n	8005180 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005108:	2302      	movs	r3, #2
 800510a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800510c:	2300      	movs	r3, #0
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	4618      	mov	r0, r3
 8005116:	f003 f835 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005120:	f7fe feb4 	bl	8003e8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_UART_MspInit+0x1f4>)
 800512a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512e:	6593      	str	r3, [r2, #88]	; 0x58
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_UART_MspInit+0x1f4>)
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_UART_MspInit+0x1f4>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_UART_MspInit+0x1f4>)
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005154:	230c      	movs	r3, #12
 8005156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515a:	2302      	movs	r3, #2
 800515c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005166:	2303      	movs	r3, #3
 8005168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800516c:	2307      	movs	r3, #7
 800516e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005172:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005176:	4619      	mov	r1, r3
 8005178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800517c:	f001 ff8a 	bl	8007094 <HAL_GPIO_Init>
}
 8005180:	bf00      	nop
 8005182:	3798      	adds	r7, #152	; 0x98
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40013800 	.word	0x40013800
 800518c:	40021000 	.word	0x40021000
 8005190:	200005f8 	.word	0x200005f8
 8005194:	40020058 	.word	0x40020058
 8005198:	20000640 	.word	0x20000640
 800519c:	4002046c 	.word	0x4002046c
 80051a0:	40004400 	.word	0x40004400

080051a4 <pop_registers_from_fault_stack>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
/* USER CODE BEGIN EV */

void pop_registers_from_fault_stack(unsigned int * hardfault_args)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b08b      	sub	sp, #44	; 0x2c
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
unsigned int stacked_r3;
unsigned int stacked_r12;
unsigned int stacked_lr;
unsigned int stacked_pc;
unsigned int stacked_psr;
    stacked_r0 = ((unsigned long) hardfault_args[0]);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
    stacked_r1 = ((unsigned long) hardfault_args[1]);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	623b      	str	r3, [r7, #32]
    stacked_r2 = ((unsigned long) hardfault_args[2]);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	61fb      	str	r3, [r7, #28]
    stacked_r3 = ((unsigned long) hardfault_args[3]);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	61bb      	str	r3, [r7, #24]
    stacked_r12 = ((unsigned long) hardfault_args[4]);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	617b      	str	r3, [r7, #20]
    stacked_lr = ((unsigned long) hardfault_args[5]);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	613b      	str	r3, [r7, #16]
    stacked_pc = ((unsigned long) hardfault_args[6]);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	60fb      	str	r3, [r7, #12]
    stacked_psr = ((unsigned long) hardfault_args[7]);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	60bb      	str	r3, [r7, #8]
    /* Inspect stacked_pc to locate the offending instruction. */
    for( ;; );
 80051dc:	e7fe      	b.n	80051dc <pop_registers_from_fault_stack+0x38>

080051de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051e2:	e7fe      	b.n	80051e2 <NMI_Handler+0x4>

080051e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	__asm volatile (
 80051e8:	f01e 0f04 	tst.w	lr, #4
 80051ec:	bf0c      	ite	eq
 80051ee:	f3ef 8008 	mrseq	r0, MSP
 80051f2:	f3ef 8009 	mrsne	r0, PSP
 80051f6:	6981      	ldr	r1, [r0, #24]
 80051f8:	4a01      	ldr	r2, [pc, #4]	; (8005200 <HardFault_Handler+0x1c>)
 80051fa:	4710      	bx	r2
	    "ldr r2, =pop_registers_from_fault_stack\n\t"
	    "bx r2\n\t"
	    //handler2_address_const: .word
	        );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051fc:	e7fe      	b.n	80051fc <HardFault_Handler+0x18>
 80051fe:	0000      	.short	0x0000
 8005200:	080051a5 	.word	0x080051a5

08005204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005208:	e7fe      	b.n	8005208 <MemManage_Handler+0x4>

0800520a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800520e:	e7fe      	b.n	800520e <BusFault_Handler+0x4>

08005210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005214:	e7fe      	b.n	8005214 <UsageFault_Handler+0x4>

08005216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005228:	f000 f99c 	bl	8005564 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800522c:	f007 fe70 	bl	800cf10 <xTaskGetSchedulerState>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005236:	f008 fd3f 	bl	800dcb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005244:	4802      	ldr	r0, [pc, #8]	; (8005250 <DMA1_Channel1_IRQHandler+0x10>)
 8005246:	f001 fe46 	bl	8006ed6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200003e4 	.word	0x200003e4

08005254 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <DMA1_Channel5_IRQHandler+0x10>)
 800525a:	f001 fe3c 	bl	8006ed6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200005f8 	.word	0x200005f8

08005268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <USART1_IRQHandler+0x10>)
 800526e:	f004 fb3b 	bl	80098e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000490 	.word	0x20000490

0800527c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8005280:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005284:	f002 f8ca 	bl	800741c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005288:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800528c:	f002 f8c6 	bl	800741c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}

08005294 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005298:	4802      	ldr	r0, [pc, #8]	; (80052a4 <DMA2_Channel6_IRQHandler+0x10>)
 800529a:	f001 fe1c 	bl	8006ed6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000640 	.word	0x20000640

080052a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return 1;
 80052ac:	2301      	movs	r3, #1
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <_kill>:

int _kill(int pid, int sig)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052c2:	f008 ff73 	bl	800e1ac <__errno>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2216      	movs	r2, #22
 80052ca:	601a      	str	r2, [r3, #0]
  return -1;
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <_exit>:

void _exit (int status)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052e0:	f04f 31ff 	mov.w	r1, #4294967295
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ffe7 	bl	80052b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052ea:	e7fe      	b.n	80052ea <_exit+0x12>

080052ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e00a      	b.n	8005314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052fe:	f3af 8000 	nop.w
 8005302:	4601      	mov	r1, r0
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	60ba      	str	r2, [r7, #8]
 800530a:	b2ca      	uxtb	r2, r1
 800530c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	3301      	adds	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	dbf0      	blt.n	80052fe <_read+0x12>
  }

  return len;
 800531c:	687b      	ldr	r3, [r7, #4]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b086      	sub	sp, #24
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e009      	b.n	800534c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	60ba      	str	r2, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3301      	adds	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	dbf1      	blt.n	8005338 <_write+0x12>
  }
  return len;
 8005354:	687b      	ldr	r3, [r7, #4]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_close>:

int _close(int file)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005386:	605a      	str	r2, [r3, #4]
  return 0;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <_isatty>:

int _isatty(int file)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800539e:	2301      	movs	r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <_sbrk+0x5c>)
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <_sbrk+0x60>)
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <_sbrk+0x64>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <_sbrk+0x64>)
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <_sbrk+0x68>)
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <_sbrk+0x64>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d207      	bcs.n	8005408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053f8:	f008 fed8 	bl	800e1ac <__errno>
 80053fc:	4603      	mov	r3, r0
 80053fe:	220c      	movs	r2, #12
 8005400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	e009      	b.n	800541c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005408:	4b08      	ldr	r3, [pc, #32]	; (800542c <_sbrk+0x64>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <_sbrk+0x64>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	4a05      	ldr	r2, [pc, #20]	; (800542c <_sbrk+0x64>)
 8005418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20028000 	.word	0x20028000
 8005428:	00000400 	.word	0x00000400
 800542c:	20000b38 	.word	0x20000b38
 8005430:	20002ce8 	.word	0x20002ce8

08005434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <SystemInit+0x20>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <SystemInit+0x20>)
 8005440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800545c:	f7ff ffea 	bl	8005434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <LoopForever+0x6>)
  ldr r1, =_edata
 8005462:	490d      	ldr	r1, [pc, #52]	; (8005498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005464:	4a0d      	ldr	r2, [pc, #52]	; (800549c <LoopForever+0xe>)
  movs r3, #0
 8005466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005468:	e002      	b.n	8005470 <LoopCopyDataInit>

0800546a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800546a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800546c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800546e:	3304      	adds	r3, #4

08005470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005474:	d3f9      	bcc.n	800546a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005478:	4c0a      	ldr	r4, [pc, #40]	; (80054a4 <LoopForever+0x16>)
  movs r3, #0
 800547a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800547c:	e001      	b.n	8005482 <LoopFillZerobss>

0800547e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800547e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005480:	3204      	adds	r2, #4

08005482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005484:	d3fb      	bcc.n	800547e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005486:	f008 ff8d 	bl	800e3a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800548a:	f7fe f8bb 	bl	8003604 <main>

0800548e <LoopForever>:

LoopForever:
    b LoopForever
 800548e:	e7fe      	b.n	800548e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005490:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8005494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005498:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 800549c:	08012470 	.word	0x08012470
  ldr r2, =_sbss
 80054a0:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80054a4:	20002ce8 	.word	0x20002ce8

080054a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80054a8:	e7fe      	b.n	80054a8 <ADC1_IRQHandler>
	...

080054ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_Init+0x3c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <HAL_Init+0x3c>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054c2:	2003      	movs	r0, #3
 80054c4:	f001 fb2e 	bl	8006b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054c8:	200f      	movs	r0, #15
 80054ca:	f000 f80f 	bl	80054ec <HAL_InitTick>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	71fb      	strb	r3, [r7, #7]
 80054d8:	e001      	b.n	80054de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054da:	f7ff fc81 	bl	8004de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054de:	79fb      	ldrb	r3, [r7, #7]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40022000 	.word	0x40022000

080054ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80054f8:	4b17      	ldr	r3, [pc, #92]	; (8005558 <HAL_InitTick+0x6c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <HAL_InitTick+0x70>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_InitTick+0x6c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800550e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fb39 	bl	8006b8e <HAL_SYSTICK_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d809      	bhi.n	800553c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005528:	2200      	movs	r2, #0
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f001 fb03 	bl	8006b3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <HAL_InitTick+0x74>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e007      	b.n	800554c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	e004      	b.n	800554c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e001      	b.n	800554c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000017c 	.word	0x2000017c
 800555c:	20000174 	.word	0x20000174
 8005560:	20000178 	.word	0x20000178

08005564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_IncTick+0x20>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_IncTick+0x24>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4413      	add	r3, r2
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_IncTick+0x24>)
 8005576:	6013      	str	r3, [r2, #0]
}
 8005578:	bf00      	nop
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000017c 	.word	0x2000017c
 8005588:	20000b3c 	.word	0x20000b3c

0800558c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return uwTick;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <HAL_GetTick+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000b3c 	.word	0x20000b3c

080055a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3360      	adds	r3, #96	; 0x60
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <LL_ADC_SetOffset+0x44>)
 800562e:	4013      	ands	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	03fff000 	.word	0x03fff000

08005654 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3360      	adds	r3, #96	; 0x60
 8005662:	461a      	mov	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3360      	adds	r3, #96	; 0x60
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	615a      	str	r2, [r3, #20]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3330      	adds	r3, #48	; 0x30
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	4413      	add	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	211f      	movs	r1, #31
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	401a      	ands	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0e9b      	lsrs	r3, r3, #26
 800573a:	f003 011f 	and.w	r1, r3, #31
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	431a      	orrs	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800575a:	b480      	push	{r7}
 800575c:	b087      	sub	sp, #28
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3314      	adds	r3, #20
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	0e5b      	lsrs	r3, r3, #25
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	4413      	add	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	0d1b      	lsrs	r3, r3, #20
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2107      	movs	r1, #7
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	401a      	ands	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	0d1b      	lsrs	r3, r3, #20
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	431a      	orrs	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f003 0318 	and.w	r3, r3, #24
 80057d2:	4908      	ldr	r1, [pc, #32]	; (80057f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80057d4:	40d9      	lsrs	r1, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	400b      	ands	r3, r1
 80057da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057de:	431a      	orrs	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	0007ffff 	.word	0x0007ffff

080057f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6093      	str	r3, [r2, #8]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d101      	bne.n	8005836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005880:	d101      	bne.n	8005886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058a8:	f043 0201 	orr.w	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058d0:	f043 0202 	orr.w	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <LL_ADC_IsEnabled+0x18>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <LL_ADC_IsEnabled+0x1a>
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d101      	bne.n	8005922 <LL_ADC_IsDisableOngoing+0x18>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <LL_ADC_IsDisableOngoing+0x1a>
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005944:	f043 0204 	orr.w	r2, r3, #4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b04      	cmp	r3, #4
 800596a:	d101      	bne.n	8005970 <LL_ADC_REG_IsConversionOngoing+0x18>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b08      	cmp	r3, #8
 8005990:	d101      	bne.n	8005996 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e12f      	b.n	8005c1e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fa2f 	bl	8004e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff ff19 	bl	800581c <LL_ADC_IsDeepPowerDownEnabled>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff feff 	bl	80057f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff ff34 	bl	800586c <LL_ADC_IsInternalRegulatorEnabled>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d115      	bne.n	8005a36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff ff18 	bl	8005844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a14:	4b84      	ldr	r3, [pc, #528]	; (8005c28 <HAL_ADC_Init+0x284>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	4a84      	ldr	r2, [pc, #528]	; (8005c2c <HAL_ADC_Init+0x288>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a28:	e002      	b.n	8005a30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f9      	bne.n	8005a2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff ff16 	bl	800586c <LL_ADC_IsInternalRegulatorEnabled>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f043 0210 	orr.w	r2, r3, #16
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff76 	bl	8005958 <LL_ADC_REG_IsConversionOngoing>
 8005a6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f040 80c8 	bne.w	8005c0c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 80c4 	bne.w	8005c0c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a8c:	f043 0202 	orr.w	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff23 	bl	80058e4 <LL_ADC_IsEnabled>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005aa4:	4862      	ldr	r0, [pc, #392]	; (8005c30 <HAL_ADC_Init+0x28c>)
 8005aa6:	f7ff ff1d 	bl	80058e4 <LL_ADC_IsEnabled>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	485f      	ldr	r0, [pc, #380]	; (8005c34 <HAL_ADC_Init+0x290>)
 8005ab8:	f7ff fd74 	bl	80055a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	7e5b      	ldrb	r3, [r3, #25]
 8005ac0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ac6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005acc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ad2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ada:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d106      	bne.n	8005af8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	3b01      	subs	r3, #1
 8005af0:	045b      	lsls	r3, r3, #17
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_ADC_Init+0x294>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	69b9      	ldr	r1, [r7, #24]
 8005b24:	430b      	orrs	r3, r1
 8005b26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff ff13 	bl	8005958 <LL_ADC_REG_IsConversionOngoing>
 8005b32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff ff20 	bl	800597e <LL_ADC_INJ_IsConversionOngoing>
 8005b3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d140      	bne.n	8005bc8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d13d      	bne.n	8005bc8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	7e1b      	ldrb	r3, [r3, #24]
 8005b54:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b56:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b5e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6e:	f023 0306 	bic.w	r3, r3, #6
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	69b9      	ldr	r1, [r7, #24]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d118      	bne.n	8005bb8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b90:	f023 0304 	bic.w	r3, r3, #4
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ba2:	4311      	orrs	r1, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	611a      	str	r2, [r3, #16]
 8005bb6:	e007      	b.n	8005bc8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d10c      	bne.n	8005bea <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f023 010f 	bic.w	r1, r3, #15
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
 8005be8:	e007      	b.n	8005bfa <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 020f 	bic.w	r2, r2, #15
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	659a      	str	r2, [r3, #88]	; 0x58
 8005c0a:	e007      	b.n	8005c1c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	f043 0210 	orr.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000174 	.word	0x20000174
 8005c2c:	053e2d63 	.word	0x053e2d63
 8005c30:	50040000 	.word	0x50040000
 8005c34:	50040300 	.word	0x50040300
 8005c38:	fff0c007 	.word	0xfff0c007

08005c3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fe83 	bl	8005958 <LL_ADC_REG_IsConversionOngoing>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d167      	bne.n	8005d28 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_ADC_Start_DMA+0x2a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e063      	b.n	8005d2e <HAL_ADC_Start_DMA+0xf2>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fc82 	bl	8006578 <ADC_Enable>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d14f      	bne.n	8005d1e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	f023 0206 	bic.w	r2, r3, #6
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005caa:	e002      	b.n	8005cb2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_ADC_Start_DMA+0xfc>)
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_ADC_Start_DMA+0x100>)
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_ADC_Start_DMA+0x104>)
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	221c      	movs	r2, #28
 8005cd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0210 	orr.w	r2, r2, #16
 8005ce8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3340      	adds	r3, #64	; 0x40
 8005d04:	4619      	mov	r1, r3
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f001 f805 	bl	8006d18 <HAL_DMA_Start_IT>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fe0a 	bl	8005930 <LL_ADC_REG_StartConversion>
 8005d1c:	e006      	b.n	8005d2c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005d26:	e001      	b.n	8005d2c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	08006743 	.word	0x08006743
 8005d3c:	0800681b 	.word	0x0800681b
 8005d40:	08006837 	.word	0x08006837

08005d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b0b6      	sub	sp, #216	; 0xd8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_ADC_ConfigChannel+0x22>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e3d5      	b.n	800654e <HAL_ADC_ConfigChannel+0x7ce>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fdd2 	bl	8005958 <LL_ADC_REG_IsConversionOngoing>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 83ba 	bne.w	8006530 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d824      	bhi.n	8005e0e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	3b02      	subs	r3, #2
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d81b      	bhi.n	8005e06 <HAL_ADC_ConfigChannel+0x86>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <HAL_ADC_ConfigChannel+0x54>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005ded 	.word	0x08005ded
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	220c      	movs	r2, #12
 8005de8:	605a      	str	r2, [r3, #4]
          break;
 8005dea:	e011      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2212      	movs	r2, #18
 8005df0:	605a      	str	r2, [r3, #4]
          break;
 8005df2:	e00d      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2218      	movs	r2, #24
 8005df8:	605a      	str	r2, [r3, #4]
          break;
 8005dfa:	e009      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e02:	605a      	str	r2, [r3, #4]
          break;
 8005e04:	e004      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2206      	movs	r2, #6
 8005e0a:	605a      	str	r2, [r3, #4]
          break;
 8005e0c:	e000      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005e0e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f7ff fc70 	bl	8005702 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd96 	bl	8005958 <LL_ADC_REG_IsConversionOngoing>
 8005e2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fda2 	bl	800597e <LL_ADC_INJ_IsConversionOngoing>
 8005e3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 81c1 	bne.w	80061ca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 81bc 	bne.w	80061ca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5a:	d10f      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2200      	movs	r2, #0
 8005e66:	4619      	mov	r1, r3
 8005e68:	f7ff fc77 	bl	800575a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fc1e 	bl	80056b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005e7a:	e00e      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f7ff fc66 	bl	800575a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2100      	movs	r1, #0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fc0e 	bl	80056b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d00a      	beq.n	8005ed2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6919      	ldr	r1, [r3, #16]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ecc:	f7ff fb9e 	bl	800560c <LL_ADC_SetOffset>
 8005ed0:	e17b      	b.n	80061ca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fbbb 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x17e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fbb0 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	0e9b      	lsrs	r3, r3, #26
 8005ef8:	f003 021f 	and.w	r2, r3, #31
 8005efc:	e01e      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x1bc>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fba5 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f14:	fa93 f3a3 	rbit	r3, r3
 8005f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	e004      	b.n	8005f3a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f34:	fab3 f383 	clz	r3, r3
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x1d4>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0e9b      	lsrs	r3, r3, #26
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	e018      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x206>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005f78:	2320      	movs	r3, #32
 8005f7a:	e004      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d106      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fb74 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fb58 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x244>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fb4d 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	0e9b      	lsrs	r3, r3, #26
 8005fbe:	f003 021f 	and.w	r2, r3, #31
 8005fc2:	e01e      	b.n	8006002 <HAL_ADC_ConfigChannel+0x282>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fb42 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fda:	fa93 f3a3 	rbit	r3, r3
 8005fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	e004      	b.n	8006000 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8005ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ffa:	fab3 f383 	clz	r3, r3
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <HAL_ADC_ConfigChannel+0x29a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	0e9b      	lsrs	r3, r3, #26
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	e018      	b.n	800604c <HAL_ADC_ConfigChannel+0x2cc>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006026:	fa93 f3a3 	rbit	r3, r3
 800602a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800602e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800603e:	2320      	movs	r3, #32
 8006040:	e004      	b.n	800604c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8006042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006046:	fab3 f383 	clz	r3, r3
 800604a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800604c:	429a      	cmp	r2, r3
 800604e:	d106      	bne.n	800605e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2200      	movs	r2, #0
 8006056:	2101      	movs	r1, #1
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fb11 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2102      	movs	r1, #2
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff faf5 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800606a:	4603      	mov	r3, r0
 800606c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <HAL_ADC_ConfigChannel+0x30a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2102      	movs	r1, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff faea 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006080:	4603      	mov	r3, r0
 8006082:	0e9b      	lsrs	r3, r3, #26
 8006084:	f003 021f 	and.w	r2, r3, #31
 8006088:	e01e      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x348>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fadf 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006096:	4603      	mov	r3, r0
 8006098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a0:	fa93 f3a3 	rbit	r3, r3
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80060a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80060b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80060b8:	2320      	movs	r3, #32
 80060ba:	e004      	b.n	80060c6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80060bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060c0:	fab3 f383 	clz	r3, r3
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <HAL_ADC_ConfigChannel+0x360>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0e9b      	lsrs	r3, r3, #26
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	e016      	b.n	800610e <HAL_ADC_ConfigChannel+0x38e>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ec:	fa93 f3a3 	rbit	r3, r3
 80060f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80060f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8006100:	2320      	movs	r3, #32
 8006102:	e004      	b.n	800610e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006108:	fab3 f383 	clz	r3, r3
 800610c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800610e:	429a      	cmp	r2, r3
 8006110:	d106      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	2102      	movs	r1, #2
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fab0 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2103      	movs	r1, #3
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fa94 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800612c:	4603      	mov	r3, r0
 800612e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_ADC_ConfigChannel+0x3cc>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2103      	movs	r1, #3
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fa89 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006142:	4603      	mov	r3, r0
 8006144:	0e9b      	lsrs	r3, r3, #26
 8006146:	f003 021f 	and.w	r2, r3, #31
 800614a:	e017      	b.n	800617c <HAL_ADC_ConfigChannel+0x3fc>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2103      	movs	r1, #3
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fa7e 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006158:	4603      	mov	r3, r0
 800615a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615e:	fa93 f3a3 	rbit	r3, r3
 8006162:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006166:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800616e:	2320      	movs	r3, #32
 8006170:	e003      	b.n	800617a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x414>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	e011      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x438>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80061a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e003      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80061b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d106      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2103      	movs	r1, #3
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fa5b 	bl	8005680 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fb88 	bl	80058e4 <LL_ADC_IsEnabled>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 8140 	bne.w	800645c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	461a      	mov	r2, r3
 80061ea:	f7ff fae1 	bl	80057b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	4a8f      	ldr	r2, [pc, #572]	; (8006430 <HAL_ADC_ConfigChannel+0x6b0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	f040 8131 	bne.w	800645c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_ADC_ConfigChannel+0x4a2>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	0e9b      	lsrs	r3, r3, #26
 8006210:	3301      	adds	r3, #1
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	2b09      	cmp	r3, #9
 8006218:	bf94      	ite	ls
 800621a:	2301      	movls	r3, #1
 800621c:	2300      	movhi	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	e019      	b.n	8006256 <HAL_ADC_ConfigChannel+0x4d6>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006232:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800623a:	2320      	movs	r3, #32
 800623c:	e003      	b.n	8006246 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800623e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006240:	fab3 f383 	clz	r3, r3
 8006244:	b2db      	uxtb	r3, r3
 8006246:	3301      	adds	r3, #1
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2b09      	cmp	r3, #9
 800624e:	bf94      	ite	ls
 8006250:	2301      	movls	r3, #1
 8006252:	2300      	movhi	r3, #0
 8006254:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006256:	2b00      	cmp	r3, #0
 8006258:	d079      	beq.n	800634e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x4f6>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	0e9b      	lsrs	r3, r3, #26
 800626c:	3301      	adds	r3, #1
 800626e:	069b      	lsls	r3, r3, #26
 8006270:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006274:	e015      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x522>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627e:	fa93 f3a3 	rbit	r3, r3
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006286:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800628e:	2320      	movs	r3, #32
 8006290:	e003      	b.n	800629a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8006292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006294:	fab3 f383 	clz	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	3301      	adds	r3, #1
 800629c:	069b      	lsls	r3, r3, #26
 800629e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x542>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	3301      	adds	r3, #1
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	2101      	movs	r1, #1
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	e017      	b.n	80062f2 <HAL_ADC_ConfigChannel+0x572>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80062d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80062da:	2320      	movs	r3, #32
 80062dc:	e003      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3301      	adds	r3, #1
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2101      	movs	r1, #1
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	ea42 0103 	orr.w	r1, r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x598>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0e9b      	lsrs	r3, r3, #26
 8006308:	3301      	adds	r3, #1
 800630a:	f003 021f 	and.w	r2, r3, #31
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	e018      	b.n	800634a <HAL_ADC_ConfigChannel+0x5ca>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	fa93 f3a3 	rbit	r3, r3
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800632a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8006330:	2320      	movs	r3, #32
 8006332:	e003      	b.n	800633c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	3301      	adds	r3, #1
 800633e:	f003 021f 	and.w	r2, r3, #31
 8006342:	4613      	mov	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4413      	add	r3, r2
 8006348:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800634a:	430b      	orrs	r3, r1
 800634c:	e081      	b.n	8006452 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006356:	2b00      	cmp	r3, #0
 8006358:	d107      	bne.n	800636a <HAL_ADC_ConfigChannel+0x5ea>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	0e9b      	lsrs	r3, r3, #26
 8006360:	3301      	adds	r3, #1
 8006362:	069b      	lsls	r3, r3, #26
 8006364:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006368:	e015      	b.n	8006396 <HAL_ADC_ConfigChannel+0x616>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	fa93 f3a3 	rbit	r3, r3
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8006382:	2320      	movs	r3, #32
 8006384:	e003      	b.n	800638e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	fab3 f383 	clz	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	3301      	adds	r3, #1
 8006390:	069b      	lsls	r3, r3, #26
 8006392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x636>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0e9b      	lsrs	r3, r3, #26
 80063a8:	3301      	adds	r3, #1
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	e017      	b.n	80063e6 <HAL_ADC_ConfigChannel+0x666>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	fa93 f3a3 	rbit	r3, r3
 80063c2:	61fb      	str	r3, [r7, #28]
  return result;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80063ce:	2320      	movs	r3, #32
 80063d0:	e003      	b.n	80063da <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	fab3 f383 	clz	r3, r3
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2101      	movs	r1, #1
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	ea42 0103 	orr.w	r1, r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x692>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	0e9b      	lsrs	r3, r3, #26
 80063fc:	3301      	adds	r3, #1
 80063fe:	f003 021f 	and.w	r2, r3, #31
 8006402:	4613      	mov	r3, r2
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	4413      	add	r3, r2
 8006408:	3b1e      	subs	r3, #30
 800640a:	051b      	lsls	r3, r3, #20
 800640c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006410:	e01e      	b.n	8006450 <HAL_ADC_ConfigChannel+0x6d0>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	613b      	str	r3, [r7, #16]
  return result;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800642a:	2320      	movs	r3, #32
 800642c:	e006      	b.n	800643c <HAL_ADC_ConfigChannel+0x6bc>
 800642e:	bf00      	nop
 8006430:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	3301      	adds	r3, #1
 800643e:	f003 021f 	and.w	r2, r3, #31
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	3b1e      	subs	r3, #30
 800644a:	051b      	lsls	r3, r3, #20
 800644c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006450:	430b      	orrs	r3, r1
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	6892      	ldr	r2, [r2, #8]
 8006456:	4619      	mov	r1, r3
 8006458:	f7ff f97f 	bl	800575a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <HAL_ADC_ConfigChannel+0x7d8>)
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d06c      	beq.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006468:	483c      	ldr	r0, [pc, #240]	; (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 800646a:	f7ff f8c1 	bl	80055f0 <LL_ADC_GetCommonPathInternalCh>
 800646e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <HAL_ADC_ConfigChannel+0x7e0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d127      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800647c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d121      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a35      	ldr	r2, [pc, #212]	; (8006564 <HAL_ADC_ConfigChannel+0x7e4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d157      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800649a:	4619      	mov	r1, r3
 800649c:	482f      	ldr	r0, [pc, #188]	; (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 800649e:	f7ff f894 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064a2:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_ADC_ConfigChannel+0x7e8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	4a30      	ldr	r2, [pc, #192]	; (800656c <HAL_ADC_ConfigChannel+0x7ec>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064bc:	e002      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f9      	bne.n	80064be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064ca:	e03a      	b.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a27      	ldr	r2, [pc, #156]	; (8006570 <HAL_ADC_ConfigChannel+0x7f0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d113      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x77e>
 80064d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <HAL_ADC_ConfigChannel+0x7e4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d12a      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f4:	4619      	mov	r1, r3
 80064f6:	4819      	ldr	r0, [pc, #100]	; (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 80064f8:	f7ff f867 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064fc:	e021      	b.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <HAL_ADC_ConfigChannel+0x7f4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d11c      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800650c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d116      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a12      	ldr	r2, [pc, #72]	; (8006564 <HAL_ADC_ConfigChannel+0x7e4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d111      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800651e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006526:	4619      	mov	r1, r3
 8006528:	480c      	ldr	r0, [pc, #48]	; (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 800652a:	f7ff f84e 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
 800652e:	e008      	b.n	8006542 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800654a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800654e:	4618      	mov	r0, r3
 8006550:	37d8      	adds	r7, #216	; 0xd8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	80080000 	.word	0x80080000
 800655c:	50040300 	.word	0x50040300
 8006560:	c7520000 	.word	0xc7520000
 8006564:	50040000 	.word	0x50040000
 8006568:	20000174 	.word	0x20000174
 800656c:	053e2d63 	.word	0x053e2d63
 8006570:	cb840000 	.word	0xcb840000
 8006574:	80000001 	.word	0x80000001

08006578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006580:	2300      	movs	r3, #0
 8006582:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff f9ab 	bl	80058e4 <LL_ADC_IsEnabled>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d169      	bne.n	8006668 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	4b36      	ldr	r3, [pc, #216]	; (8006674 <ADC_Enable+0xfc>)
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00d      	beq.n	80065be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a6:	f043 0210 	orr.w	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b2:	f043 0201 	orr.w	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e055      	b.n	800666a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff f966 	bl	8005894 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80065c8:	482b      	ldr	r0, [pc, #172]	; (8006678 <ADC_Enable+0x100>)
 80065ca:	f7ff f811 	bl	80055f0 <LL_ADC_GetCommonPathInternalCh>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d013      	beq.n	8006600 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <ADC_Enable+0x104>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	099b      	lsrs	r3, r3, #6
 80065de:	4a28      	ldr	r2, [pc, #160]	; (8006680 <ADC_Enable+0x108>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	099b      	lsrs	r3, r3, #6
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80065f2:	e002      	b.n	80065fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f9      	bne.n	80065f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006600:	f7fe ffc4 	bl	800558c <HAL_GetTick>
 8006604:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006606:	e028      	b.n	800665a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff f969 	bl	80058e4 <LL_ADC_IsEnabled>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff f939 	bl	8005894 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006622:	f7fe ffb3 	bl	800558c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d914      	bls.n	800665a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d00d      	beq.n	800665a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	f043 0210 	orr.w	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e007      	b.n	800666a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d1cf      	bne.n	8006608 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	8000003f 	.word	0x8000003f
 8006678:	50040300 	.word	0x50040300
 800667c:	20000174 	.word	0x20000174
 8006680:	053e2d63 	.word	0x053e2d63

08006684 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff f93a 	bl	800590a <LL_ADC_IsDisableOngoing>
 8006696:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff f921 	bl	80058e4 <LL_ADC_IsEnabled>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d047      	beq.n	8006738 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d144      	bne.n	8006738 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 030d 	and.w	r3, r3, #13
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10c      	bne.n	80066d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff f8fb 	bl	80058bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2203      	movs	r2, #3
 80066cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80066ce:	f7fe ff5d 	bl	800558c <HAL_GetTick>
 80066d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066d4:	e029      	b.n	800672a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	f043 0210 	orr.w	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	f043 0201 	orr.w	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e023      	b.n	800673a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80066f2:	f7fe ff4b 	bl	800558c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d914      	bls.n	800672a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	f043 0210 	orr.w	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	f043 0201 	orr.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e007      	b.n	800673a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1dc      	bne.n	80066f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d14b      	bne.n	80067f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d021      	beq.n	80067ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe ffae 	bl	80056dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d032      	beq.n	80067ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d12b      	bne.n	80067ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d11f      	bne.n	80067ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b0:	f043 0201 	orr.w	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	659a      	str	r2, [r3, #88]	; 0x58
 80067b8:	e018      	b.n	80067ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d111      	bne.n	80067ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d105      	bne.n	80067ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	f043 0201 	orr.w	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff faa9 	bl	8005d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80067f2:	e00e      	b.n	8006812 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fab3 	bl	8005d6c <HAL_ADC_ErrorCallback>
}
 8006806:	e004      	b.n	8006812 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fa95 	bl	8005d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	f043 0204 	orr.w	r2, r3, #4
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fa85 	bl	8005d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <LL_ADC_StartCalibration>:
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800687c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006886:	4313      	orrs	r3, r2
 8006888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_ADC_IsCalibrationOnGoing>:
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b0:	d101      	bne.n	80068b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e04d      	b.n	800697c <HAL_ADCEx_Calibration_Start+0xb8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fecb 	bl	8006684 <ADC_Disable>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d136      	bne.n	8006966 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006900:	f023 0302 	bic.w	r3, r3, #2
 8006904:	f043 0202 	orr.w	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff ffa9 	bl	800686a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006918:	e014      	b.n	8006944 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3301      	adds	r3, #1
 800691e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006926:	d30d      	bcc.n	8006944 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	f023 0312 	bic.w	r3, r3, #18
 8006930:	f043 0210 	orr.w	r2, r3, #16
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e01b      	b.n	800697c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff ffa7 	bl	800689c <LL_ADC_IsCalibrationOnGoing>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e2      	bne.n	800691a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	f023 0303 	bic.w	r3, r3, #3
 800695c:	f043 0201 	orr.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	659a      	str	r2, [r3, #88]	; 0x58
 8006964:	e005      	b.n	8006972 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f043 0210 	orr.w	r2, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069a0:	4013      	ands	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <__NVIC_SetPriorityGrouping+0x44>)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	60d3      	str	r3, [r2, #12]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	e000ed00 	.word	0xe000ed00

080069cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <__NVIC_GetPriorityGrouping+0x18>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	f003 0307 	and.w	r3, r3, #7
}
 80069da:	4618      	mov	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	db0b      	blt.n	8006a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	f003 021f 	and.w	r2, r3, #31
 8006a00:	4907      	ldr	r1, [pc, #28]	; (8006a20 <__NVIC_EnableIRQ+0x38>)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2001      	movs	r0, #1
 8006a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e100 	.word	0xe000e100

08006a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	6039      	str	r1, [r7, #0]
 8006a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	db0a      	blt.n	8006a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	490c      	ldr	r1, [pc, #48]	; (8006a70 <__NVIC_SetPriority+0x4c>)
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	0112      	lsls	r2, r2, #4
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	440b      	add	r3, r1
 8006a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a4c:	e00a      	b.n	8006a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	4908      	ldr	r1, [pc, #32]	; (8006a74 <__NVIC_SetPriority+0x50>)
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	0112      	lsls	r2, r2, #4
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	440b      	add	r3, r1
 8006a62:	761a      	strb	r2, [r3, #24]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	e000e100 	.word	0xe000e100
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	; 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f1c3 0307 	rsb	r3, r3, #7
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	bf28      	it	cs
 8006a96:	2304      	movcs	r3, #4
 8006a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d902      	bls.n	8006aa8 <NVIC_EncodePriority+0x30>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3b03      	subs	r3, #3
 8006aa6:	e000      	b.n	8006aaa <NVIC_EncodePriority+0x32>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	401a      	ands	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	43d9      	mvns	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad0:	4313      	orrs	r3, r2
         );
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3724      	adds	r7, #36	; 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af0:	d301      	bcc.n	8006af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006af2:	2301      	movs	r3, #1
 8006af4:	e00f      	b.n	8006b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006af6:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <SysTick_Config+0x40>)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006afe:	210f      	movs	r1, #15
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	f7ff ff8e 	bl	8006a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <SysTick_Config+0x40>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <SysTick_Config+0x40>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010

08006b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ff29 	bl	8006984 <__NVIC_SetPriorityGrouping>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	4603      	mov	r3, r0
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b4c:	f7ff ff3e 	bl	80069cc <__NVIC_GetPriorityGrouping>
 8006b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f7ff ff8e 	bl	8006a78 <NVIC_EncodePriority>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff ff5d 	bl	8006a24 <__NVIC_SetPriority>
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	4603      	mov	r3, r0
 8006b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ff31 	bl	80069e8 <__NVIC_EnableIRQ>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ffa2 	bl	8006ae0 <SysTick_Config>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e098      	b.n	8006cec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <HAL_DMA_Init+0x150>)
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d80f      	bhi.n	8006be6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4b4b      	ldr	r3, [pc, #300]	; (8006cfc <HAL_DMA_Init+0x154>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	4a4b      	ldr	r2, [pc, #300]	; (8006d00 <HAL_DMA_Init+0x158>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	009a      	lsls	r2, r3, #2
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a48      	ldr	r2, [pc, #288]	; (8006d04 <HAL_DMA_Init+0x15c>)
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40
 8006be4:	e00e      	b.n	8006c04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	4b46      	ldr	r3, [pc, #280]	; (8006d08 <HAL_DMA_Init+0x160>)
 8006bee:	4413      	add	r3, r2
 8006bf0:	4a43      	ldr	r2, [pc, #268]	; (8006d00 <HAL_DMA_Init+0x158>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	091b      	lsrs	r3, r3, #4
 8006bf8:	009a      	lsls	r2, r3, #2
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a42      	ldr	r2, [pc, #264]	; (8006d0c <HAL_DMA_Init+0x164>)
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5e:	d039      	beq.n	8006cd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <HAL_DMA_Init+0x15c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d11a      	bne.n	8006ca0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <HAL_DMA_Init+0x168>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	f003 031c 	and.w	r3, r3, #28
 8006c76:	210f      	movs	r1, #15
 8006c78:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	4924      	ldr	r1, [pc, #144]	; (8006d10 <HAL_DMA_Init+0x168>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <HAL_DMA_Init+0x168>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6859      	ldr	r1, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	f003 031c 	and.w	r3, r3, #28
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	491d      	ldr	r1, [pc, #116]	; (8006d10 <HAL_DMA_Init+0x168>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
 8006c9e:	e019      	b.n	8006cd4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <HAL_DMA_Init+0x16c>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	f003 031c 	and.w	r3, r3, #28
 8006cac:	210f      	movs	r1, #15
 8006cae:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	4917      	ldr	r1, [pc, #92]	; (8006d14 <HAL_DMA_Init+0x16c>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <HAL_DMA_Init+0x16c>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6859      	ldr	r1, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f003 031c 	and.w	r3, r3, #28
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	4911      	ldr	r1, [pc, #68]	; (8006d14 <HAL_DMA_Init+0x16c>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40020407 	.word	0x40020407
 8006cfc:	bffdfff8 	.word	0xbffdfff8
 8006d00:	cccccccd 	.word	0xcccccccd
 8006d04:	40020000 	.word	0x40020000
 8006d08:	bffdfbf8 	.word	0xbffdfbf8
 8006d0c:	40020400 	.word	0x40020400
 8006d10:	400200a8 	.word	0x400200a8
 8006d14:	400204a8 	.word	0x400204a8

08006d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_DMA_Start_IT+0x20>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e04b      	b.n	8006dd0 <HAL_DMA_Start_IT+0xb8>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d13a      	bne.n	8006dc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f95f 	bl	8007034 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 020e 	orr.w	r2, r2, #14
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e00f      	b.n	8006db0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0204 	bic.w	r2, r2, #4
 8006d9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 020a 	orr.w	r2, r2, #10
 8006dae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e005      	b.n	8006dce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d008      	beq.n	8006e02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2204      	movs	r2, #4
 8006df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e022      	b.n	8006e48 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 020e 	bic.w	r2, r2, #14
 8006e10:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	f003 021c 	and.w	r2, r3, #28
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	2101      	movs	r1, #1
 8006e30:	fa01 f202 	lsl.w	r2, r1, r2
 8006e34:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d005      	beq.n	8006e78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	e029      	b.n	8006ecc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 020e 	bic.w	r2, r2, #14
 8006e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9c:	f003 021c 	and.w	r2, r3, #28
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eaa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
    }
  }
  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	f003 031c 	and.w	r3, r3, #28
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d026      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x7a>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d021      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0204 	bic.w	r2, r2, #4
 8006f28:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f003 021c 	and.w	r2, r3, #28
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	2104      	movs	r1, #4
 8006f38:	fa01 f202 	lsl.w	r2, r1, r2
 8006f3c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d071      	beq.n	800702a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006f4e:	e06c      	b.n	800702a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f54:	f003 031c 	and.w	r3, r3, #28
 8006f58:	2202      	movs	r2, #2
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d02e      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xec>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d029      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 020a 	bic.w	r2, r2, #10
 8006f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f98:	f003 021c 	and.w	r2, r3, #28
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d038      	beq.n	800702a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006fc0:	e033      	b.n	800702a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	f003 031c 	and.w	r3, r3, #28
 8006fca:	2208      	movs	r2, #8
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02a      	beq.n	800702c <HAL_DMA_IRQHandler+0x156>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d025      	beq.n	800702c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 020e 	bic.w	r2, r2, #14
 8006fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff4:	f003 021c 	and.w	r2, r3, #28
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8007002:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800702a:	bf00      	nop
 800702c:	bf00      	nop
}
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	f003 021c 	and.w	r2, r3, #28
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2101      	movs	r1, #1
 8007050:	fa01 f202 	lsl.w	r2, r1, r2
 8007054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b10      	cmp	r3, #16
 8007064:	d108      	bne.n	8007078 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007076:	e007      	b.n	8007088 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070a2:	e154      	b.n	800734e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	2101      	movs	r1, #1
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	fa01 f303 	lsl.w	r3, r1, r3
 80070b0:	4013      	ands	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 8146 	beq.w	8007348 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d005      	beq.n	80070d4 <HAL_GPIO_Init+0x40>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d130      	bne.n	8007136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	2203      	movs	r2, #3
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	43db      	mvns	r3, r3
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4013      	ands	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800710a:	2201      	movs	r2, #1
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0201 	and.w	r2, r3, #1
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b03      	cmp	r3, #3
 8007140:	d017      	beq.n	8007172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	2203      	movs	r2, #3
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43db      	mvns	r3, r3
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4013      	ands	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d123      	bne.n	80071c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	08da      	lsrs	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3208      	adds	r2, #8
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	220f      	movs	r2, #15
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	08da      	lsrs	r2, r3, #3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3208      	adds	r2, #8
 80071c0:	6939      	ldr	r1, [r7, #16]
 80071c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	2203      	movs	r2, #3
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4013      	ands	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f003 0203 	and.w	r2, r3, #3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80a0 	beq.w	8007348 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007208:	4b58      	ldr	r3, [pc, #352]	; (800736c <HAL_GPIO_Init+0x2d8>)
 800720a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720c:	4a57      	ldr	r2, [pc, #348]	; (800736c <HAL_GPIO_Init+0x2d8>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6613      	str	r3, [r2, #96]	; 0x60
 8007214:	4b55      	ldr	r3, [pc, #340]	; (800736c <HAL_GPIO_Init+0x2d8>)
 8007216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007220:	4a53      	ldr	r2, [pc, #332]	; (8007370 <HAL_GPIO_Init+0x2dc>)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	3302      	adds	r3, #2
 8007228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800722c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	220f      	movs	r2, #15
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4013      	ands	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800724a:	d019      	beq.n	8007280 <HAL_GPIO_Init+0x1ec>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a49      	ldr	r2, [pc, #292]	; (8007374 <HAL_GPIO_Init+0x2e0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <HAL_GPIO_Init+0x1e8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a48      	ldr	r2, [pc, #288]	; (8007378 <HAL_GPIO_Init+0x2e4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00d      	beq.n	8007278 <HAL_GPIO_Init+0x1e4>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a47      	ldr	r2, [pc, #284]	; (800737c <HAL_GPIO_Init+0x2e8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <HAL_GPIO_Init+0x1e0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a46      	ldr	r2, [pc, #280]	; (8007380 <HAL_GPIO_Init+0x2ec>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <HAL_GPIO_Init+0x1dc>
 800726c:	2304      	movs	r3, #4
 800726e:	e008      	b.n	8007282 <HAL_GPIO_Init+0x1ee>
 8007270:	2307      	movs	r3, #7
 8007272:	e006      	b.n	8007282 <HAL_GPIO_Init+0x1ee>
 8007274:	2303      	movs	r3, #3
 8007276:	e004      	b.n	8007282 <HAL_GPIO_Init+0x1ee>
 8007278:	2302      	movs	r3, #2
 800727a:	e002      	b.n	8007282 <HAL_GPIO_Init+0x1ee>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <HAL_GPIO_Init+0x1ee>
 8007280:	2300      	movs	r3, #0
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	f002 0203 	and.w	r2, r2, #3
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	4093      	lsls	r3, r2
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007292:	4937      	ldr	r1, [pc, #220]	; (8007370 <HAL_GPIO_Init+0x2dc>)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	3302      	adds	r3, #2
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072a0:	4b38      	ldr	r3, [pc, #224]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4013      	ands	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072c4:	4a2f      	ldr	r2, [pc, #188]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072ca:	4b2e      	ldr	r3, [pc, #184]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	43db      	mvns	r3, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072f4:	4b23      	ldr	r3, [pc, #140]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	43db      	mvns	r3, r3
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4013      	ands	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007318:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	43db      	mvns	r3, r3
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4013      	ands	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007342:	4a10      	ldr	r2, [pc, #64]	; (8007384 <HAL_GPIO_Init+0x2f0>)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3301      	adds	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	f47f aea3 	bne.w	80070a4 <HAL_GPIO_Init+0x10>
  }
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	40021000 	.word	0x40021000
 8007370:	40010000 	.word	0x40010000
 8007374:	48000400 	.word	0x48000400
 8007378:	48000800 	.word	0x48000800
 800737c:	48000c00 	.word	0x48000c00
 8007380:	48001000 	.word	0x48001000
 8007384:	40010400 	.word	0x40010400

08007388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e001      	b.n	80073aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
 80073c4:	4613      	mov	r3, r2
 80073c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073c8:	787b      	ldrb	r3, [r7, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073d4:	e002      	b.n	80073dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073d6:	887a      	ldrh	r2, [r7, #2]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4013      	ands	r3, r2
 8007400:	041a      	lsls	r2, r3, #16
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	43d9      	mvns	r1, r3
 8007406:	887b      	ldrh	r3, [r7, #2]
 8007408:	400b      	ands	r3, r1
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	619a      	str	r2, [r3, #24]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007432:	4a05      	ldr	r2, [pc, #20]	; (8007448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fc f89a 	bl	8003574 <HAL_GPIO_EXTI_Callback>
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40010400 	.word	0x40010400

0800744c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <HAL_PWREx_GetVoltageRange+0x18>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007458:	4618      	mov	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40007000 	.word	0x40007000

08007468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007476:	d130      	bne.n	80074da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007478:	4b23      	ldr	r3, [pc, #140]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007484:	d038      	beq.n	80074f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007486:	4b20      	ldr	r3, [pc, #128]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007494:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007496:	4b1d      	ldr	r3, [pc, #116]	; (800750c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2232      	movs	r2, #50	; 0x32
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	0c9b      	lsrs	r3, r3, #18
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074ac:	e002      	b.n	80074b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d102      	bne.n	80074c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1f2      	bne.n	80074ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074c8:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d4:	d110      	bne.n	80074f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e00f      	b.n	80074fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e6:	d007      	beq.n	80074f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074f0:	4a05      	ldr	r2, [pc, #20]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40007000 	.word	0x40007000
 800750c:	20000174 	.word	0x20000174
 8007510:	431bde83 	.word	0x431bde83

08007514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f000 bc02 	b.w	8007d2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007528:	4b96      	ldr	r3, [pc, #600]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007532:	4b94      	ldr	r3, [pc, #592]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80e4 	beq.w	8007712 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_RCC_OscConfig+0x4c>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b0c      	cmp	r3, #12
 8007554:	f040 808b 	bne.w	800766e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b01      	cmp	r3, #1
 800755c:	f040 8087 	bne.w	800766e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007560:	4b88      	ldr	r3, [pc, #544]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_RCC_OscConfig+0x64>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e3d9      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1a      	ldr	r2, [r3, #32]
 800757c:	4b81      	ldr	r3, [pc, #516]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <HAL_RCC_OscConfig+0x7e>
 8007588:	4b7e      	ldr	r3, [pc, #504]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007590:	e005      	b.n	800759e <HAL_RCC_OscConfig+0x8a>
 8007592:	4b7c      	ldr	r3, [pc, #496]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800759e:	4293      	cmp	r3, r2
 80075a0:	d223      	bcs.n	80075ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fd8c 	bl	80080c4 <RCC_SetFlashLatencyFromMSIRange>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e3ba      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075b6:	4b73      	ldr	r3, [pc, #460]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a72      	ldr	r2, [pc, #456]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075bc:	f043 0308 	orr.w	r3, r3, #8
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4b70      	ldr	r3, [pc, #448]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	496d      	ldr	r1, [pc, #436]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075d4:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	4968      	ldr	r1, [pc, #416]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	604b      	str	r3, [r1, #4]
 80075e8:	e025      	b.n	8007636 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075ea:	4b66      	ldr	r3, [pc, #408]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a65      	ldr	r2, [pc, #404]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4b63      	ldr	r3, [pc, #396]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4960      	ldr	r1, [pc, #384]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007608:	4b5e      	ldr	r3, [pc, #376]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	495b      	ldr	r1, [pc, #364]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007618:	4313      	orrs	r3, r2
 800761a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fd4c 	bl	80080c4 <RCC_SetFlashLatencyFromMSIRange>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e37a      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007636:	f000 fc81 	bl	8007f3c <HAL_RCC_GetSysClockFreq>
 800763a:	4602      	mov	r2, r0
 800763c:	4b51      	ldr	r3, [pc, #324]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	4950      	ldr	r1, [pc, #320]	; (8007788 <HAL_RCC_OscConfig+0x274>)
 8007648:	5ccb      	ldrb	r3, [r1, r3]
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	fa22 f303 	lsr.w	r3, r2, r3
 8007652:	4a4e      	ldr	r2, [pc, #312]	; (800778c <HAL_RCC_OscConfig+0x278>)
 8007654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007656:	4b4e      	ldr	r3, [pc, #312]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f7fd ff46 	bl	80054ec <HAL_InitTick>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d052      	beq.n	8007710 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	e35e      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d032      	beq.n	80076dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007676:	4b43      	ldr	r3, [pc, #268]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a42      	ldr	r2, [pc, #264]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800767c:	f043 0301 	orr.w	r3, r3, #1
 8007680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007682:	f7fd ff83 	bl	800558c <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800768a:	f7fd ff7f 	bl	800558c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e347      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076a8:	4b36      	ldr	r3, [pc, #216]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a35      	ldr	r2, [pc, #212]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076ae:	f043 0308 	orr.w	r3, r3, #8
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	4b33      	ldr	r3, [pc, #204]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	4930      	ldr	r1, [pc, #192]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076c6:	4b2f      	ldr	r3, [pc, #188]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	492b      	ldr	r1, [pc, #172]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	604b      	str	r3, [r1, #4]
 80076da:	e01a      	b.n	8007712 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80076dc:	4b29      	ldr	r3, [pc, #164]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a28      	ldr	r2, [pc, #160]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076e8:	f7fd ff50 	bl	800558c <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076f0:	f7fd ff4c 	bl	800558c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e314      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007702:	4b20      	ldr	r3, [pc, #128]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0x1dc>
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d073      	beq.n	8007806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d005      	beq.n	8007730 <HAL_RCC_OscConfig+0x21c>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b0c      	cmp	r3, #12
 8007728:	d10e      	bne.n	8007748 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b03      	cmp	r3, #3
 800772e:	d10b      	bne.n	8007748 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d063      	beq.n	8007804 <HAL_RCC_OscConfig+0x2f0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d15f      	bne.n	8007804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e2f1      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007750:	d106      	bne.n	8007760 <HAL_RCC_OscConfig+0x24c>
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e025      	b.n	80077ac <HAL_RCC_OscConfig+0x298>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007768:	d114      	bne.n	8007794 <HAL_RCC_OscConfig+0x280>
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a05      	ldr	r2, [pc, #20]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a02      	ldr	r2, [pc, #8]	; (8007784 <HAL_RCC_OscConfig+0x270>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e013      	b.n	80077ac <HAL_RCC_OscConfig+0x298>
 8007784:	40021000 	.word	0x40021000
 8007788:	08011fc8 	.word	0x08011fc8
 800778c:	20000174 	.word	0x20000174
 8007790:	20000178 	.word	0x20000178
 8007794:	4ba0      	ldr	r3, [pc, #640]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a9f      	ldr	r2, [pc, #636]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800779a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4b9d      	ldr	r3, [pc, #628]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a9c      	ldr	r2, [pc, #624]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80077a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d013      	beq.n	80077dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fd feea 	bl	800558c <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077bc:	f7fd fee6 	bl	800558c <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	; 0x64
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e2ae      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ce:	4b92      	ldr	r3, [pc, #584]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f0      	beq.n	80077bc <HAL_RCC_OscConfig+0x2a8>
 80077da:	e014      	b.n	8007806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077dc:	f7fd fed6 	bl	800558c <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e4:	f7fd fed2 	bl	800558c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e29a      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077f6:	4b88      	ldr	r3, [pc, #544]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f0      	bne.n	80077e4 <HAL_RCC_OscConfig+0x2d0>
 8007802:	e000      	b.n	8007806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d060      	beq.n	80078d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d005      	beq.n	8007824 <HAL_RCC_OscConfig+0x310>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b0c      	cmp	r3, #12
 800781c:	d119      	bne.n	8007852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d116      	bne.n	8007852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007824:	4b7c      	ldr	r3, [pc, #496]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_OscConfig+0x328>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e277      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783c:	4b76      	ldr	r3, [pc, #472]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	061b      	lsls	r3, r3, #24
 800784a:	4973      	ldr	r1, [pc, #460]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800784c:	4313      	orrs	r3, r2
 800784e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007850:	e040      	b.n	80078d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d023      	beq.n	80078a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800785a:	4b6f      	ldr	r3, [pc, #444]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a6e      	ldr	r2, [pc, #440]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007866:	f7fd fe91 	bl	800558c <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800786e:	f7fd fe8d 	bl	800558c <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e255      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007880:	4b65      	ldr	r3, [pc, #404]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0f0      	beq.n	800786e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788c:	4b62      	ldr	r3, [pc, #392]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	061b      	lsls	r3, r3, #24
 800789a:	495f      	ldr	r1, [pc, #380]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800789c:	4313      	orrs	r3, r2
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	e018      	b.n	80078d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a2:	4b5d      	ldr	r3, [pc, #372]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a5c      	ldr	r2, [pc, #368]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80078a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fd fe6d 	bl	800558c <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b6:	f7fd fe69 	bl	800558c <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e231      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078c8:	4b53      	ldr	r3, [pc, #332]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d03c      	beq.n	800795a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01c      	beq.n	8007922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e8:	4b4b      	ldr	r3, [pc, #300]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80078ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ee:	4a4a      	ldr	r2, [pc, #296]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f8:	f7fd fe48 	bl	800558c <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007900:	f7fd fe44 	bl	800558c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e20c      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007912:	4b41      	ldr	r3, [pc, #260]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ef      	beq.n	8007900 <HAL_RCC_OscConfig+0x3ec>
 8007920:	e01b      	b.n	800795a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007922:	4b3d      	ldr	r3, [pc, #244]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007928:	4a3b      	ldr	r2, [pc, #236]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007932:	f7fd fe2b 	bl	800558c <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007938:	e008      	b.n	800794c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800793a:	f7fd fe27 	bl	800558c <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e1ef      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800794c:	4b32      	ldr	r3, [pc, #200]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800794e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1ef      	bne.n	800793a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80a6 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007968:	2300      	movs	r3, #0
 800796a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800796c:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007978:	4b27      	ldr	r3, [pc, #156]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	4a26      	ldr	r2, [pc, #152]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 800797e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007982:	6593      	str	r3, [r2, #88]	; 0x58
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007990:	2301      	movs	r3, #1
 8007992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007994:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <HAL_RCC_OscConfig+0x508>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d118      	bne.n	80079d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <HAL_RCC_OscConfig+0x508>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <HAL_RCC_OscConfig+0x508>)
 80079a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079ac:	f7fd fdee 	bl	800558c <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b4:	f7fd fdea 	bl	800558c <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e1b2      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <HAL_RCC_OscConfig+0x508>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d108      	bne.n	80079ec <HAL_RCC_OscConfig+0x4d8>
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079ea:	e029      	b.n	8007a40 <HAL_RCC_OscConfig+0x52c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b05      	cmp	r3, #5
 80079f2:	d115      	bne.n	8007a20 <HAL_RCC_OscConfig+0x50c>
 80079f4:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 80079fc:	f043 0304 	orr.w	r3, r3, #4
 8007a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	4a03      	ldr	r2, [pc, #12]	; (8007a18 <HAL_RCC_OscConfig+0x504>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a14:	e014      	b.n	8007a40 <HAL_RCC_OscConfig+0x52c>
 8007a16:	bf00      	nop
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	40007000 	.word	0x40007000
 8007a20:	4b9a      	ldr	r3, [pc, #616]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a26:	4a99      	ldr	r2, [pc, #612]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a30:	4b96      	ldr	r3, [pc, #600]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	4a95      	ldr	r2, [pc, #596]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d016      	beq.n	8007a76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a48:	f7fd fda0 	bl	800558c <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a50:	f7fd fd9c 	bl	800558c <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e162      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a66:	4b89      	ldr	r3, [pc, #548]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0ed      	beq.n	8007a50 <HAL_RCC_OscConfig+0x53c>
 8007a74:	e015      	b.n	8007aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a76:	f7fd fd89 	bl	800558c <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7e:	f7fd fd85 	bl	800558c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e14b      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a94:	4b7d      	ldr	r3, [pc, #500]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1ed      	bne.n	8007a7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aa2:	7ffb      	ldrb	r3, [r7, #31]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d105      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa8:	4b78      	ldr	r3, [pc, #480]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	4a77      	ldr	r2, [pc, #476]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d03c      	beq.n	8007b3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01c      	beq.n	8007b02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ac8:	4b70      	ldr	r3, [pc, #448]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ace:	4a6f      	ldr	r2, [pc, #444]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad8:	f7fd fd58 	bl	800558c <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ae0:	f7fd fd54 	bl	800558c <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e11c      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007af2:	4b66      	ldr	r3, [pc, #408]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0ef      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x5cc>
 8007b00:	e01b      	b.n	8007b3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b02:	4b62      	ldr	r3, [pc, #392]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b08:	4a60      	ldr	r2, [pc, #384]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007b0a:	f023 0301 	bic.w	r3, r3, #1
 8007b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b12:	f7fd fd3b 	bl	800558c <HAL_GetTick>
 8007b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b18:	e008      	b.n	8007b2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b1a:	f7fd fd37 	bl	800558c <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e0ff      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b2c:	4b57      	ldr	r3, [pc, #348]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1ef      	bne.n	8007b1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80f3 	beq.w	8007d2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	f040 80c9 	bne.w	8007ce0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007b4e:	4b4f      	ldr	r3, [pc, #316]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f003 0203 	and.w	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d12c      	bne.n	8007bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d123      	bne.n	8007bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d11b      	bne.n	8007bbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d113      	bne.n	8007bbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d109      	bne.n	8007bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d06b      	beq.n	8007c94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d062      	beq.n	8007c88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007bc2:	4b32      	ldr	r3, [pc, #200]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e0ac      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007bd2:	4b2e      	ldr	r3, [pc, #184]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bde:	f7fd fcd5 	bl	800558c <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be6:	f7fd fcd1 	bl	800558c <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e099      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bf8:	4b24      	ldr	r3, [pc, #144]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f0      	bne.n	8007be6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c04:	4b21      	ldr	r3, [pc, #132]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c14:	3a01      	subs	r2, #1
 8007c16:	0112      	lsls	r2, r2, #4
 8007c18:	4311      	orrs	r1, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c1e:	0212      	lsls	r2, r2, #8
 8007c20:	4311      	orrs	r1, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c26:	0852      	lsrs	r2, r2, #1
 8007c28:	3a01      	subs	r2, #1
 8007c2a:	0552      	lsls	r2, r2, #21
 8007c2c:	4311      	orrs	r1, r2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c32:	0852      	lsrs	r2, r2, #1
 8007c34:	3a01      	subs	r2, #1
 8007c36:	0652      	lsls	r2, r2, #25
 8007c38:	4311      	orrs	r1, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c3e:	06d2      	lsls	r2, r2, #27
 8007c40:	430a      	orrs	r2, r1
 8007c42:	4912      	ldr	r1, [pc, #72]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007c48:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a0f      	ldr	r2, [pc, #60]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c60:	f7fd fc94 	bl	800558c <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c68:	f7fd fc90 	bl	800558c <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e058      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_RCC_OscConfig+0x778>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0f0      	beq.n	8007c68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c86:	e050      	b.n	8007d2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e04f      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c94:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d144      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ca0:	4b24      	ldr	r3, [pc, #144]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a23      	ldr	r2, [pc, #140]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cac:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cb8:	f7fd fc68 	bl	800558c <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fd fc64 	bl	800558c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e02c      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cd2:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f0      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x7ac>
 8007cde:	e024      	b.n	8007d2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	2b0c      	cmp	r3, #12
 8007ce4:	d01f      	beq.n	8007d26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ce6:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf2:	f7fd fc4b 	bl	800558c <HAL_GetTick>
 8007cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cfa:	f7fd fc47 	bl	800558c <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e00f      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f0      	bne.n	8007cfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	4905      	ldr	r1, [pc, #20]	; (8007d34 <HAL_RCC_OscConfig+0x820>)
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <HAL_RCC_OscConfig+0x824>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	60cb      	str	r3, [r1, #12]
 8007d24:	e001      	b.n	8007d2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40021000 	.word	0x40021000
 8007d38:	feeefffc 	.word	0xfeeefffc

08007d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e0e7      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d50:	4b75      	ldr	r3, [pc, #468]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d910      	bls.n	8007d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5e:	4b72      	ldr	r3, [pc, #456]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 0207 	bic.w	r2, r3, #7
 8007d66:	4970      	ldr	r1, [pc, #448]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6e:	4b6e      	ldr	r3, [pc, #440]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0cf      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	4b66      	ldr	r3, [pc, #408]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d908      	bls.n	8007dae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d9c:	4b63      	ldr	r3, [pc, #396]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	4960      	ldr	r1, [pc, #384]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d04c      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dc2:	4b5a      	ldr	r3, [pc, #360]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d121      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e0a6      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d107      	bne.n	8007dea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dda:	4b54      	ldr	r3, [pc, #336]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d115      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e09a      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007df2:	4b4e      	ldr	r3, [pc, #312]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e08e      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e02:	4b4a      	ldr	r3, [pc, #296]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e086      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e12:	4b46      	ldr	r3, [pc, #280]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f023 0203 	bic.w	r2, r3, #3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	4943      	ldr	r1, [pc, #268]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e24:	f7fd fbb2 	bl	800558c <HAL_GetTick>
 8007e28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2a:	e00a      	b.n	8007e42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e2c:	f7fd fbae 	bl	800558c <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e06e      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e42:	4b3a      	ldr	r3, [pc, #232]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 020c 	and.w	r2, r3, #12
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d1eb      	bne.n	8007e2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d010      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	4b31      	ldr	r3, [pc, #196]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d208      	bcs.n	8007e82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e70:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	492b      	ldr	r1, [pc, #172]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e82:	4b29      	ldr	r3, [pc, #164]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d210      	bcs.n	8007eb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e90:	4b25      	ldr	r3, [pc, #148]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f023 0207 	bic.w	r2, r3, #7
 8007e98:	4923      	ldr	r1, [pc, #140]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <HAL_RCC_ClockConfig+0x1ec>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d001      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e036      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	4918      	ldr	r1, [pc, #96]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d009      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007edc:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4910      	ldr	r1, [pc, #64]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ef0:	f000 f824 	bl	8007f3c <HAL_RCC_GetSysClockFreq>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <HAL_RCC_ClockConfig+0x1f0>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	091b      	lsrs	r3, r3, #4
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	490b      	ldr	r1, [pc, #44]	; (8007f30 <HAL_RCC_ClockConfig+0x1f4>)
 8007f02:	5ccb      	ldrb	r3, [r1, r3]
 8007f04:	f003 031f 	and.w	r3, r3, #31
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0c:	4a09      	ldr	r2, [pc, #36]	; (8007f34 <HAL_RCC_ClockConfig+0x1f8>)
 8007f0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <HAL_RCC_ClockConfig+0x1fc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd fae9 	bl	80054ec <HAL_InitTick>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40022000 	.word	0x40022000
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	08011fc8 	.word	0x08011fc8
 8007f34:	20000174 	.word	0x20000174
 8007f38:	20000178 	.word	0x20000178

08007f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	2300      	movs	r3, #0
 8007f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f4a:	4b3e      	ldr	r3, [pc, #248]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 030c 	and.w	r3, r3, #12
 8007f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f54:	4b3b      	ldr	r3, [pc, #236]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_RCC_GetSysClockFreq+0x34>
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b0c      	cmp	r3, #12
 8007f68:	d121      	bne.n	8007fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d11e      	bne.n	8007fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f70:	4b34      	ldr	r3, [pc, #208]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d107      	bne.n	8007f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f7c:	4b31      	ldr	r3, [pc, #196]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e005      	b.n	8007f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f8c:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f98:	4a2b      	ldr	r2, [pc, #172]	; (8008048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10d      	bne.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007fac:	e00a      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d102      	bne.n	8007fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <HAL_RCC_GetSysClockFreq+0x110>)
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	e004      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d101      	bne.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007fc0:	4b23      	ldr	r3, [pc, #140]	; (8008050 <HAL_RCC_GetSysClockFreq+0x114>)
 8007fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d134      	bne.n	8008034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007fca:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCC_GetSysClockFreq+0xa6>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d003      	beq.n	8007fe8 <HAL_RCC_GetSysClockFreq+0xac>
 8007fe0:	e005      	b.n	8007fee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <HAL_RCC_GetSysClockFreq+0x110>)
 8007fe4:	617b      	str	r3, [r7, #20]
      break;
 8007fe6:	e005      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007fe8:	4b19      	ldr	r3, [pc, #100]	; (8008050 <HAL_RCC_GetSysClockFreq+0x114>)
 8007fea:	617b      	str	r3, [r7, #20]
      break;
 8007fec:	e002      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	617b      	str	r3, [r7, #20]
      break;
 8007ff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ff4:	4b13      	ldr	r3, [pc, #76]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	091b      	lsrs	r3, r3, #4
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	3301      	adds	r3, #1
 8008000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008002:	4b10      	ldr	r3, [pc, #64]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	fb03 f202 	mul.w	r2, r3, r2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	fbb2 f3f3 	udiv	r3, r2, r3
 8008018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800801a:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <HAL_RCC_GetSysClockFreq+0x108>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	0e5b      	lsrs	r3, r3, #25
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	3301      	adds	r3, #1
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008034:	69bb      	ldr	r3, [r7, #24]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3724      	adds	r7, #36	; 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000
 8008048:	08011fe0 	.word	0x08011fe0
 800804c:	00f42400 	.word	0x00f42400
 8008050:	007a1200 	.word	0x007a1200

08008054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <HAL_RCC_GetHCLKFreq+0x14>)
 800805a:	681b      	ldr	r3, [r3, #0]
}
 800805c:	4618      	mov	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000174 	.word	0x20000174

0800806c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008070:	f7ff fff0 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4904      	ldr	r1, [pc, #16]	; (8008094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40021000 	.word	0x40021000
 8008094:	08011fd8 	.word	0x08011fd8

08008098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800809c:	f7ff ffda 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0adb      	lsrs	r3, r3, #11
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4904      	ldr	r1, [pc, #16]	; (80080c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40021000 	.word	0x40021000
 80080c0:	08011fd8 	.word	0x08011fd8

080080c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80080cc:	2300      	movs	r3, #0
 80080ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80080d0:	4b2a      	ldr	r3, [pc, #168]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080dc:	f7ff f9b6 	bl	800744c <HAL_PWREx_GetVoltageRange>
 80080e0:	6178      	str	r0, [r7, #20]
 80080e2:	e014      	b.n	800810e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	4a24      	ldr	r2, [pc, #144]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6593      	str	r3, [r2, #88]	; 0x58
 80080f0:	4b22      	ldr	r3, [pc, #136]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80080fc:	f7ff f9a6 	bl	800744c <HAL_PWREx_GetVoltageRange>
 8008100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008102:	4b1e      	ldr	r3, [pc, #120]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	4a1d      	ldr	r2, [pc, #116]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800810c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008114:	d10b      	bne.n	800812e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b80      	cmp	r3, #128	; 0x80
 800811a:	d919      	bls.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2ba0      	cmp	r3, #160	; 0xa0
 8008120:	d902      	bls.n	8008128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008122:	2302      	movs	r3, #2
 8008124:	613b      	str	r3, [r7, #16]
 8008126:	e013      	b.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008128:	2301      	movs	r3, #1
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	e010      	b.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b80      	cmp	r3, #128	; 0x80
 8008132:	d902      	bls.n	800813a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008134:	2303      	movs	r3, #3
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	e00a      	b.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b80      	cmp	r3, #128	; 0x80
 800813e:	d102      	bne.n	8008146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008140:	2302      	movs	r3, #2
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	e004      	b.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b70      	cmp	r3, #112	; 0x70
 800814a:	d101      	bne.n	8008150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800814c:	2301      	movs	r3, #1
 800814e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f023 0207 	bic.w	r2, r3, #7
 8008158:	4909      	ldr	r1, [pc, #36]	; (8008180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d001      	beq.n	8008172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40021000 	.word	0x40021000
 8008180:	40022000 	.word	0x40022000

08008184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800818c:	2300      	movs	r3, #0
 800818e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008190:	2300      	movs	r3, #0
 8008192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819c:	2b00      	cmp	r3, #0
 800819e:	d031      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081a8:	d01a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80081aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081ae:	d814      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80081b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081b8:	d10f      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80081ba:	4b5d      	ldr	r3, [pc, #372]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	4a5c      	ldr	r2, [pc, #368]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081c6:	e00c      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fa44 	bl	800865c <RCCEx_PLLSAI1_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	74fb      	strb	r3, [r7, #19]
      break;
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80081e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e2:	7cfb      	ldrb	r3, [r7, #19]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081e8:	4b51      	ldr	r3, [pc, #324]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f6:	494e      	ldr	r1, [pc, #312]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80081fe:	e001      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	7cfb      	ldrb	r3, [r7, #19]
 8008202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 809e 	beq.w	800834e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008212:	2300      	movs	r3, #0
 8008214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008216:	4b46      	ldr	r3, [pc, #280]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00d      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822c:	4b40      	ldr	r3, [pc, #256]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	4a3f      	ldr	r2, [pc, #252]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008236:	6593      	str	r3, [r2, #88]	; 0x58
 8008238:	4b3d      	ldr	r3, [pc, #244]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800823a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008240:	60bb      	str	r3, [r7, #8]
 8008242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008244:	2301      	movs	r3, #1
 8008246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008248:	4b3a      	ldr	r3, [pc, #232]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a39      	ldr	r2, [pc, #228]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800824e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008254:	f7fd f99a 	bl	800558c <HAL_GetTick>
 8008258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800825a:	e009      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825c:	f7fd f996 	bl	800558c <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d902      	bls.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	74fb      	strb	r3, [r7, #19]
        break;
 800826e:	e005      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008270:	4b30      	ldr	r3, [pc, #192]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0ef      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800827c:	7cfb      	ldrb	r3, [r7, #19]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d15a      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008282:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01e      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	429a      	cmp	r2, r3
 800829c:	d019      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082aa:	4b21      	ldr	r3, [pc, #132]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b0:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082ca:	4a19      	ldr	r2, [pc, #100]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d016      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082dc:	f7fd f956 	bl	800558c <HAL_GetTick>
 80082e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e2:	e00b      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e4:	f7fd f952 	bl	800558c <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d902      	bls.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	74fb      	strb	r3, [r7, #19]
            break;
 80082fa:	e006      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fc:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0ec      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800830a:	7cfb      	ldrb	r3, [r7, #19]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831e:	4904      	ldr	r1, [pc, #16]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008326:	e009      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008328:	7cfb      	ldrb	r3, [r7, #19]
 800832a:	74bb      	strb	r3, [r7, #18]
 800832c:	e006      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800832e:	bf00      	nop
 8008330:	40021000 	.word	0x40021000
 8008334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800833c:	7c7b      	ldrb	r3, [r7, #17]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d105      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008342:	4b9e      	ldr	r3, [pc, #632]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008346:	4a9d      	ldr	r2, [pc, #628]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800834c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800835a:	4b98      	ldr	r3, [pc, #608]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008360:	f023 0203 	bic.w	r2, r3, #3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	4994      	ldr	r1, [pc, #592]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800837c:	4b8f      	ldr	r3, [pc, #572]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f023 020c 	bic.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	498c      	ldr	r1, [pc, #560]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800839e:	4b87      	ldr	r3, [pc, #540]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	4983      	ldr	r1, [pc, #524]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083c0:	4b7e      	ldr	r3, [pc, #504]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	497b      	ldr	r1, [pc, #492]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083e2:	4b76      	ldr	r3, [pc, #472]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	4972      	ldr	r1, [pc, #456]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008404:	4b6d      	ldr	r3, [pc, #436]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	496a      	ldr	r1, [pc, #424]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008426:	4b65      	ldr	r3, [pc, #404]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008434:	4961      	ldr	r1, [pc, #388]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008448:	4b5c      	ldr	r3, [pc, #368]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	4959      	ldr	r1, [pc, #356]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800846a:	4b54      	ldr	r3, [pc, #336]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	4950      	ldr	r1, [pc, #320]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800848c:	4b4b      	ldr	r3, [pc, #300]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	4948      	ldr	r1, [pc, #288]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084ae:	4b43      	ldr	r3, [pc, #268]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084b4:	f023 0203 	bic.w	r2, r3, #3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	493f      	ldr	r1, [pc, #252]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d028      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084d0:	4b3a      	ldr	r3, [pc, #232]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	4937      	ldr	r1, [pc, #220]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ee:	d106      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084f0:	4b32      	ldr	r3, [pc, #200]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	4a31      	ldr	r2, [pc, #196]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084fa:	60d3      	str	r3, [r2, #12]
 80084fc:	e011      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008506:	d10c      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	2101      	movs	r1, #1
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f8a4 	bl	800865c <RCCEx_PLLSAI1_Config>
 8008514:	4603      	mov	r3, r0
 8008516:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008518:	7cfb      	ldrb	r3, [r7, #19]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800851e:	7cfb      	ldrb	r3, [r7, #19]
 8008520:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d028      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800852e:	4b23      	ldr	r3, [pc, #140]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853c:	491f      	ldr	r1, [pc, #124]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800854c:	d106      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800854e:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	4a1a      	ldr	r2, [pc, #104]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008558:	60d3      	str	r3, [r2, #12]
 800855a:	e011      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008564:	d10c      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3304      	adds	r3, #4
 800856a:	2101      	movs	r1, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f875 	bl	800865c <RCCEx_PLLSAI1_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008576:	7cfb      	ldrb	r3, [r7, #19]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800857c:	7cfb      	ldrb	r3, [r7, #19]
 800857e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d02b      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	4908      	ldr	r1, [pc, #32]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800859c:	4313      	orrs	r3, r2
 800859e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085aa:	d109      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085ac:	4b03      	ldr	r3, [pc, #12]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	4a02      	ldr	r2, [pc, #8]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085b6:	60d3      	str	r3, [r2, #12]
 80085b8:	e014      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80085ba:	bf00      	nop
 80085bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085c8:	d10c      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3304      	adds	r3, #4
 80085ce:	2101      	movs	r1, #1
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f843 	bl	800865c <RCCEx_PLLSAI1_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085da:	7cfb      	ldrb	r3, [r7, #19]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80085e0:	7cfb      	ldrb	r3, [r7, #19]
 80085e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01c      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085f0:	4b19      	ldr	r3, [pc, #100]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80085f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fe:	4916      	ldr	r1, [pc, #88]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008600:	4313      	orrs	r3, r2
 8008602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800860e:	d10c      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	2102      	movs	r1, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f820 	bl	800865c <RCCEx_PLLSAI1_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008620:	7cfb      	ldrb	r3, [r7, #19]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8008626:	7cfb      	ldrb	r3, [r7, #19]
 8008628:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	4904      	ldr	r1, [pc, #16]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800864c:	7cbb      	ldrb	r3, [r7, #18]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	40021000 	.word	0x40021000

0800865c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800866a:	4b74      	ldr	r3, [pc, #464]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d018      	beq.n	80086a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008676:	4b71      	ldr	r3, [pc, #452]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f003 0203 	and.w	r2, r3, #3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d10d      	bne.n	80086a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
       ||
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800868e:	4b6b      	ldr	r3, [pc, #428]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
       ||
 800869e:	429a      	cmp	r2, r3
 80086a0:	d047      	beq.n	8008732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
 80086a6:	e044      	b.n	8008732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d018      	beq.n	80086e2 <RCCEx_PLLSAI1_Config+0x86>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d825      	bhi.n	8008700 <RCCEx_PLLSAI1_Config+0xa4>
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d002      	beq.n	80086be <RCCEx_PLLSAI1_Config+0x62>
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d009      	beq.n	80086d0 <RCCEx_PLLSAI1_Config+0x74>
 80086bc:	e020      	b.n	8008700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086be:	4b5f      	ldr	r3, [pc, #380]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11d      	bne.n	8008706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086ce:	e01a      	b.n	8008706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80086d0:	4b5a      	ldr	r3, [pc, #360]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d116      	bne.n	800870a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086e0:	e013      	b.n	800870a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80086e2:	4b56      	ldr	r3, [pc, #344]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10f      	bne.n	800870e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086ee:	4b53      	ldr	r3, [pc, #332]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086fe:	e006      	b.n	800870e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
      break;
 8008704:	e004      	b.n	8008710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008706:	bf00      	nop
 8008708:	e002      	b.n	8008710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800870a:	bf00      	nop
 800870c:	e000      	b.n	8008710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800870e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008716:	4b49      	ldr	r3, [pc, #292]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	3b01      	subs	r3, #1
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	430b      	orrs	r3, r1
 800872c:	4943      	ldr	r1, [pc, #268]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800872e:	4313      	orrs	r3, r2
 8008730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d17c      	bne.n	8008832 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008738:	4b40      	ldr	r3, [pc, #256]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a3f      	ldr	r2, [pc, #252]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800873e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008744:	f7fc ff22 	bl	800558c <HAL_GetTick>
 8008748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800874a:	e009      	b.n	8008760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800874c:	f7fc ff1e 	bl	800558c <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d902      	bls.n	8008760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	73fb      	strb	r3, [r7, #15]
        break;
 800875e:	e005      	b.n	800876c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008760:	4b36      	ldr	r3, [pc, #216]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1ef      	bne.n	800874c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d15f      	bne.n	8008832 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d110      	bne.n	800879a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008778:	4b30      	ldr	r3, [pc, #192]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6892      	ldr	r2, [r2, #8]
 8008788:	0211      	lsls	r1, r2, #8
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	68d2      	ldr	r2, [r2, #12]
 800878e:	06d2      	lsls	r2, r2, #27
 8008790:	430a      	orrs	r2, r1
 8008792:	492a      	ldr	r1, [pc, #168]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008794:	4313      	orrs	r3, r2
 8008796:	610b      	str	r3, [r1, #16]
 8008798:	e027      	b.n	80087ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d112      	bne.n	80087c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087a0:	4b26      	ldr	r3, [pc, #152]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80087a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6892      	ldr	r2, [r2, #8]
 80087b0:	0211      	lsls	r1, r2, #8
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6912      	ldr	r2, [r2, #16]
 80087b6:	0852      	lsrs	r2, r2, #1
 80087b8:	3a01      	subs	r2, #1
 80087ba:	0552      	lsls	r2, r2, #21
 80087bc:	430a      	orrs	r2, r1
 80087be:	491f      	ldr	r1, [pc, #124]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	610b      	str	r3, [r1, #16]
 80087c4:	e011      	b.n	80087ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087c6:	4b1d      	ldr	r3, [pc, #116]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80087ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6892      	ldr	r2, [r2, #8]
 80087d6:	0211      	lsls	r1, r2, #8
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6952      	ldr	r2, [r2, #20]
 80087dc:	0852      	lsrs	r2, r2, #1
 80087de:	3a01      	subs	r2, #1
 80087e0:	0652      	lsls	r2, r2, #25
 80087e2:	430a      	orrs	r2, r1
 80087e4:	4915      	ldr	r1, [pc, #84]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80087ea:	4b14      	ldr	r3, [pc, #80]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a13      	ldr	r2, [pc, #76]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f6:	f7fc fec9 	bl	800558c <HAL_GetTick>
 80087fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087fc:	e009      	b.n	8008812 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087fe:	f7fc fec5 	bl	800558c <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d902      	bls.n	8008812 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	73fb      	strb	r3, [r7, #15]
          break;
 8008810:	e005      	b.n	800881e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008812:	4b0a      	ldr	r3, [pc, #40]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0ef      	beq.n	80087fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	4903      	ldr	r1, [pc, #12]	; (800883c <RCCEx_PLLSAI1_Config+0x1e0>)
 800882e:	4313      	orrs	r3, r2
 8008830:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40021000 	.word	0x40021000

08008840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e095      	b.n	800897e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d108      	bne.n	800886c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008862:	d009      	beq.n	8008878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	61da      	str	r2, [r3, #28]
 800886a:	e005      	b.n	8008878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fc fb3e 	bl	8004f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088b8:	d902      	bls.n	80088c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e002      	b.n	80088c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088ce:	d007      	beq.n	80088e0 <HAL_SPI_Init+0xa0>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088d8:	d002      	beq.n	80088e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	ea42 0103 	orr.w	r1, r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	0c1b      	lsrs	r3, r3, #16
 800893c:	f003 0204 	and.w	r2, r3, #4
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	f003 0310 	and.w	r3, r3, #16
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800895c:	ea42 0103 	orr.w	r1, r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	4613      	mov	r3, r2
 8008994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_SPI_Transmit+0x22>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e158      	b.n	8008c5a <HAL_SPI_Transmit+0x2d4>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089b0:	f7fc fdec 	bl	800558c <HAL_GetTick>
 80089b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089b6:	88fb      	ldrh	r3, [r7, #6]
 80089b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d002      	beq.n	80089cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089c6:	2302      	movs	r3, #2
 80089c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089ca:	e13d      	b.n	8008c48 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <HAL_SPI_Transmit+0x52>
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089dc:	e134      	b.n	8008c48 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2203      	movs	r2, #3
 80089e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a28:	d10f      	bne.n	8008a4a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d007      	beq.n	8008a68 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a70:	d94b      	bls.n	8008b0a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_SPI_Transmit+0xfa>
 8008a7a:	8afb      	ldrh	r3, [r7, #22]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d13e      	bne.n	8008afe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	881a      	ldrh	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008aa4:	e02b      	b.n	8008afe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d112      	bne.n	8008ada <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	1c9a      	adds	r2, r3, #2
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ad8:	e011      	b.n	8008afe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ada:	f7fc fd57 	bl	800558c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d803      	bhi.n	8008af2 <HAL_SPI_Transmit+0x16c>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d102      	bne.n	8008af8 <HAL_SPI_Transmit+0x172>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008afc:	e0a4      	b.n	8008c48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ce      	bne.n	8008aa6 <HAL_SPI_Transmit+0x120>
 8008b08:	e07c      	b.n	8008c04 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_SPI_Transmit+0x192>
 8008b12:	8afb      	ldrh	r3, [r7, #22]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d170      	bne.n	8008bfa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d912      	bls.n	8008b48 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	881a      	ldrh	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	1c9a      	adds	r2, r3, #2
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b02      	subs	r3, #2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b46:	e058      	b.n	8008bfa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008b6e:	e044      	b.n	8008bfa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d12b      	bne.n	8008bd6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d912      	bls.n	8008bae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	881a      	ldrh	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	1c9a      	adds	r2, r3, #2
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b02      	subs	r3, #2
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bac:	e025      	b.n	8008bfa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bd4:	e011      	b.n	8008bfa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bd6:	f7fc fcd9 	bl	800558c <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d803      	bhi.n	8008bee <HAL_SPI_Transmit+0x268>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bec:	d102      	bne.n	8008bf4 <HAL_SPI_Transmit+0x26e>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bf8:	e026      	b.n	8008c48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1b5      	bne.n	8008b70 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fce3 	bl	80095d4 <SPI_EndRxTxTransaction>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c22:	2300      	movs	r3, #0
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e000      	b.n	8008c48 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008c46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af02      	add	r7, sp, #8
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c7e:	d112      	bne.n	8008ca6 <HAL_SPI_Receive+0x44>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10e      	bne.n	8008ca6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4613      	mov	r3, r2
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f910 	bl	8008ec2 <HAL_SPI_TransmitReceive>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	e109      	b.n	8008eba <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_SPI_Receive+0x52>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e102      	b.n	8008eba <HAL_SPI_Receive+0x258>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cbc:	f7fc fc66 	bl	800558c <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d002      	beq.n	8008cd4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cd2:	e0e9      	b.n	8008ea8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_SPI_Receive+0x7e>
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ce4:	e0e0      	b.n	8008ea8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	88fa      	ldrh	r2, [r7, #6]
 8008d06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d30:	d908      	bls.n	8008d44 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	e007      	b.n	8008d54 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d5c:	d10f      	bne.n	8008d7e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d007      	beq.n	8008d9c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008da4:	d867      	bhi.n	8008e76 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008da6:	e030      	b.n	8008e0a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d117      	bne.n	8008de6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f103 020c 	add.w	r2, r3, #12
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	7812      	ldrb	r2, [r2, #0]
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008de4:	e011      	b.n	8008e0a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008de6:	f7fc fbd1 	bl	800558c <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d803      	bhi.n	8008dfe <HAL_SPI_Receive+0x19c>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d102      	bne.n	8008e04 <HAL_SPI_Receive+0x1a2>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e08:	e04e      	b.n	8008ea8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1c8      	bne.n	8008da8 <HAL_SPI_Receive+0x146>
 8008e16:	e034      	b.n	8008e82 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d115      	bne.n	8008e52 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e30:	b292      	uxth	r2, r2
 8008e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	1c9a      	adds	r2, r3, #2
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008e50:	e011      	b.n	8008e76 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e52:	f7fc fb9b 	bl	800558c <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d803      	bhi.n	8008e6a <HAL_SPI_Receive+0x208>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d102      	bne.n	8008e70 <HAL_SPI_Receive+0x20e>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e74:	e018      	b.n	8008ea8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1ca      	bne.n	8008e18 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fb4c 	bl	8009524 <SPI_EndRxTransaction>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	e000      	b.n	8008ea8 <HAL_SPI_Receive+0x246>
  }

error :
 8008ea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b08a      	sub	sp, #40	; 0x28
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_SPI_TransmitReceive+0x26>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e1fb      	b.n	80092e0 <HAL_SPI_TransmitReceive+0x41e>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ef0:	f7fc fb4c 	bl	800558c <HAL_GetTick>
 8008ef4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008efc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008f04:	887b      	ldrh	r3, [r7, #2]
 8008f06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f0c:	7efb      	ldrb	r3, [r7, #27]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d00e      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x6e>
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f18:	d106      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x66>
 8008f22:	7efb      	ldrb	r3, [r7, #27]
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d003      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008f2e:	e1cd      	b.n	80092cc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <HAL_SPI_TransmitReceive+0x80>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_SPI_TransmitReceive+0x80>
 8008f3c:	887b      	ldrh	r3, [r7, #2]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008f48:	e1c0      	b.n	80092cc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d003      	beq.n	8008f5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2205      	movs	r2, #5
 8008f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	887a      	ldrh	r2, [r7, #2]
 8008f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	887a      	ldrh	r2, [r7, #2]
 8008f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	887a      	ldrh	r2, [r7, #2]
 8008f84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	887a      	ldrh	r2, [r7, #2]
 8008f8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fa0:	d802      	bhi.n	8008fa8 <HAL_SPI_TransmitReceive+0xe6>
 8008fa2:	8a3b      	ldrh	r3, [r7, #16]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d908      	bls.n	8008fba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fb6:	605a      	str	r2, [r3, #4]
 8008fb8:	e007      	b.n	8008fca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fc8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d007      	beq.n	8008fe8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ff0:	d97c      	bls.n	80090ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <HAL_SPI_TransmitReceive+0x13e>
 8008ffa:	8a7b      	ldrh	r3, [r7, #18]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d169      	bne.n	80090d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	1c9a      	adds	r2, r3, #2
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009024:	e056      	b.n	80090d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d11b      	bne.n	800906c <HAL_SPI_TransmitReceive+0x1aa>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009038:	b29b      	uxth	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d016      	beq.n	800906c <HAL_SPI_TransmitReceive+0x1aa>
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	2b01      	cmp	r3, #1
 8009042:	d113      	bne.n	800906c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	881a      	ldrh	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	1c9a      	adds	r2, r3, #2
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b01      	cmp	r3, #1
 8009078:	d11c      	bne.n	80090b4 <HAL_SPI_TransmitReceive+0x1f2>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d016      	beq.n	80090b4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	b292      	uxth	r2, r2
 8009092:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	1c9a      	adds	r2, r3, #2
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090b0:	2301      	movs	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80090b4:	f7fc fa6a 	bl	800558c <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d807      	bhi.n	80090d4 <HAL_SPI_TransmitReceive+0x212>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d003      	beq.n	80090d4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80090d2:	e0fb      	b.n	80092cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1a3      	bne.n	8009026 <HAL_SPI_TransmitReceive+0x164>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d19d      	bne.n	8009026 <HAL_SPI_TransmitReceive+0x164>
 80090ea:	e0df      	b.n	80092ac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_SPI_TransmitReceive+0x23a>
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	f040 80cb 	bne.w	8009292 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	d912      	bls.n	800912c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	881a      	ldrh	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	1c9a      	adds	r2, r3, #2
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b02      	subs	r3, #2
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800912a:	e0b2      	b.n	8009292 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	7812      	ldrb	r2, [r2, #0]
 8009138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009152:	e09e      	b.n	8009292 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b02      	cmp	r3, #2
 8009160:	d134      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x30a>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d02f      	beq.n	80091cc <HAL_SPI_TransmitReceive+0x30a>
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	2b01      	cmp	r3, #1
 8009170:	d12c      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	d912      	bls.n	80091a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	881a      	ldrh	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	1c9a      	adds	r2, r3, #2
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009196:	b29b      	uxth	r3, r3
 8009198:	3b02      	subs	r3, #2
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091a0:	e012      	b.n	80091c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d148      	bne.n	800926c <HAL_SPI_TransmitReceive+0x3aa>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d042      	beq.n	800926c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d923      	bls.n	800923a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	b292      	uxth	r2, r2
 80091fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	1c9a      	adds	r2, r3, #2
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b02      	subs	r3, #2
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009222:	b29b      	uxth	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	d81f      	bhi.n	8009268 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009236:	605a      	str	r2, [r3, #4]
 8009238:	e016      	b.n	8009268 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f103 020c 	add.w	r2, r3, #12
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009268:	2301      	movs	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800926c:	f7fc f98e 	bl	800558c <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009278:	429a      	cmp	r2, r3
 800927a:	d803      	bhi.n	8009284 <HAL_SPI_TransmitReceive+0x3c2>
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d102      	bne.n	800928a <HAL_SPI_TransmitReceive+0x3c8>
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	2b00      	cmp	r3, #0
 8009288:	d103      	bne.n	8009292 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009290:	e01c      	b.n	80092cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	f47f af5b 	bne.w	8009154 <HAL_SPI_TransmitReceive+0x292>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f47f af54 	bne.w	8009154 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f98f 	bl	80095d4 <SPI_EndRxTxTransaction>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d006      	beq.n	80092ca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2220      	movs	r2, #32
 80092c6:	661a      	str	r2, [r3, #96]	; 0x60
 80092c8:	e000      	b.n	80092cc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80092ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3728      	adds	r7, #40	; 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	4613      	mov	r3, r2
 80092f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80092f8:	f7fc f948 	bl	800558c <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4413      	add	r3, r2
 8009306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009308:	f7fc f940 	bl	800558c <HAL_GetTick>
 800930c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800930e:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	015b      	lsls	r3, r3, #5
 8009314:	0d1b      	lsrs	r3, r3, #20
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800931e:	e054      	b.n	80093ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d050      	beq.n	80093ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009328:	f7fc f930 	bl	800558c <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	69fa      	ldr	r2, [r7, #28]
 8009334:	429a      	cmp	r2, r3
 8009336:	d902      	bls.n	800933e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d13d      	bne.n	80093ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800934c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009356:	d111      	bne.n	800937c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009360:	d004      	beq.n	800936c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800936a:	d107      	bne.n	800937c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800937a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009384:	d10f      	bne.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e017      	b.n	80093ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4013      	ands	r3, r2
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d19b      	bne.n	8009320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000174 	.word	0x20000174

080093f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800940a:	f7fc f8bf 	bl	800558c <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	4413      	add	r3, r2
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800941a:	f7fc f8b7 	bl	800558c <HAL_GetTick>
 800941e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	330c      	adds	r3, #12
 8009426:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009428:	4b3d      	ldr	r3, [pc, #244]	; (8009520 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	00da      	lsls	r2, r3, #3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	0d1b      	lsrs	r3, r3, #20
 8009438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800943a:	fb02 f303 	mul.w	r3, r2, r3
 800943e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009440:	e060      	b.n	8009504 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009448:	d107      	bne.n	800945a <SPI_WaitFifoStateUntilTimeout+0x62>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009458:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d050      	beq.n	8009504 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009462:	f7fc f893 	bl	800558c <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946e:	429a      	cmp	r2, r3
 8009470:	d902      	bls.n	8009478 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d13d      	bne.n	80094f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009490:	d111      	bne.n	80094b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800949a:	d004      	beq.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094a4:	d107      	bne.n	80094b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094be:	d10f      	bne.n	80094e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e010      	b.n	8009516 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	3b01      	subs	r3, #1
 8009502:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4013      	ands	r3, r2
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d196      	bne.n	8009442 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3728      	adds	r7, #40	; 0x28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000174 	.word	0x20000174

08009524 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af02      	add	r7, sp, #8
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009538:	d111      	bne.n	800955e <SPI_EndRxTransaction+0x3a>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009542:	d004      	beq.n	800954e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800954c:	d107      	bne.n	800955e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2200      	movs	r2, #0
 8009566:	2180      	movs	r1, #128	; 0x80
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff febd 	bl	80092e8 <SPI_WaitFlagStateUntilTimeout>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d007      	beq.n	8009584 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e023      	b.n	80095cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800958c:	d11d      	bne.n	80095ca <SPI_EndRxTransaction+0xa6>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009596:	d004      	beq.n	80095a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095a0:	d113      	bne.n	80095ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff ff22 	bl	80093f8 <SPI_WaitFifoStateUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e000      	b.n	80095cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af02      	add	r7, sp, #8
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff ff03 	bl	80093f8 <SPI_WaitFifoStateUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fc:	f043 0220 	orr.w	r2, r3, #32
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e027      	b.n	8009658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7ff fe68 	bl	80092e8 <SPI_WaitFlagStateUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009622:	f043 0220 	orr.w	r2, r3, #32
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e014      	b.n	8009658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2200      	movs	r2, #0
 8009636:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fedc 	bl	80093f8 <SPI_WaitFifoStateUntilTimeout>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964a:	f043 0220 	orr.w	r2, r3, #32
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e000      	b.n	8009658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e04e      	b.n	8009710 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009676:	2b00      	cmp	r3, #0
 8009678:	d114      	bne.n	80096a4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fc66 	bl	8009f54 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800968e:	2b00      	cmp	r3, #0
 8009690:	d103      	bne.n	800969a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a20      	ldr	r2, [pc, #128]	; (8009718 <HAL_UART_Init+0xb8>)
 8009696:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2224      	movs	r2, #36	; 0x24
 80096a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fc90 	bl	8009fe0 <UART_SetConfig>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e022      	b.n	8009710 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 ff0a 	bl	800a4ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0201 	orr.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 ff91 	bl	800a630 <UART_CheckIdleState>
 800970e:	4603      	mov	r3, r0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	08004f99 	.word	0x08004f99

0800971c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08a      	sub	sp, #40	; 0x28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800972e:	2b20      	cmp	r3, #32
 8009730:	d178      	bne.n	8009824 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <HAL_UART_Transmit_DMA+0x22>
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e071      	b.n	8009826 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009748:	2b01      	cmp	r3, #1
 800974a:	d101      	bne.n	8009750 <HAL_UART_Transmit_DMA+0x34>
 800974c:	2302      	movs	r3, #2
 800974e:	e06a      	b.n	8009826 <HAL_UART_Transmit_DMA+0x10a>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	88fa      	ldrh	r2, [r7, #6]
 8009762:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	88fa      	ldrh	r2, [r7, #6]
 800976a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2221      	movs	r2, #33	; 0x21
 800977a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d02b      	beq.n	80097dc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	4a29      	ldr	r2, [pc, #164]	; (8009830 <HAL_UART_Transmit_DMA+0x114>)
 800978a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009790:	4a28      	ldr	r2, [pc, #160]	; (8009834 <HAL_UART_Transmit_DMA+0x118>)
 8009792:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009798:	4a27      	ldr	r2, [pc, #156]	; (8009838 <HAL_UART_Transmit_DMA+0x11c>)
 800979a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	2200      	movs	r2, #0
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ac:	4619      	mov	r1, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3328      	adds	r3, #40	; 0x28
 80097b4:	461a      	mov	r2, r3
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	f7fd faae 	bl	8006d18 <HAL_DMA_Start_IT>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2210      	movs	r2, #16
 80097c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2220      	movs	r2, #32
 80097d6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e024      	b.n	8009826 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2240      	movs	r2, #64	; 0x40
 80097e2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	613b      	str	r3, [r7, #16]
   return(result);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980c:	623a      	str	r2, [r7, #32]
 800980e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	69f9      	ldr	r1, [r7, #28]
 8009812:	6a3a      	ldr	r2, [r7, #32]
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	61bb      	str	r3, [r7, #24]
   return(result);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e5      	bne.n	80097ec <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	e000      	b.n	8009826 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009824:	2302      	movs	r3, #2
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	3728      	adds	r7, #40	; 0x28
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	0800aaab 	.word	0x0800aaab
 8009834:	0800ab49 	.word	0x0800ab49
 8009838:	0800acd5 	.word	0x0800acd5

0800983c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08a      	sub	sp, #40	; 0x28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984e:	2b20      	cmp	r3, #32
 8009850:	d142      	bne.n	80098d8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <HAL_UART_Receive_DMA+0x22>
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e03b      	b.n	80098da <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_UART_Receive_DMA+0x34>
 800986c:	2302      	movs	r3, #2
 800986e:	e034      	b.n	80098da <HAL_UART_Receive_DMA+0x9e>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a18      	ldr	r2, [pc, #96]	; (80098e4 <HAL_UART_Receive_DMA+0xa8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d01f      	beq.n	80098c8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d018      	beq.n	80098c8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	613b      	str	r3, [r7, #16]
   return(result);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	623b      	str	r3, [r7, #32]
 80098b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	69f9      	ldr	r1, [r7, #28]
 80098ba:	6a3a      	ldr	r2, [r7, #32]
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e6      	bne.n	8009896 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	461a      	mov	r2, r3
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 ffbc 	bl	800a84c <UART_Start_Receive_DMA>
 80098d4:	4603      	mov	r3, r0
 80098d6:	e000      	b.n	80098da <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3728      	adds	r7, #40	; 0x28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40008000 	.word	0x40008000

080098e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b0ba      	sub	sp, #232	; 0xe8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800990e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009912:	f640 030f 	movw	r3, #2063	; 0x80f
 8009916:	4013      	ands	r3, r2
 8009918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800991c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d115      	bne.n	8009950 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00f      	beq.n	8009950 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 82b2 	beq.w	8009eaa <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
      }
      return;
 800994e:	e2ac      	b.n	8009eaa <HAL_UART_IRQHandler+0x5c2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 811d 	beq.w	8009b94 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800995a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800996a:	4b88      	ldr	r3, [pc, #544]	; (8009b8c <HAL_UART_IRQHandler+0x2a4>)
 800996c:	4013      	ands	r3, r2
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8110 	beq.w	8009b94 <HAL_UART_IRQHandler+0x2ac>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d011      	beq.n	80099a4 <HAL_UART_IRQHandler+0xbc>
 8009980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2201      	movs	r2, #1
 8009992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800999a:	f043 0201 	orr.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d011      	beq.n	80099d4 <HAL_UART_IRQHandler+0xec>
 80099b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2202      	movs	r2, #2
 80099c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ca:	f043 0204 	orr.w	r2, r3, #4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d011      	beq.n	8009a04 <HAL_UART_IRQHandler+0x11c>
 80099e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2204      	movs	r2, #4
 80099f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099fa:	f043 0202 	orr.w	r2, r3, #2
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d017      	beq.n	8009a40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a36:	f043 0208 	orr.w	r2, r3, #8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <HAL_UART_IRQHandler+0x18a>
 8009a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00c      	beq.n	8009a72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8218 	beq.w	8009eae <HAL_UART_IRQHandler+0x5c6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00d      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d005      	beq.n	8009aca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d053      	beq.n	8009b72 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 ff8a 	bl	800a9e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	d143      	bne.n	8009b66 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1d9      	bne.n	8009ade <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d013      	beq.n	8009b5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b36:	4a16      	ldr	r2, [pc, #88]	; (8009b90 <HAL_UART_IRQHandler+0x2a8>)
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fd f988 	bl	8006e54 <HAL_DMA_Abort_IT>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01d      	beq.n	8009b86 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b58:	e015      	b.n	8009b86 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	e00f      	b.n	8009b86 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	e009      	b.n	8009b86 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009b84:	e193      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b86:	bf00      	nop
    return;
 8009b88:	e191      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
 8009b8a:	bf00      	nop
 8009b8c:	04000120 	.word	0x04000120
 8009b90:	0800ad55 	.word	0x0800ad55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	f040 814a 	bne.w	8009e32 <HAL_UART_IRQHandler+0x54a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 8143 	beq.w	8009e32 <HAL_UART_IRQHandler+0x54a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 813c 	beq.w	8009e32 <HAL_UART_IRQHandler+0x54a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2210      	movs	r2, #16
 8009bc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bcc:	2b40      	cmp	r3, #64	; 0x40
 8009bce:	f040 80b6 	bne.w	8009d3e <HAL_UART_IRQHandler+0x456>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 8165 	beq.w	8009eb2 <HAL_UART_IRQHandler+0x5ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	f080 815d 	bcs.w	8009eb2 <HAL_UART_IRQHandler+0x5ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f040 8085 	bne.w	8009d1e <HAL_UART_IRQHandler+0x436>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1da      	bne.n	8009c14 <HAL_UART_IRQHandler+0x32c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e1      	bne.n	8009c5e <HAL_UART_IRQHandler+0x376>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3308      	adds	r3, #8
 8009cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e3      	bne.n	8009c9a <HAL_UART_IRQHandler+0x3b2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cee:	f023 0310 	bic.w	r3, r3, #16
 8009cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e4      	bne.n	8009cde <HAL_UART_IRQHandler+0x3f6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd f85d 	bl	8006dd8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8009d30:	b292      	uxth	r2, r2
 8009d32:	1a8a      	subs	r2, r1, r2
 8009d34:	b292      	uxth	r2, r2
 8009d36:	4611      	mov	r1, r2
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d3c:	e0b9      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80ab 	beq.w	8009eb6 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8009d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 80a6 	beq.w	8009eb6 <HAL_UART_IRQHandler+0x5ce>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e4      	bne.n	8009d6a <HAL_UART_IRQHandler+0x482>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3308      	adds	r3, #8
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	623b      	str	r3, [r7, #32]
   return(result);
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	f023 0301 	bic.w	r3, r3, #1
 8009db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009dc4:	633a      	str	r2, [r7, #48]	; 0x30
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e3      	bne.n	8009da0 <HAL_UART_IRQHandler+0x4b8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0310 	bic.w	r3, r3, #16
 8009dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	69b9      	ldr	r1, [r7, #24]
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	617b      	str	r3, [r7, #20]
   return(result);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e4      	bne.n	8009dea <HAL_UART_IRQHandler+0x502>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e26:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e30:	e041      	b.n	8009eb6 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d010      	beq.n	8009e60 <HAL_UART_IRQHandler+0x578>
 8009e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <HAL_UART_IRQHandler+0x578>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e52:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e5e:	e02d      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00e      	beq.n	8009e8a <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d008      	beq.n	8009e8a <HAL_UART_IRQHandler+0x5a2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01c      	beq.n	8009eba <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
    }
    return;
 8009e88:	e017      	b.n	8009eba <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d012      	beq.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
 8009e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
  {
    UART_EndTransmit_IT(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 ff6e 	bl	800ad84 <UART_EndTransmit_IT>
    return;
 8009ea8:	e008      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009eaa:	bf00      	nop
 8009eac:	e006      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
    return;
 8009eae:	bf00      	nop
 8009eb0:	e004      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009eb2:	bf00      	nop
 8009eb4:	e002      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <HAL_UART_IRQHandler+0x5d4>
    return;
 8009eba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009ebc:	37e8      	adds	r7, #232	; 0xe8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop

08009ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a16      	ldr	r2, [pc, #88]	; (8009fb8 <UART_InitCallbacksToDefault+0x64>)
 8009f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a15      	ldr	r2, [pc, #84]	; (8009fbc <UART_InitCallbacksToDefault+0x68>)
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a14      	ldr	r2, [pc, #80]	; (8009fc0 <UART_InitCallbacksToDefault+0x6c>)
 8009f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <UART_InitCallbacksToDefault+0x70>)
 8009f78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <UART_InitCallbacksToDefault+0x74>)
 8009f80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a11      	ldr	r2, [pc, #68]	; (8009fcc <UART_InitCallbacksToDefault+0x78>)
 8009f88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a10      	ldr	r2, [pc, #64]	; (8009fd0 <UART_InitCallbacksToDefault+0x7c>)
 8009f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a0f      	ldr	r2, [pc, #60]	; (8009fd4 <UART_InitCallbacksToDefault+0x80>)
 8009f98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a0e      	ldr	r2, [pc, #56]	; (8009fd8 <UART_InitCallbacksToDefault+0x84>)
 8009fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a0d      	ldr	r2, [pc, #52]	; (8009fdc <UART_InitCallbacksToDefault+0x88>)
 8009fa8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	08009ed9 	.word	0x08009ed9
 8009fbc:	08009ec5 	.word	0x08009ec5
 8009fc0:	080035bd 	.word	0x080035bd
 8009fc4:	080035d9 	.word	0x080035d9
 8009fc8:	08009eed 	.word	0x08009eed
 8009fcc:	08009f01 	.word	0x08009f01
 8009fd0:	08009f15 	.word	0x08009f15
 8009fd4:	08009f29 	.word	0x08009f29
 8009fd8:	0800addd 	.word	0x0800addd
 8009fdc:	08009f3d 	.word	0x08009f3d

08009fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fe4:	b08a      	sub	sp, #40	; 0x28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	4313      	orrs	r3, r2
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4ba5      	ldr	r3, [pc, #660]	; (800a2a4 <UART_SetConfig+0x2c4>)
 800a010:	4013      	ands	r3, r2
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	6812      	ldr	r2, [r2, #0]
 800a016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a018:	430b      	orrs	r3, r1
 800a01a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a9a      	ldr	r2, [pc, #616]	; (800a2a8 <UART_SetConfig+0x2c8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a048:	4313      	orrs	r3, r2
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	430a      	orrs	r2, r1
 800a05e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a91      	ldr	r2, [pc, #580]	; (800a2ac <UART_SetConfig+0x2cc>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d126      	bne.n	800a0b8 <UART_SetConfig+0xd8>
 800a06a:	4b91      	ldr	r3, [pc, #580]	; (800a2b0 <UART_SetConfig+0x2d0>)
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	2b03      	cmp	r3, #3
 800a076:	d81b      	bhi.n	800a0b0 <UART_SetConfig+0xd0>
 800a078:	a201      	add	r2, pc, #4	; (adr r2, 800a080 <UART_SetConfig+0xa0>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a0a1 	.word	0x0800a0a1
 800a088:	0800a099 	.word	0x0800a099
 800a08c:	0800a0a9 	.word	0x0800a0a9
 800a090:	2301      	movs	r3, #1
 800a092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a096:	e0d6      	b.n	800a246 <UART_SetConfig+0x266>
 800a098:	2302      	movs	r3, #2
 800a09a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a09e:	e0d2      	b.n	800a246 <UART_SetConfig+0x266>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0a6:	e0ce      	b.n	800a246 <UART_SetConfig+0x266>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0ae:	e0ca      	b.n	800a246 <UART_SetConfig+0x266>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0b6:	e0c6      	b.n	800a246 <UART_SetConfig+0x266>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a7d      	ldr	r2, [pc, #500]	; (800a2b4 <UART_SetConfig+0x2d4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d138      	bne.n	800a134 <UART_SetConfig+0x154>
 800a0c2:	4b7b      	ldr	r3, [pc, #492]	; (800a2b0 <UART_SetConfig+0x2d0>)
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	f003 030c 	and.w	r3, r3, #12
 800a0cc:	2b0c      	cmp	r3, #12
 800a0ce:	d82d      	bhi.n	800a12c <UART_SetConfig+0x14c>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <UART_SetConfig+0xf8>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a10d 	.word	0x0800a10d
 800a0dc:	0800a12d 	.word	0x0800a12d
 800a0e0:	0800a12d 	.word	0x0800a12d
 800a0e4:	0800a12d 	.word	0x0800a12d
 800a0e8:	0800a11d 	.word	0x0800a11d
 800a0ec:	0800a12d 	.word	0x0800a12d
 800a0f0:	0800a12d 	.word	0x0800a12d
 800a0f4:	0800a12d 	.word	0x0800a12d
 800a0f8:	0800a115 	.word	0x0800a115
 800a0fc:	0800a12d 	.word	0x0800a12d
 800a100:	0800a12d 	.word	0x0800a12d
 800a104:	0800a12d 	.word	0x0800a12d
 800a108:	0800a125 	.word	0x0800a125
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a112:	e098      	b.n	800a246 <UART_SetConfig+0x266>
 800a114:	2302      	movs	r3, #2
 800a116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a11a:	e094      	b.n	800a246 <UART_SetConfig+0x266>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a122:	e090      	b.n	800a246 <UART_SetConfig+0x266>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a12a:	e08c      	b.n	800a246 <UART_SetConfig+0x266>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a132:	e088      	b.n	800a246 <UART_SetConfig+0x266>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a5f      	ldr	r2, [pc, #380]	; (800a2b8 <UART_SetConfig+0x2d8>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d125      	bne.n	800a18a <UART_SetConfig+0x1aa>
 800a13e:	4b5c      	ldr	r3, [pc, #368]	; (800a2b0 <UART_SetConfig+0x2d0>)
 800a140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a144:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a148:	2b30      	cmp	r3, #48	; 0x30
 800a14a:	d016      	beq.n	800a17a <UART_SetConfig+0x19a>
 800a14c:	2b30      	cmp	r3, #48	; 0x30
 800a14e:	d818      	bhi.n	800a182 <UART_SetConfig+0x1a2>
 800a150:	2b20      	cmp	r3, #32
 800a152:	d00a      	beq.n	800a16a <UART_SetConfig+0x18a>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d814      	bhi.n	800a182 <UART_SetConfig+0x1a2>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <UART_SetConfig+0x182>
 800a15c:	2b10      	cmp	r3, #16
 800a15e:	d008      	beq.n	800a172 <UART_SetConfig+0x192>
 800a160:	e00f      	b.n	800a182 <UART_SetConfig+0x1a2>
 800a162:	2300      	movs	r3, #0
 800a164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a168:	e06d      	b.n	800a246 <UART_SetConfig+0x266>
 800a16a:	2302      	movs	r3, #2
 800a16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a170:	e069      	b.n	800a246 <UART_SetConfig+0x266>
 800a172:	2304      	movs	r3, #4
 800a174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a178:	e065      	b.n	800a246 <UART_SetConfig+0x266>
 800a17a:	2308      	movs	r3, #8
 800a17c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a180:	e061      	b.n	800a246 <UART_SetConfig+0x266>
 800a182:	2310      	movs	r3, #16
 800a184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a188:	e05d      	b.n	800a246 <UART_SetConfig+0x266>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a4b      	ldr	r2, [pc, #300]	; (800a2bc <UART_SetConfig+0x2dc>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d125      	bne.n	800a1e0 <UART_SetConfig+0x200>
 800a194:	4b46      	ldr	r3, [pc, #280]	; (800a2b0 <UART_SetConfig+0x2d0>)
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a19e:	2bc0      	cmp	r3, #192	; 0xc0
 800a1a0:	d016      	beq.n	800a1d0 <UART_SetConfig+0x1f0>
 800a1a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a1a4:	d818      	bhi.n	800a1d8 <UART_SetConfig+0x1f8>
 800a1a6:	2b80      	cmp	r3, #128	; 0x80
 800a1a8:	d00a      	beq.n	800a1c0 <UART_SetConfig+0x1e0>
 800a1aa:	2b80      	cmp	r3, #128	; 0x80
 800a1ac:	d814      	bhi.n	800a1d8 <UART_SetConfig+0x1f8>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <UART_SetConfig+0x1d8>
 800a1b2:	2b40      	cmp	r3, #64	; 0x40
 800a1b4:	d008      	beq.n	800a1c8 <UART_SetConfig+0x1e8>
 800a1b6:	e00f      	b.n	800a1d8 <UART_SetConfig+0x1f8>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1be:	e042      	b.n	800a246 <UART_SetConfig+0x266>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1c6:	e03e      	b.n	800a246 <UART_SetConfig+0x266>
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1ce:	e03a      	b.n	800a246 <UART_SetConfig+0x266>
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1d6:	e036      	b.n	800a246 <UART_SetConfig+0x266>
 800a1d8:	2310      	movs	r3, #16
 800a1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1de:	e032      	b.n	800a246 <UART_SetConfig+0x266>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a30      	ldr	r2, [pc, #192]	; (800a2a8 <UART_SetConfig+0x2c8>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d12a      	bne.n	800a240 <UART_SetConfig+0x260>
 800a1ea:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <UART_SetConfig+0x2d0>)
 800a1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1f8:	d01a      	beq.n	800a230 <UART_SetConfig+0x250>
 800a1fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1fe:	d81b      	bhi.n	800a238 <UART_SetConfig+0x258>
 800a200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a204:	d00c      	beq.n	800a220 <UART_SetConfig+0x240>
 800a206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a20a:	d815      	bhi.n	800a238 <UART_SetConfig+0x258>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <UART_SetConfig+0x238>
 800a210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a214:	d008      	beq.n	800a228 <UART_SetConfig+0x248>
 800a216:	e00f      	b.n	800a238 <UART_SetConfig+0x258>
 800a218:	2300      	movs	r3, #0
 800a21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a21e:	e012      	b.n	800a246 <UART_SetConfig+0x266>
 800a220:	2302      	movs	r3, #2
 800a222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a226:	e00e      	b.n	800a246 <UART_SetConfig+0x266>
 800a228:	2304      	movs	r3, #4
 800a22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a22e:	e00a      	b.n	800a246 <UART_SetConfig+0x266>
 800a230:	2308      	movs	r3, #8
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a236:	e006      	b.n	800a246 <UART_SetConfig+0x266>
 800a238:	2310      	movs	r3, #16
 800a23a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a23e:	e002      	b.n	800a246 <UART_SetConfig+0x266>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a17      	ldr	r2, [pc, #92]	; (800a2a8 <UART_SetConfig+0x2c8>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	f040 808b 	bne.w	800a368 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a256:	2b08      	cmp	r3, #8
 800a258:	d834      	bhi.n	800a2c4 <UART_SetConfig+0x2e4>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <UART_SetConfig+0x280>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a285 	.word	0x0800a285
 800a264:	0800a2c5 	.word	0x0800a2c5
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a2c5 	.word	0x0800a2c5
 800a270:	0800a293 	.word	0x0800a293
 800a274:	0800a2c5 	.word	0x0800a2c5
 800a278:	0800a2c5 	.word	0x0800a2c5
 800a27c:	0800a2c5 	.word	0x0800a2c5
 800a280:	0800a29b 	.word	0x0800a29b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a284:	f7fd fef2 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 800a288:	61f8      	str	r0, [r7, #28]
        break;
 800a28a:	e021      	b.n	800a2d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a28c:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <UART_SetConfig+0x2e0>)
 800a28e:	61fb      	str	r3, [r7, #28]
        break;
 800a290:	e01e      	b.n	800a2d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a292:	f7fd fe53 	bl	8007f3c <HAL_RCC_GetSysClockFreq>
 800a296:	61f8      	str	r0, [r7, #28]
        break;
 800a298:	e01a      	b.n	800a2d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a29a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a29e:	61fb      	str	r3, [r7, #28]
        break;
 800a2a0:	e016      	b.n	800a2d0 <UART_SetConfig+0x2f0>
 800a2a2:	bf00      	nop
 800a2a4:	efff69f3 	.word	0xefff69f3
 800a2a8:	40008000 	.word	0x40008000
 800a2ac:	40013800 	.word	0x40013800
 800a2b0:	40021000 	.word	0x40021000
 800a2b4:	40004400 	.word	0x40004400
 800a2b8:	40004800 	.word	0x40004800
 800a2bc:	40004c00 	.word	0x40004c00
 800a2c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a2ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 80fa 	beq.w	800a4cc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	4413      	add	r3, r2
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d305      	bcc.n	800a2f4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d903      	bls.n	800a2fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a2fa:	e0e7      	b.n	800a4cc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2200      	movs	r2, #0
 800a300:	461c      	mov	r4, r3
 800a302:	4615      	mov	r5, r2
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	022b      	lsls	r3, r5, #8
 800a30e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a312:	0222      	lsls	r2, r4, #8
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	6849      	ldr	r1, [r1, #4]
 800a318:	0849      	lsrs	r1, r1, #1
 800a31a:	2000      	movs	r0, #0
 800a31c:	4688      	mov	r8, r1
 800a31e:	4681      	mov	r9, r0
 800a320:	eb12 0a08 	adds.w	sl, r2, r8
 800a324:	eb43 0b09 	adc.w	fp, r3, r9
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a336:	4650      	mov	r0, sl
 800a338:	4659      	mov	r1, fp
 800a33a:	f7f6 fcbd 	bl	8000cb8 <__aeabi_uldivmod>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4613      	mov	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a34c:	d308      	bcc.n	800a360 <UART_SetConfig+0x380>
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a354:	d204      	bcs.n	800a360 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e0b5      	b.n	800a4cc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a366:	e0b1      	b.n	800a4cc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a370:	d15d      	bne.n	800a42e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800a372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a376:	2b08      	cmp	r3, #8
 800a378:	d827      	bhi.n	800a3ca <UART_SetConfig+0x3ea>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <UART_SetConfig+0x3a0>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a3a5 	.word	0x0800a3a5
 800a384:	0800a3ad 	.word	0x0800a3ad
 800a388:	0800a3b5 	.word	0x0800a3b5
 800a38c:	0800a3cb 	.word	0x0800a3cb
 800a390:	0800a3bb 	.word	0x0800a3bb
 800a394:	0800a3cb 	.word	0x0800a3cb
 800a398:	0800a3cb 	.word	0x0800a3cb
 800a39c:	0800a3cb 	.word	0x0800a3cb
 800a3a0:	0800a3c3 	.word	0x0800a3c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3a4:	f7fd fe62 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 800a3a8:	61f8      	str	r0, [r7, #28]
        break;
 800a3aa:	e014      	b.n	800a3d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ac:	f7fd fe74 	bl	8008098 <HAL_RCC_GetPCLK2Freq>
 800a3b0:	61f8      	str	r0, [r7, #28]
        break;
 800a3b2:	e010      	b.n	800a3d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3b4:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <UART_SetConfig+0x508>)
 800a3b6:	61fb      	str	r3, [r7, #28]
        break;
 800a3b8:	e00d      	b.n	800a3d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ba:	f7fd fdbf 	bl	8007f3c <HAL_RCC_GetSysClockFreq>
 800a3be:	61f8      	str	r0, [r7, #28]
        break;
 800a3c0:	e009      	b.n	800a3d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3c6:	61fb      	str	r3, [r7, #28]
        break;
 800a3c8:	e005      	b.n	800a3d6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a3d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d077      	beq.n	800a4cc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	005a      	lsls	r2, r3, #1
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	085b      	lsrs	r3, r3, #1
 800a3e6:	441a      	add	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	2b0f      	cmp	r3, #15
 800a3f6:	d916      	bls.n	800a426 <UART_SetConfig+0x446>
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fe:	d212      	bcs.n	800a426 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	b29b      	uxth	r3, r3
 800a404:	f023 030f 	bic.w	r3, r3, #15
 800a408:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	b29b      	uxth	r3, r3
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	b29a      	uxth	r2, r3
 800a416:	8afb      	ldrh	r3, [r7, #22]
 800a418:	4313      	orrs	r3, r2
 800a41a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	8afa      	ldrh	r2, [r7, #22]
 800a422:	60da      	str	r2, [r3, #12]
 800a424:	e052      	b.n	800a4cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a42c:	e04e      	b.n	800a4cc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a42e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a432:	2b08      	cmp	r3, #8
 800a434:	d827      	bhi.n	800a486 <UART_SetConfig+0x4a6>
 800a436:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <UART_SetConfig+0x45c>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a461 	.word	0x0800a461
 800a440:	0800a469 	.word	0x0800a469
 800a444:	0800a471 	.word	0x0800a471
 800a448:	0800a487 	.word	0x0800a487
 800a44c:	0800a477 	.word	0x0800a477
 800a450:	0800a487 	.word	0x0800a487
 800a454:	0800a487 	.word	0x0800a487
 800a458:	0800a487 	.word	0x0800a487
 800a45c:	0800a47f 	.word	0x0800a47f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a460:	f7fd fe04 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 800a464:	61f8      	str	r0, [r7, #28]
        break;
 800a466:	e014      	b.n	800a492 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a468:	f7fd fe16 	bl	8008098 <HAL_RCC_GetPCLK2Freq>
 800a46c:	61f8      	str	r0, [r7, #28]
        break;
 800a46e:	e010      	b.n	800a492 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <UART_SetConfig+0x508>)
 800a472:	61fb      	str	r3, [r7, #28]
        break;
 800a474:	e00d      	b.n	800a492 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a476:	f7fd fd61 	bl	8007f3c <HAL_RCC_GetSysClockFreq>
 800a47a:	61f8      	str	r0, [r7, #28]
        break;
 800a47c:	e009      	b.n	800a492 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a482:	61fb      	str	r3, [r7, #28]
        break;
 800a484:	e005      	b.n	800a492 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a490:	bf00      	nop
    }

    if (pclk != 0U)
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d019      	beq.n	800a4cc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	085a      	lsrs	r2, r3, #1
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	441a      	add	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b0f      	cmp	r3, #15
 800a4b0:	d909      	bls.n	800a4c6 <UART_SetConfig+0x4e6>
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b8:	d205      	bcs.n	800a4c6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60da      	str	r2, [r3, #12]
 800a4c4:	e002      	b.n	800a4cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a4d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3728      	adds	r7, #40	; 0x28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4e6:	bf00      	nop
 800a4e8:	00f42400 	.word	0x00f42400

0800a4ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d01a      	beq.n	800a602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5ea:	d10a      	bne.n	800a602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af02      	add	r7, sp, #8
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a640:	f7fa ffa4 	bl	800558c <HAL_GetTick>
 800a644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b08      	cmp	r3, #8
 800a652:	d10e      	bne.n	800a672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f82d 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e023      	b.n	800a6ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d10e      	bne.n	800a69e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f817 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e00d      	b.n	800a6ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b09c      	sub	sp, #112	; 0x70
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	603b      	str	r3, [r7, #0]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d2:	e0a5      	b.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	f000 80a1 	beq.w	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6de:	f7fa ff55 	bl	800558c <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d13e      	bne.n	800a772 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a708:	667b      	str	r3, [r7, #100]	; 0x64
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a712:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e6      	bne.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	663b      	str	r3, [r7, #96]	; 0x60
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a746:	64ba      	str	r2, [r7, #72]	; 0x48
 800a748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e067      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d04f      	beq.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a78e:	d147      	bne.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a798:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e6      	bne.n	800a79a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	e853 3f00 	ldrex	r3, [r3]
 800a7da:	613b      	str	r3, [r7, #16]
   return(result);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f023 0301 	bic.w	r3, r3, #1
 800a7e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7ec:	623a      	str	r2, [r7, #32]
 800a7ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f0:	69f9      	ldr	r1, [r7, #28]
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	e841 2300 	strex	r3, r2, [r1]
 800a7f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e5      	bne.n	800a7cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2220      	movs	r2, #32
 800a80a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e010      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4013      	ands	r3, r2
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bf0c      	ite	eq
 800a830:	2301      	moveq	r3, #1
 800a832:	2300      	movne	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	f43f af4a 	beq.w	800a6d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3770      	adds	r7, #112	; 0x70
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b096      	sub	sp, #88	; 0x58
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	88fa      	ldrh	r2, [r7, #6]
 800a864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2222      	movs	r2, #34	; 0x22
 800a874:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d02b      	beq.n	800a8d6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	4a42      	ldr	r2, [pc, #264]	; (800a98c <UART_Start_Receive_DMA+0x140>)
 800a884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88a:	4a41      	ldr	r2, [pc, #260]	; (800a990 <UART_Start_Receive_DMA+0x144>)
 800a88c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	4a40      	ldr	r2, [pc, #256]	; (800a994 <UART_Start_Receive_DMA+0x148>)
 800a894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	2200      	movs	r2, #0
 800a89c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	88fb      	ldrh	r3, [r7, #6]
 800a8b2:	f7fc fa31 	bl	8006d18 <HAL_DMA_Start_IT>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00c      	beq.n	800a8d6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2210      	movs	r2, #16
 800a8c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e055      	b.n	800a982 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a904:	64bb      	str	r3, [r7, #72]	; 0x48
 800a906:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3308      	adds	r3, #8
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	e853 3f00 	ldrex	r3, [r3]
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	653b      	str	r3, [r7, #80]	; 0x50
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a938:	637a      	str	r2, [r7, #52]	; 0x34
 800a93a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a940:	e841 2300 	strex	r3, r2, [r1]
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e5      	bne.n	800a918 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	e853 3f00 	ldrex	r3, [r3]
 800a95a:	613b      	str	r3, [r7, #16]
   return(result);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a96c:	623a      	str	r2, [r7, #32]
 800a96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	69f9      	ldr	r1, [r7, #28]
 800a972:	6a3a      	ldr	r2, [r7, #32]
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	61bb      	str	r3, [r7, #24]
   return(result);
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e5      	bne.n	800a94c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3758      	adds	r7, #88	; 0x58
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	0800ab69 	.word	0x0800ab69
 800a990:	0800ac95 	.word	0x0800ac95
 800a994:	0800acd5 	.word	0x0800acd5

0800a998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b089      	sub	sp, #36	; 0x24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9b4:	61fb      	str	r3, [r7, #28]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6979      	ldr	r1, [r7, #20]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e6      	bne.n	800a9a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a9d8:	bf00      	nop
 800a9da:	3724      	adds	r7, #36	; 0x24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b095      	sub	sp, #84	; 0x54
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa0a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e6      	bne.n	800a9ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e5      	bne.n	800aa1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d118      	bne.n	800aa8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f023 0310 	bic.w	r3, r3, #16
 800aa6e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6979      	ldr	r1, [r7, #20]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	613b      	str	r3, [r7, #16]
   return(result);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aa9e:	bf00      	nop
 800aaa0:	3754      	adds	r7, #84	; 0x54
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b090      	sub	sp, #64	; 0x40
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d137      	bne.n	800ab36 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3308      	adds	r3, #8
 800aad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	623b      	str	r3, [r7, #32]
   return(result);
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaee:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab16:	637b      	str	r3, [r7, #52]	; 0x34
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	61fb      	str	r3, [r7, #28]
 800ab22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	69b9      	ldr	r1, [r7, #24]
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e6      	bne.n	800ab02 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab34:	e004      	b.n	800ab40 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab3e:	4798      	blx	r3
}
 800ab40:	bf00      	nop
 800ab42:	3740      	adds	r7, #64	; 0x40
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b09c      	sub	sp, #112	; 0x70
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab74:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0320 	and.w	r3, r3, #32
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d170      	bne.n	800ac66 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800ab84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba0:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800abac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800abb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e6      	bne.n	800ab8c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	e853 3f00 	ldrex	r3, [r3]
 800abcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	667b      	str	r3, [r7, #100]	; 0x64
 800abd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3308      	adds	r3, #8
 800abdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abde:	647a      	str	r2, [r7, #68]	; 0x44
 800abe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e5      	bne.n	800abbe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3308      	adds	r3, #8
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	623b      	str	r3, [r7, #32]
   return(result);
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac08:	663b      	str	r3, [r7, #96]	; 0x60
 800ac0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3308      	adds	r3, #8
 800ac10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac12:	633a      	str	r2, [r7, #48]	; 0x30
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e5      	bne.n	800abf2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac28:	2220      	movs	r2, #32
 800ac2a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d118      	bne.n	800ac66 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f023 0310 	bic.w	r3, r3, #16
 800ac48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	69b9      	ldr	r1, [r7, #24]
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e6      	bne.n	800ac34 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d109      	bne.n	800ac82 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ac6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac76:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac7e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac80:	e004      	b.n	800ac8c <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 800ac82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac8a:	4798      	blx	r3
}
 800ac8c:	bf00      	nop
 800ac8e:	3770      	adds	r7, #112	; 0x70
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d10b      	bne.n	800acc2 <UART_DMARxHalfCplt+0x2e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800acb6:	0852      	lsrs	r2, r2, #1
 800acb8:	b292      	uxth	r2, r2
 800acba:	4611      	mov	r1, r2
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acc0:	e004      	b.n	800accc <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	4798      	blx	r3
}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ace6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf8:	2b80      	cmp	r3, #128	; 0x80
 800acfa:	d109      	bne.n	800ad10 <UART_DMAError+0x3c>
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b21      	cmp	r3, #33	; 0x21
 800ad00:	d106      	bne.n	800ad10 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ad0a:	6978      	ldr	r0, [r7, #20]
 800ad0c:	f7ff fe44 	bl	800a998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1a:	2b40      	cmp	r3, #64	; 0x40
 800ad1c:	d109      	bne.n	800ad32 <UART_DMAError+0x5e>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b22      	cmp	r3, #34	; 0x22
 800ad22:	d106      	bne.n	800ad32 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ad2c:	6978      	ldr	r0, [r7, #20]
 800ad2e:	f7ff fe59 	bl	800a9e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad38:	f043 0210 	orr.w	r2, r3, #16
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad48:	6978      	ldr	r0, [r7, #20]
 800ad4a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad4c:	bf00      	nop
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada0:	61fb      	str	r3, [r7, #28]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	61bb      	str	r3, [r7, #24]
 800adac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6979      	ldr	r1, [r7, #20]
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	613b      	str	r3, [r7, #16]
   return(result);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e6      	bne.n	800ad8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	669a      	str	r2, [r3, #104]	; 0x68

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800add4:	bf00      	nop
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <__NVIC_SetPriority>:
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	6039      	str	r1, [r7, #0]
 800adfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db0a      	blt.n	800ae1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	490c      	ldr	r1, [pc, #48]	; (800ae3c <__NVIC_SetPriority+0x4c>)
 800ae0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae0e:	0112      	lsls	r2, r2, #4
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	440b      	add	r3, r1
 800ae14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae18:	e00a      	b.n	800ae30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	4908      	ldr	r1, [pc, #32]	; (800ae40 <__NVIC_SetPriority+0x50>)
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	f003 030f 	and.w	r3, r3, #15
 800ae26:	3b04      	subs	r3, #4
 800ae28:	0112      	lsls	r2, r2, #4
 800ae2a:	b2d2      	uxtb	r2, r2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	761a      	strb	r2, [r3, #24]
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	e000e100 	.word	0xe000e100
 800ae40:	e000ed00 	.word	0xe000ed00

0800ae44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae48:	2100      	movs	r1, #0
 800ae4a:	f06f 0004 	mvn.w	r0, #4
 800ae4e:	f7ff ffcf 	bl	800adf0 <__NVIC_SetPriority>
#endif
}
 800ae52:	bf00      	nop
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae5e:	f3ef 8305 	mrs	r3, IPSR
 800ae62:	603b      	str	r3, [r7, #0]
  return(result);
 800ae64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae6a:	f06f 0305 	mvn.w	r3, #5
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	e00c      	b.n	800ae8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae72:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <osKernelInitialize+0x44>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae7a:	4b08      	ldr	r3, [pc, #32]	; (800ae9c <osKernelInitialize+0x44>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	607b      	str	r3, [r7, #4]
 800ae84:	e002      	b.n	800ae8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae8c:	687b      	ldr	r3, [r7, #4]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20000b40 	.word	0x20000b40

0800aea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aea6:	f3ef 8305 	mrs	r3, IPSR
 800aeaa:	603b      	str	r3, [r7, #0]
  return(result);
 800aeac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <osKernelStart+0x1a>
    stat = osErrorISR;
 800aeb2:	f06f 0305 	mvn.w	r3, #5
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	e010      	b.n	800aedc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <osKernelStart+0x48>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d109      	bne.n	800aed6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aec2:	f7ff ffbf 	bl	800ae44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <osKernelStart+0x48>)
 800aec8:	2202      	movs	r2, #2
 800aeca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aecc:	f001 fbc4 	bl	800c658 <vTaskStartScheduler>
      stat = osOK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	607b      	str	r3, [r7, #4]
 800aed4:	e002      	b.n	800aedc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aedc:	687b      	ldr	r3, [r7, #4]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000b40 	.word	0x20000b40

0800aeec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08e      	sub	sp, #56	; 0x38
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aefc:	f3ef 8305 	mrs	r3, IPSR
 800af00:	617b      	str	r3, [r7, #20]
  return(result);
 800af02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af04:	2b00      	cmp	r3, #0
 800af06:	d17e      	bne.n	800b006 <osThreadNew+0x11a>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d07b      	beq.n	800b006 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af0e:	2380      	movs	r3, #128	; 0x80
 800af10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af12:	2318      	movs	r3, #24
 800af14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af1a:	f04f 33ff 	mov.w	r3, #4294967295
 800af1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d045      	beq.n	800afb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <osThreadNew+0x48>
        name = attr->name;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d008      	beq.n	800af5a <osThreadNew+0x6e>
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2b38      	cmp	r3, #56	; 0x38
 800af4c:	d805      	bhi.n	800af5a <osThreadNew+0x6e>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <osThreadNew+0x72>
        return (NULL);
 800af5a:	2300      	movs	r3, #0
 800af5c:	e054      	b.n	800b008 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	089b      	lsrs	r3, r3, #2
 800af6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00e      	beq.n	800af94 <osThreadNew+0xa8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	2bbb      	cmp	r3, #187	; 0xbb
 800af7c:	d90a      	bls.n	800af94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af82:	2b00      	cmp	r3, #0
 800af84:	d006      	beq.n	800af94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <osThreadNew+0xa8>
        mem = 1;
 800af8e:	2301      	movs	r3, #1
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	e010      	b.n	800afb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10c      	bne.n	800afb6 <osThreadNew+0xca>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <osThreadNew+0xca>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d104      	bne.n	800afb6 <osThreadNew+0xca>
          mem = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	61bb      	str	r3, [r7, #24]
 800afb0:	e001      	b.n	800afb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d110      	bne.n	800afde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afc4:	9202      	str	r2, [sp, #8]
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	6a3a      	ldr	r2, [r7, #32]
 800afd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f001 f8d6 	bl	800c184 <xTaskCreateStatic>
 800afd8:	4603      	mov	r3, r0
 800afda:	613b      	str	r3, [r7, #16]
 800afdc:	e013      	b.n	800b006 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d110      	bne.n	800b006 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	f107 0310 	add.w	r3, r7, #16
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f001 f921 	bl	800c23e <xTaskCreate>
 800affc:	4603      	mov	r3, r0
 800affe:	2b01      	cmp	r3, #1
 800b000:	d001      	beq.n	800b006 <osThreadNew+0x11a>
            hTask = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b006:	693b      	ldr	r3, [r7, #16]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3728      	adds	r7, #40	; 0x28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f002 fc6a 	bl	800d8f2 <pvTimerGetTimerID>
 800b01e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	6852      	ldr	r2, [r2, #4]
 800b02e:	4610      	mov	r0, r2
 800b030:	4798      	blx	r3
  }
}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08c      	sub	sp, #48	; 0x30
 800b040:	af02      	add	r7, sp, #8
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	607a      	str	r2, [r7, #4]
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	460b      	mov	r3, r1
 800b04a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b050:	f3ef 8305 	mrs	r3, IPSR
 800b054:	613b      	str	r3, [r7, #16]
  return(result);
 800b056:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d163      	bne.n	800b124 <osTimerNew+0xe8>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d060      	beq.n	800b124 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b062:	2008      	movs	r0, #8
 800b064:	f002 feb8 	bl	800ddd8 <pvPortMalloc>
 800b068:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d059      	beq.n	800b124 <osTimerNew+0xe8>
      callb->func = func;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b07c:	7afb      	ldrb	r3, [r7, #11]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	e001      	b.n	800b08c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b08c:	f04f 33ff 	mov.w	r3, #4294967295
 800b090:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01c      	beq.n	800b0d6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <osTimerNew+0x6e>
          name = attr->name;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d006      	beq.n	800b0c0 <osTimerNew+0x84>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	2b2b      	cmp	r3, #43	; 0x2b
 800b0b8:	d902      	bls.n	800b0c0 <osTimerNew+0x84>
          mem = 1;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	e00c      	b.n	800b0da <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d108      	bne.n	800b0da <osTimerNew+0x9e>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <osTimerNew+0x9e>
            mem = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61bb      	str	r3, [r7, #24]
 800b0d4:	e001      	b.n	800b0da <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d10c      	bne.n	800b0fa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	4b12      	ldr	r3, [pc, #72]	; (800b130 <osTimerNew+0xf4>)
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0f2:	f002 f856 	bl	800d1a2 <xTimerCreateStatic>
 800b0f6:	6238      	str	r0, [r7, #32]
 800b0f8:	e00b      	b.n	800b112 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d108      	bne.n	800b112 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b100:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <osTimerNew+0xf4>)
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	2101      	movs	r1, #1
 800b10a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b10c:	f002 f828 	bl	800d160 <xTimerCreate>
 800b110:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d105      	bne.n	800b124 <osTimerNew+0xe8>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <osTimerNew+0xe8>
        vPortFree (callb);
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f002 ff26 	bl	800df70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b124:	6a3b      	ldr	r3, [r7, #32]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3728      	adds	r7, #40	; 0x28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	0800b011 	.word	0x0800b011

0800b134 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af02      	add	r7, sp, #8
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b142:	f3ef 8305 	mrs	r3, IPSR
 800b146:	60fb      	str	r3, [r7, #12]
  return(result);
 800b148:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <osTimerStart+0x22>
    stat = osErrorISR;
 800b14e:	f06f 0305 	mvn.w	r3, #5
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e017      	b.n	800b186 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d103      	bne.n	800b164 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b15c:	f06f 0303 	mvn.w	r3, #3
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	e010      	b.n	800b186 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b164:	2300      	movs	r3, #0
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	2300      	movs	r3, #0
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	2104      	movs	r1, #4
 800b16e:	6938      	ldr	r0, [r7, #16]
 800b170:	f002 f890 	bl	800d294 <xTimerGenericCommand>
 800b174:	4603      	mov	r3, r0
 800b176:	2b01      	cmp	r3, #1
 800b178:	d102      	bne.n	800b180 <osTimerStart+0x4c>
      stat = osOK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e002      	b.n	800b186 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b180:	f06f 0302 	mvn.w	r3, #2
 800b184:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b186:	697b      	ldr	r3, [r7, #20]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b19c:	f3ef 8305 	mrs	r3, IPSR
 800b1a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <osTimerStop+0x20>
    stat = osErrorISR;
 800b1a8:	f06f 0305 	mvn.w	r3, #5
 800b1ac:	617b      	str	r3, [r7, #20]
 800b1ae:	e021      	b.n	800b1f4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d103      	bne.n	800b1be <osTimerStop+0x2e>
    stat = osErrorParameter;
 800b1b6:	f06f 0303 	mvn.w	r3, #3
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e01a      	b.n	800b1f4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800b1be:	6938      	ldr	r0, [r7, #16]
 800b1c0:	f002 fb6e 	bl	800d8a0 <xTimerIsTimerActive>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d103      	bne.n	800b1d2 <osTimerStop+0x42>
      stat = osErrorResource;
 800b1ca:	f06f 0302 	mvn.w	r3, #2
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	e010      	b.n	800b1f4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2103      	movs	r1, #3
 800b1dc:	6938      	ldr	r0, [r7, #16]
 800b1de:	f002 f859 	bl	800d294 <xTimerGenericCommand>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d102      	bne.n	800b1ee <osTimerStop+0x5e>
        stat = osOK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e002      	b.n	800b1f4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b1f4:	697b      	ldr	r3, [r7, #20]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b08a      	sub	sp, #40	; 0x28
 800b202:	af02      	add	r7, sp, #8
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b20e:	f3ef 8305 	mrs	r3, IPSR
 800b212:	613b      	str	r3, [r7, #16]
  return(result);
 800b214:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b216:	2b00      	cmp	r3, #0
 800b218:	d175      	bne.n	800b306 <osSemaphoreNew+0x108>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d072      	beq.n	800b306 <osSemaphoreNew+0x108>
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	429a      	cmp	r2, r3
 800b226:	d86e      	bhi.n	800b306 <osSemaphoreNew+0x108>
    mem = -1;
 800b228:	f04f 33ff 	mov.w	r3, #4294967295
 800b22c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d015      	beq.n	800b260 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <osSemaphoreNew+0x4c>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b4f      	cmp	r3, #79	; 0x4f
 800b242:	d902      	bls.n	800b24a <osSemaphoreNew+0x4c>
        mem = 1;
 800b244:	2301      	movs	r3, #1
 800b246:	61bb      	str	r3, [r7, #24]
 800b248:	e00c      	b.n	800b264 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d108      	bne.n	800b264 <osSemaphoreNew+0x66>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <osSemaphoreNew+0x66>
          mem = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	e001      	b.n	800b264 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d04c      	beq.n	800b306 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d128      	bne.n	800b2c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d10a      	bne.n	800b28e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2203      	movs	r2, #3
 800b27e:	9200      	str	r2, [sp, #0]
 800b280:	2200      	movs	r2, #0
 800b282:	2100      	movs	r1, #0
 800b284:	2001      	movs	r0, #1
 800b286:	f000 fa07 	bl	800b698 <xQueueGenericCreateStatic>
 800b28a:	61f8      	str	r0, [r7, #28]
 800b28c:	e005      	b.n	800b29a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b28e:	2203      	movs	r2, #3
 800b290:	2100      	movs	r1, #0
 800b292:	2001      	movs	r0, #1
 800b294:	f000 fa78 	bl	800b788 <xQueueGenericCreate>
 800b298:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d022      	beq.n	800b2e6 <osSemaphoreNew+0xe8>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01f      	beq.n	800b2e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	69f8      	ldr	r0, [r7, #28]
 800b2ae:	f000 fb33 	bl	800b918 <xQueueGenericSend>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d016      	beq.n	800b2e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b2b8:	69f8      	ldr	r0, [r7, #28]
 800b2ba:	f000 fda7 	bl	800be0c <vQueueDelete>
            hSemaphore = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	e010      	b.n	800b2e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d108      	bne.n	800b2dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fab5 	bl	800b842 <xQueueCreateCountingSemaphoreStatic>
 800b2d8:	61f8      	str	r0, [r7, #28]
 800b2da:	e004      	b.n	800b2e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 fae6 	bl	800b8b0 <xQueueCreateCountingSemaphore>
 800b2e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00c      	beq.n	800b306 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <osSemaphoreNew+0xfc>
          name = attr->name;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e001      	b.n	800b2fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b2fe:	6979      	ldr	r1, [r7, #20]
 800b300:	69f8      	ldr	r0, [r7, #28]
 800b302:	f000 feb7 	bl	800c074 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b306:	69fb      	ldr	r3, [r7, #28]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	; 0x28
 800b314:	af02      	add	r7, sp, #8
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b320:	f3ef 8305 	mrs	r3, IPSR
 800b324:	613b      	str	r3, [r7, #16]
  return(result);
 800b326:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d15f      	bne.n	800b3ec <osMessageQueueNew+0xdc>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d05c      	beq.n	800b3ec <osMessageQueueNew+0xdc>
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d059      	beq.n	800b3ec <osMessageQueueNew+0xdc>
    mem = -1;
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d029      	beq.n	800b398 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d012      	beq.n	800b372 <osMessageQueueNew+0x62>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	2b4f      	cmp	r3, #79	; 0x4f
 800b352:	d90e      	bls.n	800b372 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	695a      	ldr	r2, [r3, #20]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68b9      	ldr	r1, [r7, #8]
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	429a      	cmp	r2, r3
 800b36a:	d302      	bcc.n	800b372 <osMessageQueueNew+0x62>
        mem = 1;
 800b36c:	2301      	movs	r3, #1
 800b36e:	61bb      	str	r3, [r7, #24]
 800b370:	e014      	b.n	800b39c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d110      	bne.n	800b39c <osMessageQueueNew+0x8c>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10c      	bne.n	800b39c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b386:	2b00      	cmp	r3, #0
 800b388:	d108      	bne.n	800b39c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d104      	bne.n	800b39c <osMessageQueueNew+0x8c>
          mem = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	61bb      	str	r3, [r7, #24]
 800b396:	e001      	b.n	800b39c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d10b      	bne.n	800b3ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691a      	ldr	r2, [r3, #16]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	9100      	str	r1, [sp, #0]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f971 	bl	800b698 <xQueueGenericCreateStatic>
 800b3b6:	61f8      	str	r0, [r7, #28]
 800b3b8:	e008      	b.n	800b3cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 f9df 	bl	800b788 <xQueueGenericCreate>
 800b3ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00c      	beq.n	800b3ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d003      	beq.n	800b3e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e001      	b.n	800b3e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b3e4:	6979      	ldr	r1, [r7, #20]
 800b3e6:	69f8      	ldr	r0, [r7, #28]
 800b3e8:	f000 fe44 	bl	800c074 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b3ec:	69fb      	ldr	r3, [r7, #28]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3720      	adds	r7, #32
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4a07      	ldr	r2, [pc, #28]	; (800b424 <vApplicationGetIdleTaskMemory+0x2c>)
 800b408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4a06      	ldr	r2, [pc, #24]	; (800b428 <vApplicationGetIdleTaskMemory+0x30>)
 800b40e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2280      	movs	r2, #128	; 0x80
 800b414:	601a      	str	r2, [r3, #0]
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	20000b44 	.word	0x20000b44
 800b428:	20000c00 	.word	0x20000c00

0800b42c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4a07      	ldr	r2, [pc, #28]	; (800b458 <vApplicationGetTimerTaskMemory+0x2c>)
 800b43c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4a06      	ldr	r2, [pc, #24]	; (800b45c <vApplicationGetTimerTaskMemory+0x30>)
 800b442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44a:	601a      	str	r2, [r3, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	20000e00 	.word	0x20000e00
 800b45c:	20000ebc 	.word	0x20000ebc

0800b460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f103 0208 	add.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f04f 32ff 	mov.w	r2, #4294967295
 800b478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 0208 	add.w	r2, r3, #8
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f103 0208 	add.w	r2, r3, #8
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b502:	b480      	push	{r7}
 800b504:	b085      	sub	sp, #20
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d103      	bne.n	800b522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	e00c      	b.n	800b53c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3308      	adds	r3, #8
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	e002      	b.n	800b530 <vListInsert+0x2e>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d2f6      	bcs.n	800b52a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	6892      	ldr	r2, [r2, #8]
 800b58a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	6852      	ldr	r2, [r2, #4]
 800b594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d103      	bne.n	800b5a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	1e5a      	subs	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5f2:	f002 facf 	bl	800db94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b622:	3b01      	subs	r3, #1
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b628:	fb01 f303 	mul.w	r3, r1, r3
 800b62c:	441a      	add	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	22ff      	movs	r2, #255	; 0xff
 800b636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	22ff      	movs	r2, #255	; 0xff
 800b63e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d114      	bne.n	800b672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01a      	beq.n	800b686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3310      	adds	r3, #16
 800b654:	4618      	mov	r0, r3
 800b656:	f001 fa99 	bl	800cb8c <xTaskRemoveFromEventList>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d012      	beq.n	800b686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b660:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <xQueueGenericReset+0xcc>)
 800b662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	e009      	b.n	800b686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3310      	adds	r3, #16
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fef2 	bl	800b460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3324      	adds	r3, #36	; 0x24
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff feed 	bl	800b460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b686:	f002 fab5 	bl	800dbf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b68a:	2301      	movs	r3, #1
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08e      	sub	sp, #56	; 0x38
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <xQueueGenericCreateStatic+0x52>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <xQueueGenericCreateStatic+0x56>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueGenericCreateStatic+0x58>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	623b      	str	r3, [r7, #32]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <xQueueGenericCreateStatic+0x7e>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <xQueueGenericCreateStatic+0x82>
 800b716:	2301      	movs	r3, #1
 800b718:	e000      	b.n	800b71c <xQueueGenericCreateStatic+0x84>
 800b71a:	2300      	movs	r3, #0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10a      	bne.n	800b736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	61fb      	str	r3, [r7, #28]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b736:	2350      	movs	r3, #80	; 0x50
 800b738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b50      	cmp	r3, #80	; 0x50
 800b73e:	d00a      	beq.n	800b756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	61bb      	str	r3, [r7, #24]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00d      	beq.n	800b77e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b76a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	4613      	mov	r3, r2
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 f83f 	bl	800b7fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b780:	4618      	mov	r0, r3
 800b782:	3730      	adds	r7, #48	; 0x30
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	613b      	str	r3, [r7, #16]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	fb02 f303 	mul.w	r3, r2, r3
 800b7ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	3350      	adds	r3, #80	; 0x50
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f002 fb09 	bl	800ddd8 <pvPortMalloc>
 800b7c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d011      	beq.n	800b7f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	3350      	adds	r3, #80	; 0x50
 800b7d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7e0:	79fa      	ldrb	r2, [r7, #7]
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 f805 	bl	800b7fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
	}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	e002      	b.n	800b81e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b82a:	2101      	movs	r1, #1
 800b82c:	69b8      	ldr	r0, [r7, #24]
 800b82e:	f7ff fecb 	bl	800b5c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	78fa      	ldrb	r2, [r7, #3]
 800b836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b842:	b580      	push	{r7, lr}
 800b844:	b08a      	sub	sp, #40	; 0x28
 800b846:	af02      	add	r7, sp, #8
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	61bb      	str	r3, [r7, #24]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d90a      	bls.n	800b888 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	617b      	str	r3, [r7, #20]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b888:	2302      	movs	r3, #2
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	2100      	movs	r1, #0
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff ff00 	bl	800b698 <xQueueGenericCreateStatic>
 800b898:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b8a6:	69fb      	ldr	r3, [r7, #28]
	}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3720      	adds	r7, #32
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	613b      	str	r3, [r7, #16]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d90a      	bls.n	800b8f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	60fb      	str	r3, [r7, #12]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff ff45 	bl	800b788 <xQueueGenericCreate>
 800b8fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b90c:	697b      	ldr	r3, [r7, #20]
	}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08e      	sub	sp, #56	; 0x38
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b926:	2300      	movs	r3, #0
 800b928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xQueueGenericSend+0x32>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <xQueueGenericSend+0x40>
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <xQueueGenericSend+0x44>
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <xQueueGenericSend+0x46>
 800b95c:	2300      	movs	r3, #0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <xQueueGenericSend+0x60>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d103      	bne.n	800b986 <xQueueGenericSend+0x6e>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b982:	2b01      	cmp	r3, #1
 800b984:	d101      	bne.n	800b98a <xQueueGenericSend+0x72>
 800b986:	2301      	movs	r3, #1
 800b988:	e000      	b.n	800b98c <xQueueGenericSend+0x74>
 800b98a:	2300      	movs	r3, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	623b      	str	r3, [r7, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9a6:	f001 fab3 	bl	800cf10 <xTaskGetSchedulerState>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <xQueueGenericSend+0x9e>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <xQueueGenericSend+0xa2>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e000      	b.n	800b9bc <xQueueGenericSend+0xa4>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	61fb      	str	r3, [r7, #28]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9d6:	f002 f8dd 	bl	800db94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d302      	bcc.n	800b9ec <xQueueGenericSend+0xd4>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d129      	bne.n	800ba40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9f2:	f000 fa2e 	bl	800be52 <prvCopyDataToQueue>
 800b9f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d010      	beq.n	800ba22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	3324      	adds	r3, #36	; 0x24
 800ba04:	4618      	mov	r0, r3
 800ba06:	f001 f8c1 	bl	800cb8c <xTaskRemoveFromEventList>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d013      	beq.n	800ba38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba10:	4b3f      	ldr	r3, [pc, #252]	; (800bb10 <xQueueGenericSend+0x1f8>)
 800ba12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	e00a      	b.n	800ba38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba28:	4b39      	ldr	r3, [pc, #228]	; (800bb10 <xQueueGenericSend+0x1f8>)
 800ba2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba38:	f002 f8dc 	bl	800dbf4 <vPortExitCritical>
				return pdPASS;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e063      	b.n	800bb08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d103      	bne.n	800ba4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba46:	f002 f8d5 	bl	800dbf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e05c      	b.n	800bb08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d106      	bne.n	800ba62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba54:	f107 0314 	add.w	r3, r7, #20
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 f8fb 	bl	800cc54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba62:	f002 f8c7 	bl	800dbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba66:	f000 fe67 	bl	800c738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba6a:	f002 f893 	bl	800db94 <vPortEnterCritical>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba74:	b25b      	sxtb	r3, r3
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d103      	bne.n	800ba84 <xQueueGenericSend+0x16c>
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba8a:	b25b      	sxtb	r3, r3
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba90:	d103      	bne.n	800ba9a <xQueueGenericSend+0x182>
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba9a:	f002 f8ab 	bl	800dbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba9e:	1d3a      	adds	r2, r7, #4
 800baa0:	f107 0314 	add.w	r3, r7, #20
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 f8ea 	bl	800cc80 <xTaskCheckForTimeOut>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d124      	bne.n	800bafc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab4:	f000 fac5 	bl	800c042 <prvIsQueueFull>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d018      	beq.n	800baf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	3310      	adds	r3, #16
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 f810 	bl	800caec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bace:	f000 fa50 	bl	800bf72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bad2:	f000 fe3f 	bl	800c754 <xTaskResumeAll>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f af7c 	bne.w	800b9d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bade:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <xQueueGenericSend+0x1f8>)
 800bae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	e772      	b.n	800b9d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800baf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf2:	f000 fa3e 	bl	800bf72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baf6:	f000 fe2d 	bl	800c754 <xTaskResumeAll>
 800bafa:	e76c      	b.n	800b9d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bafc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bafe:	f000 fa38 	bl	800bf72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb02:	f000 fe27 	bl	800c754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3738      	adds	r7, #56	; 0x38
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b090      	sub	sp, #64	; 0x40
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb3e:	bf00      	nop
 800bb40:	e7fe      	b.n	800bb40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <xQueueGenericSendFromISR+0x3c>
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <xQueueGenericSendFromISR+0x40>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <xQueueGenericSendFromISR+0x42>
 800bb54:	2300      	movs	r3, #0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb6c:	bf00      	nop
 800bb6e:	e7fe      	b.n	800bb6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d103      	bne.n	800bb7e <xQueueGenericSendFromISR+0x6a>
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d101      	bne.n	800bb82 <xQueueGenericSendFromISR+0x6e>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <xQueueGenericSendFromISR+0x70>
 800bb82:	2300      	movs	r3, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	623b      	str	r3, [r7, #32]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb9e:	f002 f8db 	bl	800dd58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bba2:	f3ef 8211 	mrs	r2, BASEPRI
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	61fa      	str	r2, [r7, #28]
 800bbb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d302      	bcc.n	800bbd0 <xQueueGenericSendFromISR+0xbc>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d12f      	bne.n	800bc30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbe6:	f000 f934 	bl	800be52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf2:	d112      	bne.n	800bc1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d016      	beq.n	800bc2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	3324      	adds	r3, #36	; 0x24
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 ffc3 	bl	800cb8c <xTaskRemoveFromEventList>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00b      	beq.n	800bc2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	e007      	b.n	800bc2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	b25a      	sxtb	r2, r3
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc2e:	e001      	b.n	800bc34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc30:	2300      	movs	r3, #0
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3740      	adds	r7, #64	; 0x40
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08c      	sub	sp, #48	; 0x30
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10a      	bne.n	800bc7c <xQueueReceive+0x30>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	623b      	str	r3, [r7, #32]
}
 800bc78:	bf00      	nop
 800bc7a:	e7fe      	b.n	800bc7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d103      	bne.n	800bc8a <xQueueReceive+0x3e>
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <xQueueReceive+0x42>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <xQueueReceive+0x44>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10a      	bne.n	800bcaa <xQueueReceive+0x5e>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	61fb      	str	r3, [r7, #28]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcaa:	f001 f931 	bl	800cf10 <xTaskGetSchedulerState>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <xQueueReceive+0x6e>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <xQueueReceive+0x72>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <xQueueReceive+0x74>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xQueueReceive+0x8e>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	61bb      	str	r3, [r7, #24]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcda:	f001 ff5b 	bl	800db94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d01f      	beq.n	800bd2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcee:	f000 f91a 	bl	800bf26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf4:	1e5a      	subs	r2, r3, #1
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00f      	beq.n	800bd22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	3310      	adds	r3, #16
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 ff40 	bl	800cb8c <xTaskRemoveFromEventList>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d007      	beq.n	800bd22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd12:	4b3d      	ldr	r3, [pc, #244]	; (800be08 <xQueueReceive+0x1bc>)
 800bd14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd22:	f001 ff67 	bl	800dbf4 <vPortExitCritical>
				return pdPASS;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e069      	b.n	800bdfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d103      	bne.n	800bd38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd30:	f001 ff60 	bl	800dbf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd34:	2300      	movs	r3, #0
 800bd36:	e062      	b.n	800bdfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd3e:	f107 0310 	add.w	r3, r7, #16
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 ff86 	bl	800cc54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd4c:	f001 ff52 	bl	800dbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd50:	f000 fcf2 	bl	800c738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd54:	f001 ff1e 	bl	800db94 <vPortEnterCritical>
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd5e:	b25b      	sxtb	r3, r3
 800bd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd64:	d103      	bne.n	800bd6e <xQueueReceive+0x122>
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd74:	b25b      	sxtb	r3, r3
 800bd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7a:	d103      	bne.n	800bd84 <xQueueReceive+0x138>
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd84:	f001 ff36 	bl	800dbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd88:	1d3a      	adds	r2, r7, #4
 800bd8a:	f107 0310 	add.w	r3, r7, #16
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 ff75 	bl	800cc80 <xTaskCheckForTimeOut>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d123      	bne.n	800bde4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9e:	f000 f93a 	bl	800c016 <prvIsQueueEmpty>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d017      	beq.n	800bdd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	3324      	adds	r3, #36	; 0x24
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fe9b 	bl	800caec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb8:	f000 f8db 	bl	800bf72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdbc:	f000 fcca 	bl	800c754 <xTaskResumeAll>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d189      	bne.n	800bcda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bdc6:	4b10      	ldr	r3, [pc, #64]	; (800be08 <xQueueReceive+0x1bc>)
 800bdc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	e780      	b.n	800bcda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdda:	f000 f8ca 	bl	800bf72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdde:	f000 fcb9 	bl	800c754 <xTaskResumeAll>
 800bde2:	e77a      	b.n	800bcda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bde4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde6:	f000 f8c4 	bl	800bf72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdea:	f000 fcb3 	bl	800c754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf0:	f000 f911 	bl	800c016 <prvIsQueueEmpty>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f43f af6f 	beq.w	800bcda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3730      	adds	r7, #48	; 0x30
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <vQueueDelete+0x28>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	60bb      	str	r3, [r7, #8]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 f947 	bl	800c0c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f002 f893 	bl	800df70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	60b9      	str	r1, [r7, #8]
 800be5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10d      	bne.n	800be8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d14d      	bne.n	800bf14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f001 f865 	bl	800cf4c <xTaskPriorityDisinherit>
 800be82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	609a      	str	r2, [r3, #8]
 800be8a:	e043      	b.n	800bf14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d119      	bne.n	800bec6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6858      	ldr	r0, [r3, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9a:	461a      	mov	r2, r3
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	f002 fab9 	bl	800e414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	441a      	add	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d32b      	bcc.n	800bf14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	605a      	str	r2, [r3, #4]
 800bec4:	e026      	b.n	800bf14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	68d8      	ldr	r0, [r3, #12]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	461a      	mov	r2, r3
 800bed0:	68b9      	ldr	r1, [r7, #8]
 800bed2:	f002 fa9f 	bl	800e414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bede:	425b      	negs	r3, r3
 800bee0:	441a      	add	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d207      	bcs.n	800bf02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befa:	425b      	negs	r3, r3
 800befc:	441a      	add	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d105      	bne.n	800bf14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf1c:	697b      	ldr	r3, [r7, #20]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d018      	beq.n	800bf6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf40:	441a      	add	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d303      	bcc.n	800bf5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	68d9      	ldr	r1, [r3, #12]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	461a      	mov	r2, r3
 800bf64:	6838      	ldr	r0, [r7, #0]
 800bf66:	f002 fa55 	bl	800e414 <memcpy>
	}
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf7a:	f001 fe0b 	bl	800db94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf86:	e011      	b.n	800bfac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d012      	beq.n	800bfb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3324      	adds	r3, #36	; 0x24
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 fdf9 	bl	800cb8c <xTaskRemoveFromEventList>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfa0:	f000 fed0 	bl	800cd44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dce9      	bgt.n	800bf88 <prvUnlockQueue+0x16>
 800bfb4:	e000      	b.n	800bfb8 <prvUnlockQueue+0x46>
					break;
 800bfb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	22ff      	movs	r2, #255	; 0xff
 800bfbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfc0:	f001 fe18 	bl	800dbf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfc4:	f001 fde6 	bl	800db94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfd0:	e011      	b.n	800bff6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d012      	beq.n	800c000 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3310      	adds	r3, #16
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 fdd4 	bl	800cb8c <xTaskRemoveFromEventList>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bfea:	f000 feab 	bl	800cd44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dce9      	bgt.n	800bfd2 <prvUnlockQueue+0x60>
 800bffe:	e000      	b.n	800c002 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c000:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	22ff      	movs	r2, #255	; 0xff
 800c006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c00a:	f001 fdf3 	bl	800dbf4 <vPortExitCritical>
}
 800c00e:	bf00      	nop
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c01e:	f001 fdb9 	bl	800db94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c02a:	2301      	movs	r3, #1
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	e001      	b.n	800c034 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c034:	f001 fdde 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800c038:	68fb      	ldr	r3, [r7, #12]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c04a:	f001 fda3 	bl	800db94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	429a      	cmp	r2, r3
 800c058:	d102      	bne.n	800c060 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c05a:	2301      	movs	r3, #1
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	e001      	b.n	800c064 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c060:	2300      	movs	r3, #0
 800c062:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c064:	f001 fdc6 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c07e:	2300      	movs	r3, #0
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	e014      	b.n	800c0ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c084:	4a0f      	ldr	r2, [pc, #60]	; (800c0c4 <vQueueAddToRegistry+0x50>)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10b      	bne.n	800c0a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c090:	490c      	ldr	r1, [pc, #48]	; (800c0c4 <vQueueAddToRegistry+0x50>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c09a:	4a0a      	ldr	r2, [pc, #40]	; (800c0c4 <vQueueAddToRegistry+0x50>)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0a6:	e006      	b.n	800c0b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b07      	cmp	r3, #7
 800c0b2:	d9e7      	bls.n	800c084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	200012bc 	.word	0x200012bc

0800c0c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e016      	b.n	800c104 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0d6:	4a10      	ldr	r2, [pc, #64]	; (800c118 <vQueueUnregisterQueue+0x50>)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	4413      	add	r3, r2
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d10b      	bne.n	800c0fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0e6:	4a0c      	ldr	r2, [pc, #48]	; (800c118 <vQueueUnregisterQueue+0x50>)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0f0:	4a09      	ldr	r2, [pc, #36]	; (800c118 <vQueueUnregisterQueue+0x50>)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	605a      	str	r2, [r3, #4]
				break;
 800c0fc:	e006      	b.n	800c10c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	3301      	adds	r3, #1
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b07      	cmp	r3, #7
 800c108:	d9e5      	bls.n	800c0d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c10a:	bf00      	nop
 800c10c:	bf00      	nop
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	200012bc 	.word	0x200012bc

0800c11c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c12c:	f001 fd32 	bl	800db94 <vPortEnterCritical>
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c136:	b25b      	sxtb	r3, r3
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13c:	d103      	bne.n	800c146 <vQueueWaitForMessageRestricted+0x2a>
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c14c:	b25b      	sxtb	r3, r3
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d103      	bne.n	800c15c <vQueueWaitForMessageRestricted+0x40>
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c15c:	f001 fd4a 	bl	800dbf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	3324      	adds	r3, #36	; 0x24
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fcdf 	bl	800cb34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c176:	6978      	ldr	r0, [r7, #20]
 800c178:	f7ff fefb 	bl	800bf72 <prvUnlockQueue>
	}
 800c17c:	bf00      	nop
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08e      	sub	sp, #56	; 0x38
 800c188:	af04      	add	r7, sp, #16
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10a      	bne.n	800c1ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	623b      	str	r3, [r7, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <xTaskCreateStatic+0x46>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	61fb      	str	r3, [r7, #28]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1ca:	23bc      	movs	r3, #188	; 0xbc
 800c1cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2bbc      	cmp	r3, #188	; 0xbc
 800c1d2:	d00a      	beq.n	800c1ea <xTaskCreateStatic+0x66>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	61bb      	str	r3, [r7, #24]
}
 800c1e6:	bf00      	nop
 800c1e8:	e7fe      	b.n	800c1e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01e      	beq.n	800c230 <xTaskCreateStatic+0xac>
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01b      	beq.n	800c230 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c200:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	2202      	movs	r2, #2
 800c206:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c20a:	2300      	movs	r3, #0
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	9302      	str	r3, [sp, #8]
 800c212:	f107 0314 	add.w	r3, r7, #20
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 f850 	bl	800c2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c22a:	f000 f8f3 	bl	800c414 <prvAddNewTaskToReadyList>
 800c22e:	e001      	b.n	800c234 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c234:	697b      	ldr	r3, [r7, #20]
	}
 800c236:	4618      	mov	r0, r3
 800c238:	3728      	adds	r7, #40	; 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b08c      	sub	sp, #48	; 0x30
 800c242:	af04      	add	r7, sp, #16
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	60b9      	str	r1, [r7, #8]
 800c248:	603b      	str	r3, [r7, #0]
 800c24a:	4613      	mov	r3, r2
 800c24c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c24e:	88fb      	ldrh	r3, [r7, #6]
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4618      	mov	r0, r3
 800c254:	f001 fdc0 	bl	800ddd8 <pvPortMalloc>
 800c258:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00e      	beq.n	800c27e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c260:	20bc      	movs	r0, #188	; 0xbc
 800c262:	f001 fdb9 	bl	800ddd8 <pvPortMalloc>
 800c266:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
 800c274:	e005      	b.n	800c282 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c276:	6978      	ldr	r0, [r7, #20]
 800c278:	f001 fe7a 	bl	800df70 <vPortFree>
 800c27c:	e001      	b.n	800c282 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d017      	beq.n	800c2b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c290:	88fa      	ldrh	r2, [r7, #6]
 800c292:	2300      	movs	r3, #0
 800c294:	9303      	str	r3, [sp, #12]
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	9302      	str	r3, [sp, #8]
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f000 f80e 	bl	800c2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2ac:	69f8      	ldr	r0, [r7, #28]
 800c2ae:	f000 f8b1 	bl	800c414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	e002      	b.n	800c2be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2be:	69bb      	ldr	r3, [r7, #24]
	}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3720      	adds	r7, #32
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	461a      	mov	r2, r3
 800c2e0:	21a5      	movs	r1, #165	; 0xa5
 800c2e2:	f002 f8a5 	bl	800e430 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	617b      	str	r3, [r7, #20]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d01f      	beq.n	800c366 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c326:	2300      	movs	r3, #0
 800c328:	61fb      	str	r3, [r7, #28]
 800c32a:	e012      	b.n	800c352 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	4413      	add	r3, r2
 800c332:	7819      	ldrb	r1, [r3, #0]
 800c334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	4413      	add	r3, r2
 800c33a:	3334      	adds	r3, #52	; 0x34
 800c33c:	460a      	mov	r2, r1
 800c33e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d006      	beq.n	800c35a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	3301      	adds	r3, #1
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	2b0f      	cmp	r3, #15
 800c356:	d9e9      	bls.n	800c32c <prvInitialiseNewTask+0x64>
 800c358:	e000      	b.n	800c35c <prvInitialiseNewTask+0x94>
			{
				break;
 800c35a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c364:	e003      	b.n	800c36e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	2b37      	cmp	r3, #55	; 0x37
 800c372:	d901      	bls.n	800c378 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c374:	2337      	movs	r3, #55	; 0x37
 800c376:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c37c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c382:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	2200      	movs	r2, #0
 800c388:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	3304      	adds	r3, #4
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff f886 	bl	800b4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	3318      	adds	r3, #24
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff f881 	bl	800b4a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	3354      	adds	r3, #84	; 0x54
 800c3c8:	2260      	movs	r2, #96	; 0x60
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f002 f82f 	bl	800e430 <memset>
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	4a0c      	ldr	r2, [pc, #48]	; (800c408 <prvInitialiseNewTask+0x140>)
 800c3d6:	659a      	str	r2, [r3, #88]	; 0x58
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	4a0c      	ldr	r2, [pc, #48]	; (800c40c <prvInitialiseNewTask+0x144>)
 800c3dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	4a0b      	ldr	r2, [pc, #44]	; (800c410 <prvInitialiseNewTask+0x148>)
 800c3e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	68f9      	ldr	r1, [r7, #12]
 800c3e8:	69b8      	ldr	r0, [r7, #24]
 800c3ea:	f001 faa3 	bl	800d934 <pxPortInitialiseStack>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d002      	beq.n	800c400 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c400:	bf00      	nop
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	08012134 	.word	0x08012134
 800c40c:	08012154 	.word	0x08012154
 800c410:	08012114 	.word	0x08012114

0800c414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c41c:	f001 fbba 	bl	800db94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c420:	4b2d      	ldr	r3, [pc, #180]	; (800c4d8 <prvAddNewTaskToReadyList+0xc4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	4a2c      	ldr	r2, [pc, #176]	; (800c4d8 <prvAddNewTaskToReadyList+0xc4>)
 800c428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c42a:	4b2c      	ldr	r3, [pc, #176]	; (800c4dc <prvAddNewTaskToReadyList+0xc8>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d109      	bne.n	800c446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c432:	4a2a      	ldr	r2, [pc, #168]	; (800c4dc <prvAddNewTaskToReadyList+0xc8>)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c438:	4b27      	ldr	r3, [pc, #156]	; (800c4d8 <prvAddNewTaskToReadyList+0xc4>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d110      	bne.n	800c462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c440:	f000 fca4 	bl	800cd8c <prvInitialiseTaskLists>
 800c444:	e00d      	b.n	800c462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c446:	4b26      	ldr	r3, [pc, #152]	; (800c4e0 <prvAddNewTaskToReadyList+0xcc>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c44e:	4b23      	ldr	r3, [pc, #140]	; (800c4dc <prvAddNewTaskToReadyList+0xc8>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c458:	429a      	cmp	r2, r3
 800c45a:	d802      	bhi.n	800c462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c45c:	4a1f      	ldr	r2, [pc, #124]	; (800c4dc <prvAddNewTaskToReadyList+0xc8>)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c462:	4b20      	ldr	r3, [pc, #128]	; (800c4e4 <prvAddNewTaskToReadyList+0xd0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3301      	adds	r3, #1
 800c468:	4a1e      	ldr	r2, [pc, #120]	; (800c4e4 <prvAddNewTaskToReadyList+0xd0>)
 800c46a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c46c:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <prvAddNewTaskToReadyList+0xd0>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c478:	4b1b      	ldr	r3, [pc, #108]	; (800c4e8 <prvAddNewTaskToReadyList+0xd4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d903      	bls.n	800c488 <prvAddNewTaskToReadyList+0x74>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	4a18      	ldr	r2, [pc, #96]	; (800c4e8 <prvAddNewTaskToReadyList+0xd4>)
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48c:	4613      	mov	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4a15      	ldr	r2, [pc, #84]	; (800c4ec <prvAddNewTaskToReadyList+0xd8>)
 800c496:	441a      	add	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3304      	adds	r3, #4
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	f7ff f80b 	bl	800b4ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4a4:	f001 fba6 	bl	800dbf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4a8:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <prvAddNewTaskToReadyList+0xcc>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00e      	beq.n	800c4ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <prvAddNewTaskToReadyList+0xc8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d207      	bcs.n	800c4ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4be:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <prvAddNewTaskToReadyList+0xdc>)
 800c4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200017d0 	.word	0x200017d0
 800c4dc:	200012fc 	.word	0x200012fc
 800c4e0:	200017dc 	.word	0x200017dc
 800c4e4:	200017ec 	.word	0x200017ec
 800c4e8:	200017d8 	.word	0x200017d8
 800c4ec:	20001300 	.word	0x20001300
 800c4f0:	e000ed04 	.word	0xe000ed04

0800c4f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <vTaskDelayUntil+0x2a>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	617b      	str	r3, [r7, #20]
}
 800c51a:	bf00      	nop
 800c51c:	e7fe      	b.n	800c51c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <vTaskDelayUntil+0x46>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	613b      	str	r3, [r7, #16]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c53a:	4b2a      	ldr	r3, [pc, #168]	; (800c5e4 <vTaskDelayUntil+0xf0>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00a      	beq.n	800c558 <vTaskDelayUntil+0x64>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60fb      	str	r3, [r7, #12]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c558:	f000 f8ee 	bl	800c738 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c55c:	4b22      	ldr	r3, [pc, #136]	; (800c5e8 <vTaskDelayUntil+0xf4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	4413      	add	r3, r2
 800c56a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6a3a      	ldr	r2, [r7, #32]
 800c572:	429a      	cmp	r2, r3
 800c574:	d20b      	bcs.n	800c58e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	69fa      	ldr	r2, [r7, #28]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d211      	bcs.n	800c5a4 <vTaskDelayUntil+0xb0>
 800c580:	69fa      	ldr	r2, [r7, #28]
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	429a      	cmp	r2, r3
 800c586:	d90d      	bls.n	800c5a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c588:	2301      	movs	r3, #1
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
 800c58c:	e00a      	b.n	800c5a4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69fa      	ldr	r2, [r7, #28]
 800c594:	429a      	cmp	r2, r3
 800c596:	d303      	bcc.n	800c5a0 <vTaskDelayUntil+0xac>
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d901      	bls.n	800c5a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69fa      	ldr	r2, [r7, #28]
 800c5a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d006      	beq.n	800c5be <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 fd35 	bl	800d028 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c5be:	f000 f8c9 	bl	800c754 <xTaskResumeAll>
 800c5c2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c5ca:	4b08      	ldr	r3, [pc, #32]	; (800c5ec <vTaskDelayUntil+0xf8>)
 800c5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5da:	bf00      	nop
 800c5dc:	3728      	adds	r7, #40	; 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	200017f8 	.word	0x200017f8
 800c5e8:	200017d4 	.word	0x200017d4
 800c5ec:	e000ed04 	.word	0xe000ed04

0800c5f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d017      	beq.n	800c632 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <vTaskDelay+0x60>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <vTaskDelay+0x30>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	60bb      	str	r3, [r7, #8]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c620:	f000 f88a 	bl	800c738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c624:	2100      	movs	r1, #0
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fcfe 	bl	800d028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c62c:	f000 f892 	bl	800c754 <xTaskResumeAll>
 800c630:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d107      	bne.n	800c648 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <vTaskDelay+0x64>)
 800c63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	200017f8 	.word	0x200017f8
 800c654:	e000ed04 	.word	0xe000ed04

0800c658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c666:	463a      	mov	r2, r7
 800c668:	1d39      	adds	r1, r7, #4
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fec2 	bl	800b3f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	9202      	str	r2, [sp, #8]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	2300      	movs	r3, #0
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	2300      	movs	r3, #0
 800c684:	460a      	mov	r2, r1
 800c686:	4924      	ldr	r1, [pc, #144]	; (800c718 <vTaskStartScheduler+0xc0>)
 800c688:	4824      	ldr	r0, [pc, #144]	; (800c71c <vTaskStartScheduler+0xc4>)
 800c68a:	f7ff fd7b 	bl	800c184 <xTaskCreateStatic>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a23      	ldr	r2, [pc, #140]	; (800c720 <vTaskStartScheduler+0xc8>)
 800c692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c694:	4b22      	ldr	r3, [pc, #136]	; (800c720 <vTaskStartScheduler+0xc8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e001      	b.n	800c6a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d102      	bne.n	800c6b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6ac:	f000 fd10 	bl	800d0d0 <xTimerCreateTimerTask>
 800c6b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d11b      	bne.n	800c6f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	613b      	str	r3, [r7, #16]
}
 800c6ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6cc:	4b15      	ldr	r3, [pc, #84]	; (800c724 <vTaskStartScheduler+0xcc>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3354      	adds	r3, #84	; 0x54
 800c6d2:	4a15      	ldr	r2, [pc, #84]	; (800c728 <vTaskStartScheduler+0xd0>)
 800c6d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6d6:	4b15      	ldr	r3, [pc, #84]	; (800c72c <vTaskStartScheduler+0xd4>)
 800c6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6de:	4b14      	ldr	r3, [pc, #80]	; (800c730 <vTaskStartScheduler+0xd8>)
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6e4:	4b13      	ldr	r3, [pc, #76]	; (800c734 <vTaskStartScheduler+0xdc>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6ea:	f001 f9b1 	bl	800da50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6ee:	e00e      	b.n	800c70e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d10a      	bne.n	800c70e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	60fb      	str	r3, [r7, #12]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <vTaskStartScheduler+0xb4>
}
 800c70e:	bf00      	nop
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	08011edc 	.word	0x08011edc
 800c71c:	0800cd5d 	.word	0x0800cd5d
 800c720:	200017f4 	.word	0x200017f4
 800c724:	200012fc 	.word	0x200012fc
 800c728:	20000184 	.word	0x20000184
 800c72c:	200017f0 	.word	0x200017f0
 800c730:	200017dc 	.word	0x200017dc
 800c734:	200017d4 	.word	0x200017d4

0800c738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c738:	b480      	push	{r7}
 800c73a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <vTaskSuspendAll+0x18>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	4a03      	ldr	r2, [pc, #12]	; (800c750 <vTaskSuspendAll+0x18>)
 800c744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c746:	bf00      	nop
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	200017f8 	.word	0x200017f8

0800c754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c75a:	2300      	movs	r3, #0
 800c75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c75e:	2300      	movs	r3, #0
 800c760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c762:	4b42      	ldr	r3, [pc, #264]	; (800c86c <xTaskResumeAll+0x118>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <xTaskResumeAll+0x2c>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	603b      	str	r3, [r7, #0]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c780:	f001 fa08 	bl	800db94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c784:	4b39      	ldr	r3, [pc, #228]	; (800c86c <xTaskResumeAll+0x118>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3b01      	subs	r3, #1
 800c78a:	4a38      	ldr	r2, [pc, #224]	; (800c86c <xTaskResumeAll+0x118>)
 800c78c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c78e:	4b37      	ldr	r3, [pc, #220]	; (800c86c <xTaskResumeAll+0x118>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d162      	bne.n	800c85c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c796:	4b36      	ldr	r3, [pc, #216]	; (800c870 <xTaskResumeAll+0x11c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d05e      	beq.n	800c85c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c79e:	e02f      	b.n	800c800 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a0:	4b34      	ldr	r3, [pc, #208]	; (800c874 <xTaskResumeAll+0x120>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3318      	adds	r3, #24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe fee1 	bl	800b574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe fedc 	bl	800b574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <xTaskResumeAll+0x124>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d903      	bls.n	800c7d0 <xTaskResumeAll+0x7c>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	4a2a      	ldr	r2, [pc, #168]	; (800c878 <xTaskResumeAll+0x124>)
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4a27      	ldr	r2, [pc, #156]	; (800c87c <xTaskResumeAll+0x128>)
 800c7de:	441a      	add	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7fe fe67 	bl	800b4ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f0:	4b23      	ldr	r3, [pc, #140]	; (800c880 <xTaskResumeAll+0x12c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d302      	bcc.n	800c800 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c7fa:	4b22      	ldr	r3, [pc, #136]	; (800c884 <xTaskResumeAll+0x130>)
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c800:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <xTaskResumeAll+0x120>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1cb      	bne.n	800c7a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c80e:	f000 fb5f 	bl	800ced0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c812:	4b1d      	ldr	r3, [pc, #116]	; (800c888 <xTaskResumeAll+0x134>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d010      	beq.n	800c840 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c81e:	f000 f847 	bl	800c8b0 <xTaskIncrementTick>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c828:	4b16      	ldr	r3, [pc, #88]	; (800c884 <xTaskResumeAll+0x130>)
 800c82a:	2201      	movs	r2, #1
 800c82c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3b01      	subs	r3, #1
 800c832:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1f1      	bne.n	800c81e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c83a:	4b13      	ldr	r3, [pc, #76]	; (800c888 <xTaskResumeAll+0x134>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c840:	4b10      	ldr	r3, [pc, #64]	; (800c884 <xTaskResumeAll+0x130>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d009      	beq.n	800c85c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c848:	2301      	movs	r3, #1
 800c84a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <xTaskResumeAll+0x138>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c85c:	f001 f9ca 	bl	800dbf4 <vPortExitCritical>

	return xAlreadyYielded;
 800c860:	68bb      	ldr	r3, [r7, #8]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200017f8 	.word	0x200017f8
 800c870:	200017d0 	.word	0x200017d0
 800c874:	20001790 	.word	0x20001790
 800c878:	200017d8 	.word	0x200017d8
 800c87c:	20001300 	.word	0x20001300
 800c880:	200012fc 	.word	0x200012fc
 800c884:	200017e4 	.word	0x200017e4
 800c888:	200017e0 	.word	0x200017e0
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c896:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <xTaskGetTickCount+0x1c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c89c:	687b      	ldr	r3, [r7, #4]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	200017d4 	.word	0x200017d4

0800c8b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8ba:	4b4f      	ldr	r3, [pc, #316]	; (800c9f8 <xTaskIncrementTick+0x148>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f040 808f 	bne.w	800c9e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8c4:	4b4d      	ldr	r3, [pc, #308]	; (800c9fc <xTaskIncrementTick+0x14c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8cc:	4a4b      	ldr	r2, [pc, #300]	; (800c9fc <xTaskIncrementTick+0x14c>)
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d120      	bne.n	800c91a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8d8:	4b49      	ldr	r3, [pc, #292]	; (800ca00 <xTaskIncrementTick+0x150>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	603b      	str	r3, [r7, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <xTaskIncrementTick+0x46>
 800c8f8:	4b41      	ldr	r3, [pc, #260]	; (800ca00 <xTaskIncrementTick+0x150>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	4b41      	ldr	r3, [pc, #260]	; (800ca04 <xTaskIncrementTick+0x154>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a3f      	ldr	r2, [pc, #252]	; (800ca00 <xTaskIncrementTick+0x150>)
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	4a3f      	ldr	r2, [pc, #252]	; (800ca04 <xTaskIncrementTick+0x154>)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	4b3e      	ldr	r3, [pc, #248]	; (800ca08 <xTaskIncrementTick+0x158>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3301      	adds	r3, #1
 800c912:	4a3d      	ldr	r2, [pc, #244]	; (800ca08 <xTaskIncrementTick+0x158>)
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	f000 fadb 	bl	800ced0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c91a:	4b3c      	ldr	r3, [pc, #240]	; (800ca0c <xTaskIncrementTick+0x15c>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	429a      	cmp	r2, r3
 800c922:	d349      	bcc.n	800c9b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c924:	4b36      	ldr	r3, [pc, #216]	; (800ca00 <xTaskIncrementTick+0x150>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d104      	bne.n	800c938 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c92e:	4b37      	ldr	r3, [pc, #220]	; (800ca0c <xTaskIncrementTick+0x15c>)
 800c930:	f04f 32ff 	mov.w	r2, #4294967295
 800c934:	601a      	str	r2, [r3, #0]
					break;
 800c936:	e03f      	b.n	800c9b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c938:	4b31      	ldr	r3, [pc, #196]	; (800ca00 <xTaskIncrementTick+0x150>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d203      	bcs.n	800c958 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c950:	4a2e      	ldr	r2, [pc, #184]	; (800ca0c <xTaskIncrementTick+0x15c>)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c956:	e02f      	b.n	800c9b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	3304      	adds	r3, #4
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fe09 	bl	800b574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c966:	2b00      	cmp	r3, #0
 800c968:	d004      	beq.n	800c974 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	3318      	adds	r3, #24
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fe00 	bl	800b574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4b25      	ldr	r3, [pc, #148]	; (800ca10 <xTaskIncrementTick+0x160>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d903      	bls.n	800c988 <xTaskIncrementTick+0xd8>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	4a22      	ldr	r2, [pc, #136]	; (800ca10 <xTaskIncrementTick+0x160>)
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4a1f      	ldr	r2, [pc, #124]	; (800ca14 <xTaskIncrementTick+0x164>)
 800c996:	441a      	add	r2, r3
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fe fd8b 	bl	800b4ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ca18 <xTaskIncrementTick+0x168>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d3b8      	bcc.n	800c924 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9b6:	e7b5      	b.n	800c924 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9b8:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <xTaskIncrementTick+0x168>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	4915      	ldr	r1, [pc, #84]	; (800ca14 <xTaskIncrementTick+0x164>)
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	440b      	add	r3, r1
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d901      	bls.n	800c9d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c9d4:	4b11      	ldr	r3, [pc, #68]	; (800ca1c <xTaskIncrementTick+0x16c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d007      	beq.n	800c9ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	e004      	b.n	800c9ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <xTaskIncrementTick+0x170>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	4a0d      	ldr	r2, [pc, #52]	; (800ca20 <xTaskIncrementTick+0x170>)
 800c9ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c9ec:	697b      	ldr	r3, [r7, #20]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3718      	adds	r7, #24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	200017f8 	.word	0x200017f8
 800c9fc:	200017d4 	.word	0x200017d4
 800ca00:	20001788 	.word	0x20001788
 800ca04:	2000178c 	.word	0x2000178c
 800ca08:	200017e8 	.word	0x200017e8
 800ca0c:	200017f0 	.word	0x200017f0
 800ca10:	200017d8 	.word	0x200017d8
 800ca14:	20001300 	.word	0x20001300
 800ca18:	200012fc 	.word	0x200012fc
 800ca1c:	200017e4 	.word	0x200017e4
 800ca20:	200017e0 	.word	0x200017e0

0800ca24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca2a:	4b2a      	ldr	r3, [pc, #168]	; (800cad4 <vTaskSwitchContext+0xb0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca32:	4b29      	ldr	r3, [pc, #164]	; (800cad8 <vTaskSwitchContext+0xb4>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca38:	e046      	b.n	800cac8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ca3a:	4b27      	ldr	r3, [pc, #156]	; (800cad8 <vTaskSwitchContext+0xb4>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca40:	4b26      	ldr	r3, [pc, #152]	; (800cadc <vTaskSwitchContext+0xb8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	e010      	b.n	800ca6a <vTaskSwitchContext+0x46>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <vTaskSwitchContext+0x40>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <vTaskSwitchContext+0x3e>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	491d      	ldr	r1, [pc, #116]	; (800cae0 <vTaskSwitchContext+0xbc>)
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0e4      	beq.n	800ca48 <vTaskSwitchContext+0x24>
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4a15      	ldr	r2, [pc, #84]	; (800cae0 <vTaskSwitchContext+0xbc>)
 800ca8a:	4413      	add	r3, r2
 800ca8c:	60bb      	str	r3, [r7, #8]
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	685a      	ldr	r2, [r3, #4]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	605a      	str	r2, [r3, #4]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	3308      	adds	r3, #8
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d104      	bne.n	800caae <vTaskSwitchContext+0x8a>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	605a      	str	r2, [r3, #4]
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	4a0b      	ldr	r2, [pc, #44]	; (800cae4 <vTaskSwitchContext+0xc0>)
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	4a08      	ldr	r2, [pc, #32]	; (800cadc <vTaskSwitchContext+0xb8>)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cabe:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <vTaskSwitchContext+0xc0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3354      	adds	r3, #84	; 0x54
 800cac4:	4a08      	ldr	r2, [pc, #32]	; (800cae8 <vTaskSwitchContext+0xc4>)
 800cac6:	6013      	str	r3, [r2, #0]
}
 800cac8:	bf00      	nop
 800caca:	3714      	adds	r7, #20
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	200017f8 	.word	0x200017f8
 800cad8:	200017e4 	.word	0x200017e4
 800cadc:	200017d8 	.word	0x200017d8
 800cae0:	20001300 	.word	0x20001300
 800cae4:	200012fc 	.word	0x200012fc
 800cae8:	20000184 	.word	0x20000184

0800caec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	60fb      	str	r3, [r7, #12]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <vTaskPlaceOnEventList+0x44>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3318      	adds	r3, #24
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7fe fcf1 	bl	800b502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb20:	2101      	movs	r1, #1
 800cb22:	6838      	ldr	r0, [r7, #0]
 800cb24:	f000 fa80 	bl	800d028 <prvAddCurrentTaskToDelayedList>
}
 800cb28:	bf00      	nop
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	200012fc 	.word	0x200012fc

0800cb34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10a      	bne.n	800cb5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	617b      	str	r3, [r7, #20]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <vTaskPlaceOnEventListRestricted+0x54>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3318      	adds	r3, #24
 800cb62:	4619      	mov	r1, r3
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7fe fca8 	bl	800b4ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cb70:	f04f 33ff 	mov.w	r3, #4294967295
 800cb74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	68b8      	ldr	r0, [r7, #8]
 800cb7a:	f000 fa55 	bl	800d028 <prvAddCurrentTaskToDelayedList>
	}
 800cb7e:	bf00      	nop
 800cb80:	3718      	adds	r7, #24
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200012fc 	.word	0x200012fc

0800cb8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	60fb      	str	r3, [r7, #12]
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	3318      	adds	r3, #24
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fe fcd9 	bl	800b574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc2:	4b1e      	ldr	r3, [pc, #120]	; (800cc3c <xTaskRemoveFromEventList+0xb0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d11d      	bne.n	800cc06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fcd0 	bl	800b574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd8:	4b19      	ldr	r3, [pc, #100]	; (800cc40 <xTaskRemoveFromEventList+0xb4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d903      	bls.n	800cbe8 <xTaskRemoveFromEventList+0x5c>
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <xTaskRemoveFromEventList+0xb4>)
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4a13      	ldr	r2, [pc, #76]	; (800cc44 <xTaskRemoveFromEventList+0xb8>)
 800cbf6:	441a      	add	r2, r3
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe fc5b 	bl	800b4ba <vListInsertEnd>
 800cc04:	e005      	b.n	800cc12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	3318      	adds	r3, #24
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	480e      	ldr	r0, [pc, #56]	; (800cc48 <xTaskRemoveFromEventList+0xbc>)
 800cc0e:	f7fe fc54 	bl	800b4ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc16:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <xTaskRemoveFromEventList+0xc0>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d905      	bls.n	800cc2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc24:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <xTaskRemoveFromEventList+0xc4>)
 800cc26:	2201      	movs	r2, #1
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	e001      	b.n	800cc30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc30:	697b      	ldr	r3, [r7, #20]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	200017f8 	.word	0x200017f8
 800cc40:	200017d8 	.word	0x200017d8
 800cc44:	20001300 	.word	0x20001300
 800cc48:	20001790 	.word	0x20001790
 800cc4c:	200012fc 	.word	0x200012fc
 800cc50:	200017e4 	.word	0x200017e4

0800cc54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc5c:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <vTaskInternalSetTimeOutState+0x24>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <vTaskInternalSetTimeOutState+0x28>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	605a      	str	r2, [r3, #4]
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	200017e8 	.word	0x200017e8
 800cc7c:	200017d4 	.word	0x200017d4

0800cc80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	613b      	str	r3, [r7, #16]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10a      	bne.n	800ccc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	60fb      	str	r3, [r7, #12]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ccc2:	f000 ff67 	bl	800db94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <xTaskCheckForTimeOut+0xbc>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d102      	bne.n	800cce6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e023      	b.n	800cd2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <xTaskCheckForTimeOut+0xc0>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d007      	beq.n	800cd02 <xTaskCheckForTimeOut+0x82>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	61fb      	str	r3, [r7, #28]
 800cd00:	e015      	b.n	800cd2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d20b      	bcs.n	800cd24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	1ad2      	subs	r2, r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff ff9b 	bl	800cc54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	e004      	b.n	800cd2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd2e:	f000 ff61 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800cd32:	69fb      	ldr	r3, [r7, #28]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	200017d4 	.word	0x200017d4
 800cd40:	200017e8 	.word	0x200017e8

0800cd44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd48:	4b03      	ldr	r3, [pc, #12]	; (800cd58 <vTaskMissedYield+0x14>)
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	200017e4 	.word	0x200017e4

0800cd5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd64:	f000 f852 	bl	800ce0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <prvIdleTask+0x28>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d9f9      	bls.n	800cd64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <prvIdleTask+0x2c>)
 800cd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd80:	e7f0      	b.n	800cd64 <prvIdleTask+0x8>
 800cd82:	bf00      	nop
 800cd84:	20001300 	.word	0x20001300
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e00c      	b.n	800cdb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4a12      	ldr	r2, [pc, #72]	; (800cdec <prvInitialiseTaskLists+0x60>)
 800cda4:	4413      	add	r3, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fb5a 	bl	800b460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b37      	cmp	r3, #55	; 0x37
 800cdb6:	d9ef      	bls.n	800cd98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdb8:	480d      	ldr	r0, [pc, #52]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdba:	f7fe fb51 	bl	800b460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdbe:	480d      	ldr	r0, [pc, #52]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cdc0:	f7fe fb4e 	bl	800b460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdc4:	480c      	ldr	r0, [pc, #48]	; (800cdf8 <prvInitialiseTaskLists+0x6c>)
 800cdc6:	f7fe fb4b 	bl	800b460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdca:	480c      	ldr	r0, [pc, #48]	; (800cdfc <prvInitialiseTaskLists+0x70>)
 800cdcc:	f7fe fb48 	bl	800b460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdd0:	480b      	ldr	r0, [pc, #44]	; (800ce00 <prvInitialiseTaskLists+0x74>)
 800cdd2:	f7fe fb45 	bl	800b460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdd6:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <prvInitialiseTaskLists+0x78>)
 800cdd8:	4a05      	ldr	r2, [pc, #20]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <prvInitialiseTaskLists+0x7c>)
 800cdde:	4a05      	ldr	r2, [pc, #20]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cde0:	601a      	str	r2, [r3, #0]
}
 800cde2:	bf00      	nop
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20001300 	.word	0x20001300
 800cdf0:	20001760 	.word	0x20001760
 800cdf4:	20001774 	.word	0x20001774
 800cdf8:	20001790 	.word	0x20001790
 800cdfc:	200017a4 	.word	0x200017a4
 800ce00:	200017bc 	.word	0x200017bc
 800ce04:	20001788 	.word	0x20001788
 800ce08:	2000178c 	.word	0x2000178c

0800ce0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce12:	e019      	b.n	800ce48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce14:	f000 febe 	bl	800db94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce18:	4b10      	ldr	r3, [pc, #64]	; (800ce5c <prvCheckTasksWaitingTermination+0x50>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe fba5 	bl	800b574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	4a0b      	ldr	r2, [pc, #44]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce34:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	4a0a      	ldr	r2, [pc, #40]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce3e:	f000 fed9 	bl	800dbf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f810 	bl	800ce68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce48:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e1      	bne.n	800ce14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200017a4 	.word	0x200017a4
 800ce60:	200017d0 	.word	0x200017d0
 800ce64:	200017b8 	.word	0x200017b8

0800ce68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3354      	adds	r3, #84	; 0x54
 800ce74:	4618      	mov	r0, r3
 800ce76:	f001 fbd9 	bl	800e62c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d108      	bne.n	800ce96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 f871 	bl	800df70 <vPortFree>
				vPortFree( pxTCB );
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 f86e 	bl	800df70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce94:	e018      	b.n	800cec8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d103      	bne.n	800cea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 f865 	bl	800df70 <vPortFree>
	}
 800cea6:	e00f      	b.n	800cec8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d00a      	beq.n	800cec8 <prvDeleteTCB+0x60>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	60fb      	str	r3, [r7, #12]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <prvDeleteTCB+0x5e>
	}
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ced6:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <prvResetNextTaskUnblockTime+0x38>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d104      	bne.n	800ceea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cee0:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <prvResetNextTaskUnblockTime+0x3c>)
 800cee2:	f04f 32ff 	mov.w	r2, #4294967295
 800cee6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cee8:	e008      	b.n	800cefc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <prvResetNextTaskUnblockTime+0x38>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4a04      	ldr	r2, [pc, #16]	; (800cf0c <prvResetNextTaskUnblockTime+0x3c>)
 800cefa:	6013      	str	r3, [r2, #0]
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	20001788 	.word	0x20001788
 800cf0c:	200017f0 	.word	0x200017f0

0800cf10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf16:	4b0b      	ldr	r3, [pc, #44]	; (800cf44 <xTaskGetSchedulerState+0x34>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	607b      	str	r3, [r7, #4]
 800cf22:	e008      	b.n	800cf36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf24:	4b08      	ldr	r3, [pc, #32]	; (800cf48 <xTaskGetSchedulerState+0x38>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d102      	bne.n	800cf32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e001      	b.n	800cf36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf36:	687b      	ldr	r3, [r7, #4]
	}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	200017dc 	.word	0x200017dc
 800cf48:	200017f8 	.word	0x200017f8

0800cf4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d056      	beq.n	800d010 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf62:	4b2e      	ldr	r3, [pc, #184]	; (800d01c <xTaskPriorityDisinherit+0xd0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d00a      	beq.n	800cf82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	60fb      	str	r3, [r7, #12]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	60bb      	str	r3, [r7, #8]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa4:	1e5a      	subs	r2, r3, #1
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d02c      	beq.n	800d010 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d128      	bne.n	800d010 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fad6 	bl	800b574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe0:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <xTaskPriorityDisinherit+0xd4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d903      	bls.n	800cff0 <xTaskPriorityDisinherit+0xa4>
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfec:	4a0c      	ldr	r2, [pc, #48]	; (800d020 <xTaskPriorityDisinherit+0xd4>)
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff4:	4613      	mov	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4a09      	ldr	r2, [pc, #36]	; (800d024 <xTaskPriorityDisinherit+0xd8>)
 800cffe:	441a      	add	r2, r3
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	3304      	adds	r3, #4
 800d004:	4619      	mov	r1, r3
 800d006:	4610      	mov	r0, r2
 800d008:	f7fe fa57 	bl	800b4ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d00c:	2301      	movs	r3, #1
 800d00e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d010:	697b      	ldr	r3, [r7, #20]
	}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	200012fc 	.word	0x200012fc
 800d020:	200017d8 	.word	0x200017d8
 800d024:	20001300 	.word	0x20001300

0800d028 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d032:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d038:	4b20      	ldr	r3, [pc, #128]	; (800d0bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fa98 	bl	800b574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d10a      	bne.n	800d062 <prvAddCurrentTaskToDelayedList+0x3a>
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d052:	4b1a      	ldr	r3, [pc, #104]	; (800d0bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3304      	adds	r3, #4
 800d058:	4619      	mov	r1, r3
 800d05a:	4819      	ldr	r0, [pc, #100]	; (800d0c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d05c:	f7fe fa2d 	bl	800b4ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d060:	e026      	b.n	800d0b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4413      	add	r3, r2
 800d068:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d06a:	4b14      	ldr	r3, [pc, #80]	; (800d0bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	429a      	cmp	r2, r3
 800d078:	d209      	bcs.n	800d08e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d07a:	4b12      	ldr	r3, [pc, #72]	; (800d0c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3304      	adds	r3, #4
 800d084:	4619      	mov	r1, r3
 800d086:	4610      	mov	r0, r2
 800d088:	f7fe fa3b 	bl	800b502 <vListInsert>
}
 800d08c:	e010      	b.n	800d0b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d08e:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3304      	adds	r3, #4
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f7fe fa31 	bl	800b502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	; (800d0cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d202      	bcs.n	800d0b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d0aa:	4a08      	ldr	r2, [pc, #32]	; (800d0cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	6013      	str	r3, [r2, #0]
}
 800d0b0:	bf00      	nop
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200017d4 	.word	0x200017d4
 800d0bc:	200012fc 	.word	0x200012fc
 800d0c0:	200017bc 	.word	0x200017bc
 800d0c4:	2000178c 	.word	0x2000178c
 800d0c8:	20001788 	.word	0x20001788
 800d0cc:	200017f0 	.word	0x200017f0

0800d0d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08a      	sub	sp, #40	; 0x28
 800d0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0da:	f000 fba1 	bl	800d820 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0de:	4b1c      	ldr	r3, [pc, #112]	; (800d150 <xTimerCreateTimerTask+0x80>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d021      	beq.n	800d12a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0ee:	1d3a      	adds	r2, r7, #4
 800d0f0:	f107 0108 	add.w	r1, r7, #8
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fe f997 	bl	800b42c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	9202      	str	r2, [sp, #8]
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	2302      	movs	r3, #2
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	2300      	movs	r3, #0
 800d10e:	460a      	mov	r2, r1
 800d110:	4910      	ldr	r1, [pc, #64]	; (800d154 <xTimerCreateTimerTask+0x84>)
 800d112:	4811      	ldr	r0, [pc, #68]	; (800d158 <xTimerCreateTimerTask+0x88>)
 800d114:	f7ff f836 	bl	800c184 <xTaskCreateStatic>
 800d118:	4603      	mov	r3, r0
 800d11a:	4a10      	ldr	r2, [pc, #64]	; (800d15c <xTimerCreateTimerTask+0x8c>)
 800d11c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <xTimerCreateTimerTask+0x8c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d126:	2301      	movs	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	613b      	str	r3, [r7, #16]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d146:	697b      	ldr	r3, [r7, #20]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	2000182c 	.word	0x2000182c
 800d154:	08011ee4 	.word	0x08011ee4
 800d158:	0800d3c9 	.word	0x0800d3c9
 800d15c:	20001830 	.word	0x20001830

0800d160 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d16e:	202c      	movs	r0, #44	; 0x2c
 800d170:	f000 fe32 	bl	800ddd8 <pvPortMalloc>
 800d174:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00d      	beq.n	800d198 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f843 	bl	800d21e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d198:	697b      	ldr	r3, [r7, #20]
	}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b08a      	sub	sp, #40	; 0x28
 800d1a6:	af02      	add	r7, sp, #8
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d1b0:	232c      	movs	r3, #44	; 0x2c
 800d1b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b2c      	cmp	r3, #44	; 0x2c
 800d1b8:	d00a      	beq.n	800d1d0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	61bb      	str	r3, [r7, #24]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <xTimerCreateStatic+0x4c>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	617b      	str	r3, [r7, #20]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00d      	beq.n	800d214 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	9301      	str	r3, [sp, #4]
 800d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 f805 	bl	800d21e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d214:	69fb      	ldr	r3, [r7, #28]
	}
 800d216:	4618      	mov	r0, r3
 800d218:	3720      	adds	r7, #32
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b086      	sub	sp, #24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
 800d22a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	617b      	str	r3, [r7, #20]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01e      	beq.n	800d28c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d24e:	f000 fae7 	bl	800d820 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	6a3a      	ldr	r2, [r7, #32]
 800d268:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	3304      	adds	r3, #4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe f916 	bl	800b4a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d008      	beq.n	800d28c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d280:	f043 0304 	orr.w	r3, r3, #4
 800d284:	b2da      	uxtb	r2, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d28c:	bf00      	nop
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	623b      	str	r3, [r7, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2c2:	4b1a      	ldr	r3, [pc, #104]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d02a      	beq.n	800d320 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b05      	cmp	r3, #5
 800d2da:	dc18      	bgt.n	800d30e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2dc:	f7ff fe18 	bl	800cf10 <xTaskGetSchedulerState>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d109      	bne.n	800d2fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	f107 0110 	add.w	r1, r7, #16
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f2:	f7fe fb11 	bl	800b918 <xQueueGenericSend>
 800d2f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d2f8:	e012      	b.n	800d320 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2fa:	4b0c      	ldr	r3, [pc, #48]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f107 0110 	add.w	r1, r7, #16
 800d302:	2300      	movs	r3, #0
 800d304:	2200      	movs	r2, #0
 800d306:	f7fe fb07 	bl	800b918 <xQueueGenericSend>
 800d30a:	6278      	str	r0, [r7, #36]	; 0x24
 800d30c:	e008      	b.n	800d320 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <xTimerGenericCommand+0x98>)
 800d310:	6818      	ldr	r0, [r3, #0]
 800d312:	f107 0110 	add.w	r1, r7, #16
 800d316:	2300      	movs	r3, #0
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	f7fe fbfb 	bl	800bb14 <xQueueGenericSendFromISR>
 800d31e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d322:	4618      	mov	r0, r3
 800d324:	3728      	adds	r7, #40	; 0x28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2000182c 	.word	0x2000182c

0800d330 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af02      	add	r7, sp, #8
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33a:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <prvProcessExpiredTimer+0x94>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	3304      	adds	r3, #4
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe f913 	bl	800b574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d354:	f003 0304 	and.w	r3, r3, #4
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d022      	beq.n	800d3a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	699a      	ldr	r2, [r3, #24]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	18d1      	adds	r1, r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	6978      	ldr	r0, [r7, #20]
 800d36a:	f000 f8d1 	bl	800d510 <prvInsertTimerInActiveList>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d01f      	beq.n	800d3b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d374:	2300      	movs	r3, #0
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	2300      	movs	r3, #0
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	2100      	movs	r1, #0
 800d37e:	6978      	ldr	r0, [r7, #20]
 800d380:	f7ff ff88 	bl	800d294 <xTimerGenericCommand>
 800d384:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d113      	bne.n	800d3b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
 800d3b8:	6978      	ldr	r0, [r7, #20]
 800d3ba:	4798      	blx	r3
}
 800d3bc:	bf00      	nop
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20001824 	.word	0x20001824

0800d3c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 f857 	bl	800d488 <prvGetNextExpireTime>
 800d3da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 f803 	bl	800d3ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3e6:	f000 f8d5 	bl	800d594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3ea:	e7f1      	b.n	800d3d0 <prvTimerTask+0x8>

0800d3ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3f6:	f7ff f99f 	bl	800c738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 f866 	bl	800d4d0 <prvSampleTimeNow>
 800d404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d130      	bne.n	800d46e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10a      	bne.n	800d428 <prvProcessTimerOrBlockTask+0x3c>
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	429a      	cmp	r2, r3
 800d418:	d806      	bhi.n	800d428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d41a:	f7ff f99b 	bl	800c754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7ff ff85 	bl	800d330 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d426:	e024      	b.n	800d472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d008      	beq.n	800d440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <prvProcessTimerOrBlockTask+0x90>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d101      	bne.n	800d43c <prvProcessTimerOrBlockTask+0x50>
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <prvProcessTimerOrBlockTask+0x52>
 800d43c:	2300      	movs	r3, #0
 800d43e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <prvProcessTimerOrBlockTask+0x94>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	4619      	mov	r1, r3
 800d44e:	f7fe fe65 	bl	800c11c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d452:	f7ff f97f 	bl	800c754 <xTaskResumeAll>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10a      	bne.n	800d472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d45c:	4b09      	ldr	r3, [pc, #36]	; (800d484 <prvProcessTimerOrBlockTask+0x98>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	f3bf 8f6f 	isb	sy
}
 800d46c:	e001      	b.n	800d472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d46e:	f7ff f971 	bl	800c754 <xTaskResumeAll>
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20001828 	.word	0x20001828
 800d480:	2000182c 	.word	0x2000182c
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d490:	4b0e      	ldr	r3, [pc, #56]	; (800d4cc <prvGetNextExpireTime+0x44>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <prvGetNextExpireTime+0x16>
 800d49a:	2201      	movs	r2, #1
 800d49c:	e000      	b.n	800d4a0 <prvGetNextExpireTime+0x18>
 800d49e:	2200      	movs	r2, #0
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d105      	bne.n	800d4b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4ac:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <prvGetNextExpireTime+0x44>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	e001      	b.n	800d4bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	20001824 	.word	0x20001824

0800d4d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4d8:	f7ff f9da 	bl	800c890 <xTaskGetTickCount>
 800d4dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4de:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <prvSampleTimeNow+0x3c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d205      	bcs.n	800d4f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4e8:	f000 f936 	bl	800d758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e002      	b.n	800d4fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4fa:	4a04      	ldr	r2, [pc, #16]	; (800d50c <prvSampleTimeNow+0x3c>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d500:	68fb      	ldr	r3, [r7, #12]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20001834 	.word	0x20001834

0800d510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d51e:	2300      	movs	r3, #0
 800d520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	429a      	cmp	r2, r3
 800d534:	d812      	bhi.n	800d55c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	1ad2      	subs	r2, r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	429a      	cmp	r2, r3
 800d542:	d302      	bcc.n	800d54a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d544:	2301      	movs	r3, #1
 800d546:	617b      	str	r3, [r7, #20]
 800d548:	e01b      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d54a:	4b10      	ldr	r3, [pc, #64]	; (800d58c <prvInsertTimerInActiveList+0x7c>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fd ffd4 	bl	800b502 <vListInsert>
 800d55a:	e012      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d206      	bcs.n	800d572 <prvInsertTimerInActiveList+0x62>
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d302      	bcc.n	800d572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	617b      	str	r3, [r7, #20]
 800d570:	e007      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <prvInsertTimerInActiveList+0x80>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3304      	adds	r3, #4
 800d57a:	4619      	mov	r1, r3
 800d57c:	4610      	mov	r0, r2
 800d57e:	f7fd ffc0 	bl	800b502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d582:	697b      	ldr	r3, [r7, #20]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20001828 	.word	0x20001828
 800d590:	20001824 	.word	0x20001824

0800d594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08e      	sub	sp, #56	; 0x38
 800d598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d59a:	e0ca      	b.n	800d732 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	da18      	bge.n	800d5d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d5a2:	1d3b      	adds	r3, r7, #4
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10a      	bne.n	800d5c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	61fb      	str	r3, [r7, #28]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ca:	6850      	ldr	r0, [r2, #4]
 800d5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ce:	6892      	ldr	r2, [r2, #8]
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f2c0 80aa 	blt.w	800d730 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d004      	beq.n	800d5f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd ffc1 	bl	800b574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5f2:	463b      	mov	r3, r7
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff ff6b 	bl	800d4d0 <prvSampleTimeNow>
 800d5fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b09      	cmp	r3, #9
 800d600:	f200 8097 	bhi.w	800d732 <prvProcessReceivedCommands+0x19e>
 800d604:	a201      	add	r2, pc, #4	; (adr r2, 800d60c <prvProcessReceivedCommands+0x78>)
 800d606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60a:	bf00      	nop
 800d60c:	0800d635 	.word	0x0800d635
 800d610:	0800d635 	.word	0x0800d635
 800d614:	0800d635 	.word	0x0800d635
 800d618:	0800d6a9 	.word	0x0800d6a9
 800d61c:	0800d6bd 	.word	0x0800d6bd
 800d620:	0800d707 	.word	0x0800d707
 800d624:	0800d635 	.word	0x0800d635
 800d628:	0800d635 	.word	0x0800d635
 800d62c:	0800d6a9 	.word	0x0800d6a9
 800d630:	0800d6bd 	.word	0x0800d6bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d63a:	f043 0301 	orr.w	r3, r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	18d1      	adds	r1, r2, r3
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d654:	f7ff ff5c 	bl	800d510 <prvInsertTimerInActiveList>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d069      	beq.n	800d732 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d664:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b00      	cmp	r3, #0
 800d672:	d05e      	beq.n	800d732 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	441a      	add	r2, r3
 800d67c:	2300      	movs	r3, #0
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	2300      	movs	r3, #0
 800d682:	2100      	movs	r1, #0
 800d684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d686:	f7ff fe05 	bl	800d294 <xTimerGenericCommand>
 800d68a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d14f      	bne.n	800d732 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	61bb      	str	r3, [r7, #24]
}
 800d6a4:	bf00      	nop
 800d6a6:	e7fe      	b.n	800d6a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ae:	f023 0301 	bic.w	r3, r3, #1
 800d6b2:	b2da      	uxtb	r2, r3
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d6ba:	e03a      	b.n	800d732 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6c2:	f043 0301 	orr.w	r3, r3, #1
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10a      	bne.n	800d6f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	617b      	str	r3, [r7, #20]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	699a      	ldr	r2, [r3, #24]
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	18d1      	adds	r1, r2, r3
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d700:	f7ff ff06 	bl	800d510 <prvInsertTimerInActiveList>
					break;
 800d704:	e015      	b.n	800d732 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d70c:	f003 0302 	and.w	r3, r3, #2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d716:	f000 fc2b 	bl	800df70 <vPortFree>
 800d71a:	e00a      	b.n	800d732 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d722:	f023 0301 	bic.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d72e:	e000      	b.n	800d732 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d732:	4b08      	ldr	r3, [pc, #32]	; (800d754 <prvProcessReceivedCommands+0x1c0>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	1d39      	adds	r1, r7, #4
 800d738:	2200      	movs	r2, #0
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fa86 	bl	800bc4c <xQueueReceive>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	f47f af2a 	bne.w	800d59c <prvProcessReceivedCommands+0x8>
	}
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	3730      	adds	r7, #48	; 0x30
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2000182c 	.word	0x2000182c

0800d758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d75e:	e048      	b.n	800d7f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d760:	4b2d      	ldr	r3, [pc, #180]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76a:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3304      	adds	r3, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd fefb 	bl	800b574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d02e      	beq.n	800d7f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	693a      	ldr	r2, [r7, #16]
 800d79a:	4413      	add	r3, r2
 800d79c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d90e      	bls.n	800d7c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7b2:	4b19      	ldr	r3, [pc, #100]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f7fd fea0 	bl	800b502 <vListInsert>
 800d7c2:	e016      	b.n	800d7f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fd60 	bl	800d294 <xTimerGenericCommand>
 800d7d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10a      	bne.n	800d7f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	603b      	str	r3, [r7, #0]
}
 800d7ee:	bf00      	nop
 800d7f0:	e7fe      	b.n	800d7f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7f2:	4b09      	ldr	r3, [pc, #36]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1b1      	bne.n	800d760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7fc:	4b06      	ldr	r3, [pc, #24]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d802:	4b06      	ldr	r3, [pc, #24]	; (800d81c <prvSwitchTimerLists+0xc4>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a04      	ldr	r2, [pc, #16]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d808:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d80a:	4a04      	ldr	r2, [pc, #16]	; (800d81c <prvSwitchTimerLists+0xc4>)
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	6013      	str	r3, [r2, #0]
}
 800d810:	bf00      	nop
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20001824 	.word	0x20001824
 800d81c:	20001828 	.word	0x20001828

0800d820 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d826:	f000 f9b5 	bl	800db94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d120      	bne.n	800d874 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d832:	4814      	ldr	r0, [pc, #80]	; (800d884 <prvCheckForValidListAndQueue+0x64>)
 800d834:	f7fd fe14 	bl	800b460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d838:	4813      	ldr	r0, [pc, #76]	; (800d888 <prvCheckForValidListAndQueue+0x68>)
 800d83a:	f7fd fe11 	bl	800b460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <prvCheckForValidListAndQueue+0x6c>)
 800d840:	4a10      	ldr	r2, [pc, #64]	; (800d884 <prvCheckForValidListAndQueue+0x64>)
 800d842:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d844:	4b12      	ldr	r3, [pc, #72]	; (800d890 <prvCheckForValidListAndQueue+0x70>)
 800d846:	4a10      	ldr	r2, [pc, #64]	; (800d888 <prvCheckForValidListAndQueue+0x68>)
 800d848:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d84a:	2300      	movs	r3, #0
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <prvCheckForValidListAndQueue+0x74>)
 800d850:	4a11      	ldr	r2, [pc, #68]	; (800d898 <prvCheckForValidListAndQueue+0x78>)
 800d852:	2110      	movs	r1, #16
 800d854:	200a      	movs	r0, #10
 800d856:	f7fd ff1f 	bl	800b698 <xQueueGenericCreateStatic>
 800d85a:	4603      	mov	r3, r0
 800d85c:	4a08      	ldr	r2, [pc, #32]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d85e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d860:	4b07      	ldr	r3, [pc, #28]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d005      	beq.n	800d874 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	490b      	ldr	r1, [pc, #44]	; (800d89c <prvCheckForValidListAndQueue+0x7c>)
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fc00 	bl	800c074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d874:	f000 f9be 	bl	800dbf4 <vPortExitCritical>
}
 800d878:	bf00      	nop
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	2000182c 	.word	0x2000182c
 800d884:	200017fc 	.word	0x200017fc
 800d888:	20001810 	.word	0x20001810
 800d88c:	20001824 	.word	0x20001824
 800d890:	20001828 	.word	0x20001828
 800d894:	200018d8 	.word	0x200018d8
 800d898:	20001838 	.word	0x20001838
 800d89c:	08011eec 	.word	0x08011eec

0800d8a0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10a      	bne.n	800d8c8 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	60fb      	str	r3, [r7, #12]
}
 800d8c4:	bf00      	nop
 800d8c6:	e7fe      	b.n	800d8c6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d8c8:	f000 f964 	bl	800db94 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d102      	bne.n	800d8e0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	e001      	b.n	800d8e4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d8e4:	f000 f986 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800d8e8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10a      	bne.n	800d91a <pvTimerGetTimerID+0x28>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	60fb      	str	r3, [r7, #12]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d91a:	f000 f93b 	bl	800db94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d924:	f000 f966 	bl	800dbf4 <vPortExitCritical>

	return pvReturn;
 800d928:	693b      	ldr	r3, [r7, #16]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3718      	adds	r7, #24
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
	...

0800d934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3b04      	subs	r3, #4
 800d944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3b04      	subs	r3, #4
 800d952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f023 0201 	bic.w	r2, r3, #1
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3b04      	subs	r3, #4
 800d962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d964:	4a0c      	ldr	r2, [pc, #48]	; (800d998 <pxPortInitialiseStack+0x64>)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3b14      	subs	r3, #20
 800d96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	3b04      	subs	r3, #4
 800d97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f06f 0202 	mvn.w	r2, #2
 800d982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	3b20      	subs	r3, #32
 800d988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d98a:	68fb      	ldr	r3, [r7, #12]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	0800d99d 	.word	0x0800d99d

0800d99c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9a6:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <prvTaskExitError+0x54>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ae:	d00a      	beq.n	800d9c6 <prvTaskExitError+0x2a>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	60fb      	str	r3, [r7, #12]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <prvTaskExitError+0x28>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	60bb      	str	r3, [r7, #8]
}
 800d9d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9da:	bf00      	nop
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0fc      	beq.n	800d9dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	20000180 	.word	0x20000180
	...

0800da00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <pxCurrentTCBConst2>)
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	6808      	ldr	r0, [r1, #0]
 800da06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0a:	f380 8809 	msr	PSP, r0
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f04f 0000 	mov.w	r0, #0
 800da16:	f380 8811 	msr	BASEPRI, r0
 800da1a:	4770      	bx	lr
 800da1c:	f3af 8000 	nop.w

0800da20 <pxCurrentTCBConst2>:
 800da20:	200012fc 	.word	0x200012fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop

0800da28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da28:	4808      	ldr	r0, [pc, #32]	; (800da4c <prvPortStartFirstTask+0x24>)
 800da2a:	6800      	ldr	r0, [r0, #0]
 800da2c:	6800      	ldr	r0, [r0, #0]
 800da2e:	f380 8808 	msr	MSP, r0
 800da32:	f04f 0000 	mov.w	r0, #0
 800da36:	f380 8814 	msr	CONTROL, r0
 800da3a:	b662      	cpsie	i
 800da3c:	b661      	cpsie	f
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	df00      	svc	0
 800da48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da4a:	bf00      	nop
 800da4c:	e000ed08 	.word	0xe000ed08

0800da50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da56:	4b46      	ldr	r3, [pc, #280]	; (800db70 <xPortStartScheduler+0x120>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a46      	ldr	r2, [pc, #280]	; (800db74 <xPortStartScheduler+0x124>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d10a      	bne.n	800da76 <xPortStartScheduler+0x26>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	613b      	str	r3, [r7, #16]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da76:	4b3e      	ldr	r3, [pc, #248]	; (800db70 <xPortStartScheduler+0x120>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a3f      	ldr	r2, [pc, #252]	; (800db78 <xPortStartScheduler+0x128>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d10a      	bne.n	800da96 <xPortStartScheduler+0x46>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da96:	4b39      	ldr	r3, [pc, #228]	; (800db7c <xPortStartScheduler+0x12c>)
 800da98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	22ff      	movs	r2, #255	; 0xff
 800daa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	4b31      	ldr	r3, [pc, #196]	; (800db80 <xPortStartScheduler+0x130>)
 800dabc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dabe:	4b31      	ldr	r3, [pc, #196]	; (800db84 <xPortStartScheduler+0x134>)
 800dac0:	2207      	movs	r2, #7
 800dac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dac4:	e009      	b.n	800dada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dac6:	4b2f      	ldr	r3, [pc, #188]	; (800db84 <xPortStartScheduler+0x134>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3b01      	subs	r3, #1
 800dacc:	4a2d      	ldr	r2, [pc, #180]	; (800db84 <xPortStartScheduler+0x134>)
 800dace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dada:	78fb      	ldrb	r3, [r7, #3]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae2:	2b80      	cmp	r3, #128	; 0x80
 800dae4:	d0ef      	beq.n	800dac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dae6:	4b27      	ldr	r3, [pc, #156]	; (800db84 <xPortStartScheduler+0x134>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f1c3 0307 	rsb	r3, r3, #7
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d00a      	beq.n	800db08 <xPortStartScheduler+0xb8>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	60bb      	str	r3, [r7, #8]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db08:	4b1e      	ldr	r3, [pc, #120]	; (800db84 <xPortStartScheduler+0x134>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	021b      	lsls	r3, r3, #8
 800db0e:	4a1d      	ldr	r2, [pc, #116]	; (800db84 <xPortStartScheduler+0x134>)
 800db10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db12:	4b1c      	ldr	r3, [pc, #112]	; (800db84 <xPortStartScheduler+0x134>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db1a:	4a1a      	ldr	r2, [pc, #104]	; (800db84 <xPortStartScheduler+0x134>)
 800db1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	b2da      	uxtb	r2, r3
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db26:	4b18      	ldr	r3, [pc, #96]	; (800db88 <xPortStartScheduler+0x138>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a17      	ldr	r2, [pc, #92]	; (800db88 <xPortStartScheduler+0x138>)
 800db2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db32:	4b15      	ldr	r3, [pc, #84]	; (800db88 <xPortStartScheduler+0x138>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a14      	ldr	r2, [pc, #80]	; (800db88 <xPortStartScheduler+0x138>)
 800db38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db3e:	f000 f8dd 	bl	800dcfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db42:	4b12      	ldr	r3, [pc, #72]	; (800db8c <xPortStartScheduler+0x13c>)
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db48:	f000 f8fc 	bl	800dd44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db4c:	4b10      	ldr	r3, [pc, #64]	; (800db90 <xPortStartScheduler+0x140>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a0f      	ldr	r2, [pc, #60]	; (800db90 <xPortStartScheduler+0x140>)
 800db52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db58:	f7ff ff66 	bl	800da28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db5c:	f7fe ff62 	bl	800ca24 <vTaskSwitchContext>
	prvTaskExitError();
 800db60:	f7ff ff1c 	bl	800d99c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	e000ed00 	.word	0xe000ed00
 800db74:	410fc271 	.word	0x410fc271
 800db78:	410fc270 	.word	0x410fc270
 800db7c:	e000e400 	.word	0xe000e400
 800db80:	20001928 	.word	0x20001928
 800db84:	2000192c 	.word	0x2000192c
 800db88:	e000ed20 	.word	0xe000ed20
 800db8c:	20000180 	.word	0x20000180
 800db90:	e000ef34 	.word	0xe000ef34

0800db94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	607b      	str	r3, [r7, #4]
}
 800dbac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbae:	4b0f      	ldr	r3, [pc, #60]	; (800dbec <vPortEnterCritical+0x58>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4a0d      	ldr	r2, [pc, #52]	; (800dbec <vPortEnterCritical+0x58>)
 800dbb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbb8:	4b0c      	ldr	r3, [pc, #48]	; (800dbec <vPortEnterCritical+0x58>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d10f      	bne.n	800dbe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <vPortEnterCritical+0x5c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00a      	beq.n	800dbe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	603b      	str	r3, [r7, #0]
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <vPortEnterCritical+0x4a>
	}
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	20000180 	.word	0x20000180
 800dbf0:	e000ed04 	.word	0xe000ed04

0800dbf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbfa:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <vPortExitCritical+0x50>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <vPortExitCritical+0x24>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	607b      	str	r3, [r7, #4]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc18:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <vPortExitCritical+0x50>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	4a09      	ldr	r2, [pc, #36]	; (800dc44 <vPortExitCritical+0x50>)
 800dc20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc22:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <vPortExitCritical+0x50>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d105      	bne.n	800dc36 <vPortExitCritical+0x42>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	f383 8811 	msr	BASEPRI, r3
}
 800dc34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20000180 	.word	0x20000180
	...

0800dc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc50:	f3ef 8009 	mrs	r0, PSP
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <pxCurrentTCBConst>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	f01e 0f10 	tst.w	lr, #16
 800dc60:	bf08      	it	eq
 800dc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6a:	6010      	str	r0, [r2, #0]
 800dc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc74:	f380 8811 	msr	BASEPRI, r0
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f7fe fed0 	bl	800ca24 <vTaskSwitchContext>
 800dc84:	f04f 0000 	mov.w	r0, #0
 800dc88:	f380 8811 	msr	BASEPRI, r0
 800dc8c:	bc09      	pop	{r0, r3}
 800dc8e:	6819      	ldr	r1, [r3, #0]
 800dc90:	6808      	ldr	r0, [r1, #0]
 800dc92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc96:	f01e 0f10 	tst.w	lr, #16
 800dc9a:	bf08      	it	eq
 800dc9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dca0:	f380 8809 	msr	PSP, r0
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w

0800dcb0 <pxCurrentTCBConst>:
 800dcb0:	200012fc 	.word	0x200012fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	607b      	str	r3, [r7, #4]
}
 800dcd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcd2:	f7fe fded 	bl	800c8b0 <xTaskIncrementTick>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcdc:	4b06      	ldr	r3, [pc, #24]	; (800dcf8 <xPortSysTickHandler+0x40>)
 800dcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	2300      	movs	r3, #0
 800dce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	f383 8811 	msr	BASEPRI, r3
}
 800dcee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	e000ed04 	.word	0xe000ed04

0800dcfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd06:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <vPortSetupTimerInterrupt+0x38>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <vPortSetupTimerInterrupt+0x3c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <vPortSetupTimerInterrupt+0x40>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	099b      	lsrs	r3, r3, #6
 800dd18:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <vPortSetupTimerInterrupt+0x44>)
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd20:	2207      	movs	r2, #7
 800dd22:	601a      	str	r2, [r3, #0]
}
 800dd24:	bf00      	nop
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	e000e010 	.word	0xe000e010
 800dd34:	e000e018 	.word	0xe000e018
 800dd38:	20000174 	.word	0x20000174
 800dd3c:	10624dd3 	.word	0x10624dd3
 800dd40:	e000e014 	.word	0xe000e014

0800dd44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd54 <vPortEnableVFP+0x10>
 800dd48:	6801      	ldr	r1, [r0, #0]
 800dd4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd4e:	6001      	str	r1, [r0, #0]
 800dd50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd52:	bf00      	nop
 800dd54:	e000ed88 	.word	0xe000ed88

0800dd58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd5e:	f3ef 8305 	mrs	r3, IPSR
 800dd62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b0f      	cmp	r3, #15
 800dd68:	d914      	bls.n	800dd94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd6a:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <vPortValidateInterruptPriority+0x70>)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4413      	add	r3, r2
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd74:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <vPortValidateInterruptPriority+0x74>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	7afa      	ldrb	r2, [r7, #11]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d20a      	bcs.n	800dd94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	607b      	str	r3, [r7, #4]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd94:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <vPortValidateInterruptPriority+0x78>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd9c:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <vPortValidateInterruptPriority+0x7c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d90a      	bls.n	800ddba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	603b      	str	r3, [r7, #0]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <vPortValidateInterruptPriority+0x60>
	}
 800ddba:	bf00      	nop
 800ddbc:	3714      	adds	r7, #20
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	e000e3f0 	.word	0xe000e3f0
 800ddcc:	20001928 	.word	0x20001928
 800ddd0:	e000ed0c 	.word	0xe000ed0c
 800ddd4:	2000192c 	.word	0x2000192c

0800ddd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dde4:	f7fe fca8 	bl	800c738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dde8:	4b5b      	ldr	r3, [pc, #364]	; (800df58 <pvPortMalloc+0x180>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddf0:	f000 f920 	bl	800e034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddf4:	4b59      	ldr	r3, [pc, #356]	; (800df5c <pvPortMalloc+0x184>)
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 8093 	bne.w	800df28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d01d      	beq.n	800de44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de08:	2208      	movs	r2, #8
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4413      	add	r3, r2
 800de0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f003 0307 	and.w	r3, r3, #7
 800de16:	2b00      	cmp	r3, #0
 800de18:	d014      	beq.n	800de44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f023 0307 	bic.w	r3, r3, #7
 800de20:	3308      	adds	r3, #8
 800de22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <pvPortMalloc+0x6c>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	617b      	str	r3, [r7, #20]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d06e      	beq.n	800df28 <pvPortMalloc+0x150>
 800de4a:	4b45      	ldr	r3, [pc, #276]	; (800df60 <pvPortMalloc+0x188>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	429a      	cmp	r2, r3
 800de52:	d869      	bhi.n	800df28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de54:	4b43      	ldr	r3, [pc, #268]	; (800df64 <pvPortMalloc+0x18c>)
 800de56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de58:	4b42      	ldr	r3, [pc, #264]	; (800df64 <pvPortMalloc+0x18c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de5e:	e004      	b.n	800de6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	429a      	cmp	r2, r3
 800de72:	d903      	bls.n	800de7c <pvPortMalloc+0xa4>
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1f1      	bne.n	800de60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de7c:	4b36      	ldr	r3, [pc, #216]	; (800df58 <pvPortMalloc+0x180>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de82:	429a      	cmp	r2, r3
 800de84:	d050      	beq.n	800df28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2208      	movs	r2, #8
 800de8c:	4413      	add	r3, r2
 800de8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	2308      	movs	r3, #8
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d91f      	bls.n	800dee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4413      	add	r3, r2
 800deae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <pvPortMalloc+0xf8>
	__asm volatile
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	613b      	str	r3, [r7, #16]
}
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	1ad2      	subs	r2, r2, r3
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dee2:	69b8      	ldr	r0, [r7, #24]
 800dee4:	f000 f908 	bl	800e0f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dee8:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <pvPortMalloc+0x188>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	4a1b      	ldr	r2, [pc, #108]	; (800df60 <pvPortMalloc+0x188>)
 800def4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800def6:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <pvPortMalloc+0x188>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <pvPortMalloc+0x190>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d203      	bcs.n	800df0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df02:	4b17      	ldr	r3, [pc, #92]	; (800df60 <pvPortMalloc+0x188>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a18      	ldr	r2, [pc, #96]	; (800df68 <pvPortMalloc+0x190>)
 800df08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <pvPortMalloc+0x184>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	431a      	orrs	r2, r3
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	2200      	movs	r2, #0
 800df1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df1e:	4b13      	ldr	r3, [pc, #76]	; (800df6c <pvPortMalloc+0x194>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	3301      	adds	r3, #1
 800df24:	4a11      	ldr	r2, [pc, #68]	; (800df6c <pvPortMalloc+0x194>)
 800df26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df28:	f7fe fc14 	bl	800c754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <pvPortMalloc+0x174>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	60fb      	str	r3, [r7, #12]
}
 800df48:	bf00      	nop
 800df4a:	e7fe      	b.n	800df4a <pvPortMalloc+0x172>
	return pvReturn;
 800df4c:	69fb      	ldr	r3, [r7, #28]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3728      	adds	r7, #40	; 0x28
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20002cc0 	.word	0x20002cc0
 800df5c:	20002cd4 	.word	0x20002cd4
 800df60:	20002cc4 	.word	0x20002cc4
 800df64:	20002cb8 	.word	0x20002cb8
 800df68:	20002cc8 	.word	0x20002cc8
 800df6c:	20002ccc 	.word	0x20002ccc

0800df70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d04d      	beq.n	800e01e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df82:	2308      	movs	r3, #8
 800df84:	425b      	negs	r3, r3
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	4413      	add	r3, r2
 800df8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	4b24      	ldr	r3, [pc, #144]	; (800e028 <vPortFree+0xb8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4013      	ands	r3, r2
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10a      	bne.n	800dfb4 <vPortFree+0x44>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60fb      	str	r3, [r7, #12]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <vPortFree+0x62>
	__asm volatile
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	60bb      	str	r3, [r7, #8]
}
 800dfce:	bf00      	nop
 800dfd0:	e7fe      	b.n	800dfd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	4b14      	ldr	r3, [pc, #80]	; (800e028 <vPortFree+0xb8>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01e      	beq.n	800e01e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d11a      	bne.n	800e01e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	4b0e      	ldr	r3, [pc, #56]	; (800e028 <vPortFree+0xb8>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	43db      	mvns	r3, r3
 800dff2:	401a      	ands	r2, r3
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dff8:	f7fe fb9e 	bl	800c738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <vPortFree+0xbc>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4413      	add	r3, r2
 800e006:	4a09      	ldr	r2, [pc, #36]	; (800e02c <vPortFree+0xbc>)
 800e008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e00a:	6938      	ldr	r0, [r7, #16]
 800e00c:	f000 f874 	bl	800e0f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <vPortFree+0xc0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	4a06      	ldr	r2, [pc, #24]	; (800e030 <vPortFree+0xc0>)
 800e018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e01a:	f7fe fb9b 	bl	800c754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e01e:	bf00      	nop
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20002cd4 	.word	0x20002cd4
 800e02c:	20002cc4 	.word	0x20002cc4
 800e030:	20002cd0 	.word	0x20002cd0

0800e034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e03a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e03e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e040:	4b27      	ldr	r3, [pc, #156]	; (800e0e0 <prvHeapInit+0xac>)
 800e042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f003 0307 	and.w	r3, r3, #7
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00c      	beq.n	800e068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3307      	adds	r3, #7
 800e052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f023 0307 	bic.w	r3, r3, #7
 800e05a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e05c:	68ba      	ldr	r2, [r7, #8]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	4a1f      	ldr	r2, [pc, #124]	; (800e0e0 <prvHeapInit+0xac>)
 800e064:	4413      	add	r3, r2
 800e066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e06c:	4a1d      	ldr	r2, [pc, #116]	; (800e0e4 <prvHeapInit+0xb0>)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e072:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <prvHeapInit+0xb0>)
 800e074:	2200      	movs	r2, #0
 800e076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	4413      	add	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e080:	2208      	movs	r2, #8
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	1a9b      	subs	r3, r3, r2
 800e086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f023 0307 	bic.w	r3, r3, #7
 800e08e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	4a15      	ldr	r2, [pc, #84]	; (800e0e8 <prvHeapInit+0xb4>)
 800e094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e096:	4b14      	ldr	r3, [pc, #80]	; (800e0e8 <prvHeapInit+0xb4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2200      	movs	r2, #0
 800e09c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e09e:	4b12      	ldr	r3, [pc, #72]	; (800e0e8 <prvHeapInit+0xb4>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	1ad2      	subs	r2, r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0b4:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <prvHeapInit+0xb4>)
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	4a0a      	ldr	r2, [pc, #40]	; (800e0ec <prvHeapInit+0xb8>)
 800e0c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	4a09      	ldr	r2, [pc, #36]	; (800e0f0 <prvHeapInit+0xbc>)
 800e0ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0cc:	4b09      	ldr	r3, [pc, #36]	; (800e0f4 <prvHeapInit+0xc0>)
 800e0ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0d2:	601a      	str	r2, [r3, #0]
}
 800e0d4:	bf00      	nop
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	20001930 	.word	0x20001930
 800e0e4:	20002cb8 	.word	0x20002cb8
 800e0e8:	20002cc0 	.word	0x20002cc0
 800e0ec:	20002cc8 	.word	0x20002cc8
 800e0f0:	20002cc4 	.word	0x20002cc4
 800e0f4:	20002cd4 	.word	0x20002cd4

0800e0f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e100:	4b28      	ldr	r3, [pc, #160]	; (800e1a4 <prvInsertBlockIntoFreeList+0xac>)
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e002      	b.n	800e10c <prvInsertBlockIntoFreeList+0x14>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	429a      	cmp	r2, r3
 800e114:	d8f7      	bhi.n	800e106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	68ba      	ldr	r2, [r7, #8]
 800e120:	4413      	add	r3, r2
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d108      	bne.n	800e13a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	441a      	add	r2, r3
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	441a      	add	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d118      	bne.n	800e180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	4b15      	ldr	r3, [pc, #84]	; (800e1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	d00d      	beq.n	800e176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	685a      	ldr	r2, [r3, #4]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	441a      	add	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	601a      	str	r2, [r3, #0]
 800e174:	e008      	b.n	800e188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e176:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	e003      	b.n	800e188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d002      	beq.n	800e196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e196:	bf00      	nop
 800e198:	3714      	adds	r7, #20
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	20002cb8 	.word	0x20002cb8
 800e1a8:	20002cc0 	.word	0x20002cc0

0800e1ac <__errno>:
 800e1ac:	4b01      	ldr	r3, [pc, #4]	; (800e1b4 <__errno+0x8>)
 800e1ae:	6818      	ldr	r0, [r3, #0]
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20000184 	.word	0x20000184

0800e1b8 <std>:
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	b510      	push	{r4, lr}
 800e1bc:	4604      	mov	r4, r0
 800e1be:	e9c0 3300 	strd	r3, r3, [r0]
 800e1c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1c6:	6083      	str	r3, [r0, #8]
 800e1c8:	8181      	strh	r1, [r0, #12]
 800e1ca:	6643      	str	r3, [r0, #100]	; 0x64
 800e1cc:	81c2      	strh	r2, [r0, #14]
 800e1ce:	6183      	str	r3, [r0, #24]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	2208      	movs	r2, #8
 800e1d4:	305c      	adds	r0, #92	; 0x5c
 800e1d6:	f000 f92b 	bl	800e430 <memset>
 800e1da:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <std+0x38>)
 800e1dc:	6263      	str	r3, [r4, #36]	; 0x24
 800e1de:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <std+0x3c>)
 800e1e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1e2:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <std+0x40>)
 800e1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1e6:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <std+0x44>)
 800e1e8:	6224      	str	r4, [r4, #32]
 800e1ea:	6323      	str	r3, [r4, #48]	; 0x30
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800e79d 	.word	0x0800e79d
 800e1f4:	0800e7c3 	.word	0x0800e7c3
 800e1f8:	0800e7fb 	.word	0x0800e7fb
 800e1fc:	0800e81f 	.word	0x0800e81f

0800e200 <_cleanup_r>:
 800e200:	4901      	ldr	r1, [pc, #4]	; (800e208 <_cleanup_r+0x8>)
 800e202:	f000 b8af 	b.w	800e364 <_fwalk_reent>
 800e206:	bf00      	nop
 800e208:	0800f60d 	.word	0x0800f60d

0800e20c <__sfmoreglue>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	2268      	movs	r2, #104	; 0x68
 800e210:	1e4d      	subs	r5, r1, #1
 800e212:	4355      	muls	r5, r2
 800e214:	460e      	mov	r6, r1
 800e216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e21a:	f000 f97d 	bl	800e518 <_malloc_r>
 800e21e:	4604      	mov	r4, r0
 800e220:	b140      	cbz	r0, 800e234 <__sfmoreglue+0x28>
 800e222:	2100      	movs	r1, #0
 800e224:	e9c0 1600 	strd	r1, r6, [r0]
 800e228:	300c      	adds	r0, #12
 800e22a:	60a0      	str	r0, [r4, #8]
 800e22c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e230:	f000 f8fe 	bl	800e430 <memset>
 800e234:	4620      	mov	r0, r4
 800e236:	bd70      	pop	{r4, r5, r6, pc}

0800e238 <__sfp_lock_acquire>:
 800e238:	4801      	ldr	r0, [pc, #4]	; (800e240 <__sfp_lock_acquire+0x8>)
 800e23a:	f000 b8d8 	b.w	800e3ee <__retarget_lock_acquire_recursive>
 800e23e:	bf00      	nop
 800e240:	20002cd9 	.word	0x20002cd9

0800e244 <__sfp_lock_release>:
 800e244:	4801      	ldr	r0, [pc, #4]	; (800e24c <__sfp_lock_release+0x8>)
 800e246:	f000 b8d3 	b.w	800e3f0 <__retarget_lock_release_recursive>
 800e24a:	bf00      	nop
 800e24c:	20002cd9 	.word	0x20002cd9

0800e250 <__sinit_lock_acquire>:
 800e250:	4801      	ldr	r0, [pc, #4]	; (800e258 <__sinit_lock_acquire+0x8>)
 800e252:	f000 b8cc 	b.w	800e3ee <__retarget_lock_acquire_recursive>
 800e256:	bf00      	nop
 800e258:	20002cda 	.word	0x20002cda

0800e25c <__sinit_lock_release>:
 800e25c:	4801      	ldr	r0, [pc, #4]	; (800e264 <__sinit_lock_release+0x8>)
 800e25e:	f000 b8c7 	b.w	800e3f0 <__retarget_lock_release_recursive>
 800e262:	bf00      	nop
 800e264:	20002cda 	.word	0x20002cda

0800e268 <__sinit>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	4604      	mov	r4, r0
 800e26c:	f7ff fff0 	bl	800e250 <__sinit_lock_acquire>
 800e270:	69a3      	ldr	r3, [r4, #24]
 800e272:	b11b      	cbz	r3, 800e27c <__sinit+0x14>
 800e274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e278:	f7ff bff0 	b.w	800e25c <__sinit_lock_release>
 800e27c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e280:	6523      	str	r3, [r4, #80]	; 0x50
 800e282:	4b13      	ldr	r3, [pc, #76]	; (800e2d0 <__sinit+0x68>)
 800e284:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <__sinit+0x6c>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	62a2      	str	r2, [r4, #40]	; 0x28
 800e28a:	42a3      	cmp	r3, r4
 800e28c:	bf04      	itt	eq
 800e28e:	2301      	moveq	r3, #1
 800e290:	61a3      	streq	r3, [r4, #24]
 800e292:	4620      	mov	r0, r4
 800e294:	f000 f820 	bl	800e2d8 <__sfp>
 800e298:	6060      	str	r0, [r4, #4]
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 f81c 	bl	800e2d8 <__sfp>
 800e2a0:	60a0      	str	r0, [r4, #8]
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 f818 	bl	800e2d8 <__sfp>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	60e0      	str	r0, [r4, #12]
 800e2ac:	2104      	movs	r1, #4
 800e2ae:	6860      	ldr	r0, [r4, #4]
 800e2b0:	f7ff ff82 	bl	800e1b8 <std>
 800e2b4:	68a0      	ldr	r0, [r4, #8]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	2109      	movs	r1, #9
 800e2ba:	f7ff ff7d 	bl	800e1b8 <std>
 800e2be:	68e0      	ldr	r0, [r4, #12]
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	2112      	movs	r1, #18
 800e2c4:	f7ff ff78 	bl	800e1b8 <std>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	61a3      	str	r3, [r4, #24]
 800e2cc:	e7d2      	b.n	800e274 <__sinit+0xc>
 800e2ce:	bf00      	nop
 800e2d0:	08012174 	.word	0x08012174
 800e2d4:	0800e201 	.word	0x0800e201

0800e2d8 <__sfp>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	4607      	mov	r7, r0
 800e2dc:	f7ff ffac 	bl	800e238 <__sfp_lock_acquire>
 800e2e0:	4b1e      	ldr	r3, [pc, #120]	; (800e35c <__sfp+0x84>)
 800e2e2:	681e      	ldr	r6, [r3, #0]
 800e2e4:	69b3      	ldr	r3, [r6, #24]
 800e2e6:	b913      	cbnz	r3, 800e2ee <__sfp+0x16>
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff ffbd 	bl	800e268 <__sinit>
 800e2ee:	3648      	adds	r6, #72	; 0x48
 800e2f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	d503      	bpl.n	800e300 <__sfp+0x28>
 800e2f8:	6833      	ldr	r3, [r6, #0]
 800e2fa:	b30b      	cbz	r3, 800e340 <__sfp+0x68>
 800e2fc:	6836      	ldr	r6, [r6, #0]
 800e2fe:	e7f7      	b.n	800e2f0 <__sfp+0x18>
 800e300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e304:	b9d5      	cbnz	r5, 800e33c <__sfp+0x64>
 800e306:	4b16      	ldr	r3, [pc, #88]	; (800e360 <__sfp+0x88>)
 800e308:	60e3      	str	r3, [r4, #12]
 800e30a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e30e:	6665      	str	r5, [r4, #100]	; 0x64
 800e310:	f000 f86c 	bl	800e3ec <__retarget_lock_init_recursive>
 800e314:	f7ff ff96 	bl	800e244 <__sfp_lock_release>
 800e318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e31c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e320:	6025      	str	r5, [r4, #0]
 800e322:	61a5      	str	r5, [r4, #24]
 800e324:	2208      	movs	r2, #8
 800e326:	4629      	mov	r1, r5
 800e328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e32c:	f000 f880 	bl	800e430 <memset>
 800e330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e338:	4620      	mov	r0, r4
 800e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e33c:	3468      	adds	r4, #104	; 0x68
 800e33e:	e7d9      	b.n	800e2f4 <__sfp+0x1c>
 800e340:	2104      	movs	r1, #4
 800e342:	4638      	mov	r0, r7
 800e344:	f7ff ff62 	bl	800e20c <__sfmoreglue>
 800e348:	4604      	mov	r4, r0
 800e34a:	6030      	str	r0, [r6, #0]
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d1d5      	bne.n	800e2fc <__sfp+0x24>
 800e350:	f7ff ff78 	bl	800e244 <__sfp_lock_release>
 800e354:	230c      	movs	r3, #12
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	e7ee      	b.n	800e338 <__sfp+0x60>
 800e35a:	bf00      	nop
 800e35c:	08012174 	.word	0x08012174
 800e360:	ffff0001 	.word	0xffff0001

0800e364 <_fwalk_reent>:
 800e364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e368:	4606      	mov	r6, r0
 800e36a:	4688      	mov	r8, r1
 800e36c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e370:	2700      	movs	r7, #0
 800e372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e376:	f1b9 0901 	subs.w	r9, r9, #1
 800e37a:	d505      	bpl.n	800e388 <_fwalk_reent+0x24>
 800e37c:	6824      	ldr	r4, [r4, #0]
 800e37e:	2c00      	cmp	r4, #0
 800e380:	d1f7      	bne.n	800e372 <_fwalk_reent+0xe>
 800e382:	4638      	mov	r0, r7
 800e384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e388:	89ab      	ldrh	r3, [r5, #12]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d907      	bls.n	800e39e <_fwalk_reent+0x3a>
 800e38e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e392:	3301      	adds	r3, #1
 800e394:	d003      	beq.n	800e39e <_fwalk_reent+0x3a>
 800e396:	4629      	mov	r1, r5
 800e398:	4630      	mov	r0, r6
 800e39a:	47c0      	blx	r8
 800e39c:	4307      	orrs	r7, r0
 800e39e:	3568      	adds	r5, #104	; 0x68
 800e3a0:	e7e9      	b.n	800e376 <_fwalk_reent+0x12>
	...

0800e3a4 <__libc_init_array>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	4d0d      	ldr	r5, [pc, #52]	; (800e3dc <__libc_init_array+0x38>)
 800e3a8:	4c0d      	ldr	r4, [pc, #52]	; (800e3e0 <__libc_init_array+0x3c>)
 800e3aa:	1b64      	subs	r4, r4, r5
 800e3ac:	10a4      	asrs	r4, r4, #2
 800e3ae:	2600      	movs	r6, #0
 800e3b0:	42a6      	cmp	r6, r4
 800e3b2:	d109      	bne.n	800e3c8 <__libc_init_array+0x24>
 800e3b4:	4d0b      	ldr	r5, [pc, #44]	; (800e3e4 <__libc_init_array+0x40>)
 800e3b6:	4c0c      	ldr	r4, [pc, #48]	; (800e3e8 <__libc_init_array+0x44>)
 800e3b8:	f003 fcf0 	bl	8011d9c <_init>
 800e3bc:	1b64      	subs	r4, r4, r5
 800e3be:	10a4      	asrs	r4, r4, #2
 800e3c0:	2600      	movs	r6, #0
 800e3c2:	42a6      	cmp	r6, r4
 800e3c4:	d105      	bne.n	800e3d2 <__libc_init_array+0x2e>
 800e3c6:	bd70      	pop	{r4, r5, r6, pc}
 800e3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3cc:	4798      	blx	r3
 800e3ce:	3601      	adds	r6, #1
 800e3d0:	e7ee      	b.n	800e3b0 <__libc_init_array+0xc>
 800e3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d6:	4798      	blx	r3
 800e3d8:	3601      	adds	r6, #1
 800e3da:	e7f2      	b.n	800e3c2 <__libc_init_array+0x1e>
 800e3dc:	08012468 	.word	0x08012468
 800e3e0:	08012468 	.word	0x08012468
 800e3e4:	08012468 	.word	0x08012468
 800e3e8:	0801246c 	.word	0x0801246c

0800e3ec <__retarget_lock_init_recursive>:
 800e3ec:	4770      	bx	lr

0800e3ee <__retarget_lock_acquire_recursive>:
 800e3ee:	4770      	bx	lr

0800e3f0 <__retarget_lock_release_recursive>:
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <malloc>:
 800e3f4:	4b02      	ldr	r3, [pc, #8]	; (800e400 <malloc+0xc>)
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	6818      	ldr	r0, [r3, #0]
 800e3fa:	f000 b88d 	b.w	800e518 <_malloc_r>
 800e3fe:	bf00      	nop
 800e400:	20000184 	.word	0x20000184

0800e404 <free>:
 800e404:	4b02      	ldr	r3, [pc, #8]	; (800e410 <free+0xc>)
 800e406:	4601      	mov	r1, r0
 800e408:	6818      	ldr	r0, [r3, #0]
 800e40a:	f000 b819 	b.w	800e440 <_free_r>
 800e40e:	bf00      	nop
 800e410:	20000184 	.word	0x20000184

0800e414 <memcpy>:
 800e414:	440a      	add	r2, r1
 800e416:	4291      	cmp	r1, r2
 800e418:	f100 33ff 	add.w	r3, r0, #4294967295
 800e41c:	d100      	bne.n	800e420 <memcpy+0xc>
 800e41e:	4770      	bx	lr
 800e420:	b510      	push	{r4, lr}
 800e422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e42a:	4291      	cmp	r1, r2
 800e42c:	d1f9      	bne.n	800e422 <memcpy+0xe>
 800e42e:	bd10      	pop	{r4, pc}

0800e430 <memset>:
 800e430:	4402      	add	r2, r0
 800e432:	4603      	mov	r3, r0
 800e434:	4293      	cmp	r3, r2
 800e436:	d100      	bne.n	800e43a <memset+0xa>
 800e438:	4770      	bx	lr
 800e43a:	f803 1b01 	strb.w	r1, [r3], #1
 800e43e:	e7f9      	b.n	800e434 <memset+0x4>

0800e440 <_free_r>:
 800e440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e442:	2900      	cmp	r1, #0
 800e444:	d044      	beq.n	800e4d0 <_free_r+0x90>
 800e446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e44a:	9001      	str	r0, [sp, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f1a1 0404 	sub.w	r4, r1, #4
 800e452:	bfb8      	it	lt
 800e454:	18e4      	addlt	r4, r4, r3
 800e456:	f001 fca9 	bl	800fdac <__malloc_lock>
 800e45a:	4a1e      	ldr	r2, [pc, #120]	; (800e4d4 <_free_r+0x94>)
 800e45c:	9801      	ldr	r0, [sp, #4]
 800e45e:	6813      	ldr	r3, [r2, #0]
 800e460:	b933      	cbnz	r3, 800e470 <_free_r+0x30>
 800e462:	6063      	str	r3, [r4, #4]
 800e464:	6014      	str	r4, [r2, #0]
 800e466:	b003      	add	sp, #12
 800e468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e46c:	f001 bca4 	b.w	800fdb8 <__malloc_unlock>
 800e470:	42a3      	cmp	r3, r4
 800e472:	d908      	bls.n	800e486 <_free_r+0x46>
 800e474:	6825      	ldr	r5, [r4, #0]
 800e476:	1961      	adds	r1, r4, r5
 800e478:	428b      	cmp	r3, r1
 800e47a:	bf01      	itttt	eq
 800e47c:	6819      	ldreq	r1, [r3, #0]
 800e47e:	685b      	ldreq	r3, [r3, #4]
 800e480:	1949      	addeq	r1, r1, r5
 800e482:	6021      	streq	r1, [r4, #0]
 800e484:	e7ed      	b.n	800e462 <_free_r+0x22>
 800e486:	461a      	mov	r2, r3
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	b10b      	cbz	r3, 800e490 <_free_r+0x50>
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	d9fa      	bls.n	800e486 <_free_r+0x46>
 800e490:	6811      	ldr	r1, [r2, #0]
 800e492:	1855      	adds	r5, r2, r1
 800e494:	42a5      	cmp	r5, r4
 800e496:	d10b      	bne.n	800e4b0 <_free_r+0x70>
 800e498:	6824      	ldr	r4, [r4, #0]
 800e49a:	4421      	add	r1, r4
 800e49c:	1854      	adds	r4, r2, r1
 800e49e:	42a3      	cmp	r3, r4
 800e4a0:	6011      	str	r1, [r2, #0]
 800e4a2:	d1e0      	bne.n	800e466 <_free_r+0x26>
 800e4a4:	681c      	ldr	r4, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	6053      	str	r3, [r2, #4]
 800e4aa:	4421      	add	r1, r4
 800e4ac:	6011      	str	r1, [r2, #0]
 800e4ae:	e7da      	b.n	800e466 <_free_r+0x26>
 800e4b0:	d902      	bls.n	800e4b8 <_free_r+0x78>
 800e4b2:	230c      	movs	r3, #12
 800e4b4:	6003      	str	r3, [r0, #0]
 800e4b6:	e7d6      	b.n	800e466 <_free_r+0x26>
 800e4b8:	6825      	ldr	r5, [r4, #0]
 800e4ba:	1961      	adds	r1, r4, r5
 800e4bc:	428b      	cmp	r3, r1
 800e4be:	bf04      	itt	eq
 800e4c0:	6819      	ldreq	r1, [r3, #0]
 800e4c2:	685b      	ldreq	r3, [r3, #4]
 800e4c4:	6063      	str	r3, [r4, #4]
 800e4c6:	bf04      	itt	eq
 800e4c8:	1949      	addeq	r1, r1, r5
 800e4ca:	6021      	streq	r1, [r4, #0]
 800e4cc:	6054      	str	r4, [r2, #4]
 800e4ce:	e7ca      	b.n	800e466 <_free_r+0x26>
 800e4d0:	b003      	add	sp, #12
 800e4d2:	bd30      	pop	{r4, r5, pc}
 800e4d4:	20002cdc 	.word	0x20002cdc

0800e4d8 <sbrk_aligned>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	4e0e      	ldr	r6, [pc, #56]	; (800e514 <sbrk_aligned+0x3c>)
 800e4dc:	460c      	mov	r4, r1
 800e4de:	6831      	ldr	r1, [r6, #0]
 800e4e0:	4605      	mov	r5, r0
 800e4e2:	b911      	cbnz	r1, 800e4ea <sbrk_aligned+0x12>
 800e4e4:	f000 f8fe 	bl	800e6e4 <_sbrk_r>
 800e4e8:	6030      	str	r0, [r6, #0]
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	f000 f8f9 	bl	800e6e4 <_sbrk_r>
 800e4f2:	1c43      	adds	r3, r0, #1
 800e4f4:	d00a      	beq.n	800e50c <sbrk_aligned+0x34>
 800e4f6:	1cc4      	adds	r4, r0, #3
 800e4f8:	f024 0403 	bic.w	r4, r4, #3
 800e4fc:	42a0      	cmp	r0, r4
 800e4fe:	d007      	beq.n	800e510 <sbrk_aligned+0x38>
 800e500:	1a21      	subs	r1, r4, r0
 800e502:	4628      	mov	r0, r5
 800e504:	f000 f8ee 	bl	800e6e4 <_sbrk_r>
 800e508:	3001      	adds	r0, #1
 800e50a:	d101      	bne.n	800e510 <sbrk_aligned+0x38>
 800e50c:	f04f 34ff 	mov.w	r4, #4294967295
 800e510:	4620      	mov	r0, r4
 800e512:	bd70      	pop	{r4, r5, r6, pc}
 800e514:	20002ce0 	.word	0x20002ce0

0800e518 <_malloc_r>:
 800e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	1ccd      	adds	r5, r1, #3
 800e51e:	f025 0503 	bic.w	r5, r5, #3
 800e522:	3508      	adds	r5, #8
 800e524:	2d0c      	cmp	r5, #12
 800e526:	bf38      	it	cc
 800e528:	250c      	movcc	r5, #12
 800e52a:	2d00      	cmp	r5, #0
 800e52c:	4607      	mov	r7, r0
 800e52e:	db01      	blt.n	800e534 <_malloc_r+0x1c>
 800e530:	42a9      	cmp	r1, r5
 800e532:	d905      	bls.n	800e540 <_malloc_r+0x28>
 800e534:	230c      	movs	r3, #12
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	2600      	movs	r6, #0
 800e53a:	4630      	mov	r0, r6
 800e53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e540:	4e2e      	ldr	r6, [pc, #184]	; (800e5fc <_malloc_r+0xe4>)
 800e542:	f001 fc33 	bl	800fdac <__malloc_lock>
 800e546:	6833      	ldr	r3, [r6, #0]
 800e548:	461c      	mov	r4, r3
 800e54a:	bb34      	cbnz	r4, 800e59a <_malloc_r+0x82>
 800e54c:	4629      	mov	r1, r5
 800e54e:	4638      	mov	r0, r7
 800e550:	f7ff ffc2 	bl	800e4d8 <sbrk_aligned>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	4604      	mov	r4, r0
 800e558:	d14d      	bne.n	800e5f6 <_malloc_r+0xde>
 800e55a:	6834      	ldr	r4, [r6, #0]
 800e55c:	4626      	mov	r6, r4
 800e55e:	2e00      	cmp	r6, #0
 800e560:	d140      	bne.n	800e5e4 <_malloc_r+0xcc>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	4631      	mov	r1, r6
 800e566:	4638      	mov	r0, r7
 800e568:	eb04 0803 	add.w	r8, r4, r3
 800e56c:	f000 f8ba 	bl	800e6e4 <_sbrk_r>
 800e570:	4580      	cmp	r8, r0
 800e572:	d13a      	bne.n	800e5ea <_malloc_r+0xd2>
 800e574:	6821      	ldr	r1, [r4, #0]
 800e576:	3503      	adds	r5, #3
 800e578:	1a6d      	subs	r5, r5, r1
 800e57a:	f025 0503 	bic.w	r5, r5, #3
 800e57e:	3508      	adds	r5, #8
 800e580:	2d0c      	cmp	r5, #12
 800e582:	bf38      	it	cc
 800e584:	250c      	movcc	r5, #12
 800e586:	4629      	mov	r1, r5
 800e588:	4638      	mov	r0, r7
 800e58a:	f7ff ffa5 	bl	800e4d8 <sbrk_aligned>
 800e58e:	3001      	adds	r0, #1
 800e590:	d02b      	beq.n	800e5ea <_malloc_r+0xd2>
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	442b      	add	r3, r5
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	e00e      	b.n	800e5b8 <_malloc_r+0xa0>
 800e59a:	6822      	ldr	r2, [r4, #0]
 800e59c:	1b52      	subs	r2, r2, r5
 800e59e:	d41e      	bmi.n	800e5de <_malloc_r+0xc6>
 800e5a0:	2a0b      	cmp	r2, #11
 800e5a2:	d916      	bls.n	800e5d2 <_malloc_r+0xba>
 800e5a4:	1961      	adds	r1, r4, r5
 800e5a6:	42a3      	cmp	r3, r4
 800e5a8:	6025      	str	r5, [r4, #0]
 800e5aa:	bf18      	it	ne
 800e5ac:	6059      	strne	r1, [r3, #4]
 800e5ae:	6863      	ldr	r3, [r4, #4]
 800e5b0:	bf08      	it	eq
 800e5b2:	6031      	streq	r1, [r6, #0]
 800e5b4:	5162      	str	r2, [r4, r5]
 800e5b6:	604b      	str	r3, [r1, #4]
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f104 060b 	add.w	r6, r4, #11
 800e5be:	f001 fbfb 	bl	800fdb8 <__malloc_unlock>
 800e5c2:	f026 0607 	bic.w	r6, r6, #7
 800e5c6:	1d23      	adds	r3, r4, #4
 800e5c8:	1af2      	subs	r2, r6, r3
 800e5ca:	d0b6      	beq.n	800e53a <_malloc_r+0x22>
 800e5cc:	1b9b      	subs	r3, r3, r6
 800e5ce:	50a3      	str	r3, [r4, r2]
 800e5d0:	e7b3      	b.n	800e53a <_malloc_r+0x22>
 800e5d2:	6862      	ldr	r2, [r4, #4]
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	bf0c      	ite	eq
 800e5d8:	6032      	streq	r2, [r6, #0]
 800e5da:	605a      	strne	r2, [r3, #4]
 800e5dc:	e7ec      	b.n	800e5b8 <_malloc_r+0xa0>
 800e5de:	4623      	mov	r3, r4
 800e5e0:	6864      	ldr	r4, [r4, #4]
 800e5e2:	e7b2      	b.n	800e54a <_malloc_r+0x32>
 800e5e4:	4634      	mov	r4, r6
 800e5e6:	6876      	ldr	r6, [r6, #4]
 800e5e8:	e7b9      	b.n	800e55e <_malloc_r+0x46>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	603b      	str	r3, [r7, #0]
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	f001 fbe2 	bl	800fdb8 <__malloc_unlock>
 800e5f4:	e7a1      	b.n	800e53a <_malloc_r+0x22>
 800e5f6:	6025      	str	r5, [r4, #0]
 800e5f8:	e7de      	b.n	800e5b8 <_malloc_r+0xa0>
 800e5fa:	bf00      	nop
 800e5fc:	20002cdc 	.word	0x20002cdc

0800e600 <realloc>:
 800e600:	4b02      	ldr	r3, [pc, #8]	; (800e60c <realloc+0xc>)
 800e602:	460a      	mov	r2, r1
 800e604:	4601      	mov	r1, r0
 800e606:	6818      	ldr	r0, [r3, #0]
 800e608:	f002 b8b3 	b.w	8010772 <_realloc_r>
 800e60c:	20000184 	.word	0x20000184

0800e610 <cleanup_glue>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	460c      	mov	r4, r1
 800e614:	6809      	ldr	r1, [r1, #0]
 800e616:	4605      	mov	r5, r0
 800e618:	b109      	cbz	r1, 800e61e <cleanup_glue+0xe>
 800e61a:	f7ff fff9 	bl	800e610 <cleanup_glue>
 800e61e:	4621      	mov	r1, r4
 800e620:	4628      	mov	r0, r5
 800e622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e626:	f7ff bf0b 	b.w	800e440 <_free_r>
	...

0800e62c <_reclaim_reent>:
 800e62c:	4b2c      	ldr	r3, [pc, #176]	; (800e6e0 <_reclaim_reent+0xb4>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4283      	cmp	r3, r0
 800e632:	b570      	push	{r4, r5, r6, lr}
 800e634:	4604      	mov	r4, r0
 800e636:	d051      	beq.n	800e6dc <_reclaim_reent+0xb0>
 800e638:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e63a:	b143      	cbz	r3, 800e64e <_reclaim_reent+0x22>
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d14a      	bne.n	800e6d8 <_reclaim_reent+0xac>
 800e642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e644:	6819      	ldr	r1, [r3, #0]
 800e646:	b111      	cbz	r1, 800e64e <_reclaim_reent+0x22>
 800e648:	4620      	mov	r0, r4
 800e64a:	f7ff fef9 	bl	800e440 <_free_r>
 800e64e:	6961      	ldr	r1, [r4, #20]
 800e650:	b111      	cbz	r1, 800e658 <_reclaim_reent+0x2c>
 800e652:	4620      	mov	r0, r4
 800e654:	f7ff fef4 	bl	800e440 <_free_r>
 800e658:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e65a:	b111      	cbz	r1, 800e662 <_reclaim_reent+0x36>
 800e65c:	4620      	mov	r0, r4
 800e65e:	f7ff feef 	bl	800e440 <_free_r>
 800e662:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e664:	b111      	cbz	r1, 800e66c <_reclaim_reent+0x40>
 800e666:	4620      	mov	r0, r4
 800e668:	f7ff feea 	bl	800e440 <_free_r>
 800e66c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e66e:	b111      	cbz	r1, 800e676 <_reclaim_reent+0x4a>
 800e670:	4620      	mov	r0, r4
 800e672:	f7ff fee5 	bl	800e440 <_free_r>
 800e676:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e678:	b111      	cbz	r1, 800e680 <_reclaim_reent+0x54>
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7ff fee0 	bl	800e440 <_free_r>
 800e680:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e682:	b111      	cbz	r1, 800e68a <_reclaim_reent+0x5e>
 800e684:	4620      	mov	r0, r4
 800e686:	f7ff fedb 	bl	800e440 <_free_r>
 800e68a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e68c:	b111      	cbz	r1, 800e694 <_reclaim_reent+0x68>
 800e68e:	4620      	mov	r0, r4
 800e690:	f7ff fed6 	bl	800e440 <_free_r>
 800e694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e696:	b111      	cbz	r1, 800e69e <_reclaim_reent+0x72>
 800e698:	4620      	mov	r0, r4
 800e69a:	f7ff fed1 	bl	800e440 <_free_r>
 800e69e:	69a3      	ldr	r3, [r4, #24]
 800e6a0:	b1e3      	cbz	r3, 800e6dc <_reclaim_reent+0xb0>
 800e6a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	4798      	blx	r3
 800e6a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e6aa:	b1b9      	cbz	r1, 800e6dc <_reclaim_reent+0xb0>
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b2:	f7ff bfad 	b.w	800e610 <cleanup_glue>
 800e6b6:	5949      	ldr	r1, [r1, r5]
 800e6b8:	b941      	cbnz	r1, 800e6cc <_reclaim_reent+0xa0>
 800e6ba:	3504      	adds	r5, #4
 800e6bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6be:	2d80      	cmp	r5, #128	; 0x80
 800e6c0:	68d9      	ldr	r1, [r3, #12]
 800e6c2:	d1f8      	bne.n	800e6b6 <_reclaim_reent+0x8a>
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7ff febb 	bl	800e440 <_free_r>
 800e6ca:	e7ba      	b.n	800e642 <_reclaim_reent+0x16>
 800e6cc:	680e      	ldr	r6, [r1, #0]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f7ff feb6 	bl	800e440 <_free_r>
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	e7ef      	b.n	800e6b8 <_reclaim_reent+0x8c>
 800e6d8:	2500      	movs	r5, #0
 800e6da:	e7ef      	b.n	800e6bc <_reclaim_reent+0x90>
 800e6dc:	bd70      	pop	{r4, r5, r6, pc}
 800e6de:	bf00      	nop
 800e6e0:	20000184 	.word	0x20000184

0800e6e4 <_sbrk_r>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	4d06      	ldr	r5, [pc, #24]	; (800e700 <_sbrk_r+0x1c>)
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	4608      	mov	r0, r1
 800e6ee:	602b      	str	r3, [r5, #0]
 800e6f0:	f7f6 fe6a 	bl	80053c8 <_sbrk>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d102      	bne.n	800e6fe <_sbrk_r+0x1a>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	b103      	cbz	r3, 800e6fe <_sbrk_r+0x1a>
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	20002ce4 	.word	0x20002ce4

0800e704 <siprintf>:
 800e704:	b40e      	push	{r1, r2, r3}
 800e706:	b500      	push	{lr}
 800e708:	b09c      	sub	sp, #112	; 0x70
 800e70a:	ab1d      	add	r3, sp, #116	; 0x74
 800e70c:	9002      	str	r0, [sp, #8]
 800e70e:	9006      	str	r0, [sp, #24]
 800e710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e714:	4809      	ldr	r0, [pc, #36]	; (800e73c <siprintf+0x38>)
 800e716:	9107      	str	r1, [sp, #28]
 800e718:	9104      	str	r1, [sp, #16]
 800e71a:	4909      	ldr	r1, [pc, #36]	; (800e740 <siprintf+0x3c>)
 800e71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e720:	9105      	str	r1, [sp, #20]
 800e722:	6800      	ldr	r0, [r0, #0]
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	a902      	add	r1, sp, #8
 800e728:	f002 f8ae 	bl	8010888 <_svfiprintf_r>
 800e72c:	9b02      	ldr	r3, [sp, #8]
 800e72e:	2200      	movs	r2, #0
 800e730:	701a      	strb	r2, [r3, #0]
 800e732:	b01c      	add	sp, #112	; 0x70
 800e734:	f85d eb04 	ldr.w	lr, [sp], #4
 800e738:	b003      	add	sp, #12
 800e73a:	4770      	bx	lr
 800e73c:	20000184 	.word	0x20000184
 800e740:	ffff0208 	.word	0xffff0208

0800e744 <siscanf>:
 800e744:	b40e      	push	{r1, r2, r3}
 800e746:	b510      	push	{r4, lr}
 800e748:	b09f      	sub	sp, #124	; 0x7c
 800e74a:	ac21      	add	r4, sp, #132	; 0x84
 800e74c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e750:	f854 2b04 	ldr.w	r2, [r4], #4
 800e754:	9201      	str	r2, [sp, #4]
 800e756:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e75a:	9004      	str	r0, [sp, #16]
 800e75c:	9008      	str	r0, [sp, #32]
 800e75e:	f7f1 fd49 	bl	80001f4 <strlen>
 800e762:	4b0c      	ldr	r3, [pc, #48]	; (800e794 <siscanf+0x50>)
 800e764:	9005      	str	r0, [sp, #20]
 800e766:	9009      	str	r0, [sp, #36]	; 0x24
 800e768:	930d      	str	r3, [sp, #52]	; 0x34
 800e76a:	480b      	ldr	r0, [pc, #44]	; (800e798 <siscanf+0x54>)
 800e76c:	9a01      	ldr	r2, [sp, #4]
 800e76e:	6800      	ldr	r0, [r0, #0]
 800e770:	9403      	str	r4, [sp, #12]
 800e772:	2300      	movs	r3, #0
 800e774:	9311      	str	r3, [sp, #68]	; 0x44
 800e776:	9316      	str	r3, [sp, #88]	; 0x58
 800e778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e77c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e780:	a904      	add	r1, sp, #16
 800e782:	4623      	mov	r3, r4
 800e784:	f002 f9da 	bl	8010b3c <__ssvfiscanf_r>
 800e788:	b01f      	add	sp, #124	; 0x7c
 800e78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e78e:	b003      	add	sp, #12
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	0800e7bf 	.word	0x0800e7bf
 800e798:	20000184 	.word	0x20000184

0800e79c <__sread>:
 800e79c:	b510      	push	{r4, lr}
 800e79e:	460c      	mov	r4, r1
 800e7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a4:	f002 fe28 	bl	80113f8 <_read_r>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	bfab      	itete	ge
 800e7ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e7b0:	181b      	addge	r3, r3, r0
 800e7b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7b6:	bfac      	ite	ge
 800e7b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7ba:	81a3      	strhlt	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__seofread>:
 800e7be:	2000      	movs	r0, #0
 800e7c0:	4770      	bx	lr

0800e7c2 <__swrite>:
 800e7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c6:	461f      	mov	r7, r3
 800e7c8:	898b      	ldrh	r3, [r1, #12]
 800e7ca:	05db      	lsls	r3, r3, #23
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	d505      	bpl.n	800e7e0 <__swrite+0x1e>
 800e7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d8:	2302      	movs	r3, #2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f001 fac2 	bl	800fd64 <_lseek_r>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	4632      	mov	r2, r6
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f6:	f000 be61 	b.w	800f4bc <_write_r>

0800e7fa <__sseek>:
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e802:	f001 faaf 	bl	800fd64 <_lseek_r>
 800e806:	1c43      	adds	r3, r0, #1
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	bf15      	itete	ne
 800e80c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e80e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e816:	81a3      	strheq	r3, [r4, #12]
 800e818:	bf18      	it	ne
 800e81a:	81a3      	strhne	r3, [r4, #12]
 800e81c:	bd10      	pop	{r4, pc}

0800e81e <__sclose>:
 800e81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e822:	f000 be5d 	b.w	800f4e0 <_close_r>

0800e826 <strcpy>:
 800e826:	4603      	mov	r3, r0
 800e828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82c:	f803 2b01 	strb.w	r2, [r3], #1
 800e830:	2a00      	cmp	r2, #0
 800e832:	d1f9      	bne.n	800e828 <strcpy+0x2>
 800e834:	4770      	bx	lr

0800e836 <strncmp>:
 800e836:	b510      	push	{r4, lr}
 800e838:	b17a      	cbz	r2, 800e85a <strncmp+0x24>
 800e83a:	4603      	mov	r3, r0
 800e83c:	3901      	subs	r1, #1
 800e83e:	1884      	adds	r4, r0, r2
 800e840:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e848:	4290      	cmp	r0, r2
 800e84a:	d101      	bne.n	800e850 <strncmp+0x1a>
 800e84c:	42a3      	cmp	r3, r4
 800e84e:	d101      	bne.n	800e854 <strncmp+0x1e>
 800e850:	1a80      	subs	r0, r0, r2
 800e852:	bd10      	pop	{r4, pc}
 800e854:	2800      	cmp	r0, #0
 800e856:	d1f3      	bne.n	800e840 <strncmp+0xa>
 800e858:	e7fa      	b.n	800e850 <strncmp+0x1a>
 800e85a:	4610      	mov	r0, r2
 800e85c:	e7f9      	b.n	800e852 <strncmp+0x1c>

0800e85e <sulp>:
 800e85e:	b570      	push	{r4, r5, r6, lr}
 800e860:	4604      	mov	r4, r0
 800e862:	460d      	mov	r5, r1
 800e864:	ec45 4b10 	vmov	d0, r4, r5
 800e868:	4616      	mov	r6, r2
 800e86a:	f001 fe1d 	bl	80104a8 <__ulp>
 800e86e:	ec51 0b10 	vmov	r0, r1, d0
 800e872:	b17e      	cbz	r6, 800e894 <sulp+0x36>
 800e874:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e878:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	dd09      	ble.n	800e894 <sulp+0x36>
 800e880:	051b      	lsls	r3, r3, #20
 800e882:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e886:	2400      	movs	r4, #0
 800e888:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e88c:	4622      	mov	r2, r4
 800e88e:	462b      	mov	r3, r5
 800e890:	f7f1 feca 	bl	8000628 <__aeabi_dmul>
 800e894:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e898 <_strtod_l>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	ed2d 8b02 	vpush	{d8}
 800e8a0:	b09d      	sub	sp, #116	; 0x74
 800e8a2:	461f      	mov	r7, r3
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	9318      	str	r3, [sp, #96]	; 0x60
 800e8a8:	4ba2      	ldr	r3, [pc, #648]	; (800eb34 <_strtod_l+0x29c>)
 800e8aa:	9213      	str	r2, [sp, #76]	; 0x4c
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	9305      	str	r3, [sp, #20]
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	4688      	mov	r8, r1
 800e8b6:	f7f1 fc9d 	bl	80001f4 <strlen>
 800e8ba:	f04f 0a00 	mov.w	sl, #0
 800e8be:	4605      	mov	r5, r0
 800e8c0:	f04f 0b00 	mov.w	fp, #0
 800e8c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e8c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8ca:	781a      	ldrb	r2, [r3, #0]
 800e8cc:	2a2b      	cmp	r2, #43	; 0x2b
 800e8ce:	d04e      	beq.n	800e96e <_strtod_l+0xd6>
 800e8d0:	d83b      	bhi.n	800e94a <_strtod_l+0xb2>
 800e8d2:	2a0d      	cmp	r2, #13
 800e8d4:	d834      	bhi.n	800e940 <_strtod_l+0xa8>
 800e8d6:	2a08      	cmp	r2, #8
 800e8d8:	d834      	bhi.n	800e944 <_strtod_l+0xac>
 800e8da:	2a00      	cmp	r2, #0
 800e8dc:	d03e      	beq.n	800e95c <_strtod_l+0xc4>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e8e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e8e4:	7833      	ldrb	r3, [r6, #0]
 800e8e6:	2b30      	cmp	r3, #48	; 0x30
 800e8e8:	f040 80b0 	bne.w	800ea4c <_strtod_l+0x1b4>
 800e8ec:	7873      	ldrb	r3, [r6, #1]
 800e8ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e8f2:	2b58      	cmp	r3, #88	; 0x58
 800e8f4:	d168      	bne.n	800e9c8 <_strtod_l+0x130>
 800e8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	ab18      	add	r3, sp, #96	; 0x60
 800e8fc:	9702      	str	r7, [sp, #8]
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	4a8d      	ldr	r2, [pc, #564]	; (800eb38 <_strtod_l+0x2a0>)
 800e902:	ab19      	add	r3, sp, #100	; 0x64
 800e904:	a917      	add	r1, sp, #92	; 0x5c
 800e906:	4620      	mov	r0, r4
 800e908:	f000 ff24 	bl	800f754 <__gethex>
 800e90c:	f010 0707 	ands.w	r7, r0, #7
 800e910:	4605      	mov	r5, r0
 800e912:	d005      	beq.n	800e920 <_strtod_l+0x88>
 800e914:	2f06      	cmp	r7, #6
 800e916:	d12c      	bne.n	800e972 <_strtod_l+0xda>
 800e918:	3601      	adds	r6, #1
 800e91a:	2300      	movs	r3, #0
 800e91c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e91e:	930a      	str	r3, [sp, #40]	; 0x28
 800e920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e922:	2b00      	cmp	r3, #0
 800e924:	f040 8590 	bne.w	800f448 <_strtod_l+0xbb0>
 800e928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92a:	b1eb      	cbz	r3, 800e968 <_strtod_l+0xd0>
 800e92c:	4652      	mov	r2, sl
 800e92e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e932:	ec43 2b10 	vmov	d0, r2, r3
 800e936:	b01d      	add	sp, #116	; 0x74
 800e938:	ecbd 8b02 	vpop	{d8}
 800e93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e940:	2a20      	cmp	r2, #32
 800e942:	d1cc      	bne.n	800e8de <_strtod_l+0x46>
 800e944:	3301      	adds	r3, #1
 800e946:	9317      	str	r3, [sp, #92]	; 0x5c
 800e948:	e7be      	b.n	800e8c8 <_strtod_l+0x30>
 800e94a:	2a2d      	cmp	r2, #45	; 0x2d
 800e94c:	d1c7      	bne.n	800e8de <_strtod_l+0x46>
 800e94e:	2201      	movs	r2, #1
 800e950:	920a      	str	r2, [sp, #40]	; 0x28
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	9217      	str	r2, [sp, #92]	; 0x5c
 800e956:	785b      	ldrb	r3, [r3, #1]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1c2      	bne.n	800e8e2 <_strtod_l+0x4a>
 800e95c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e95e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e962:	2b00      	cmp	r3, #0
 800e964:	f040 856e 	bne.w	800f444 <_strtod_l+0xbac>
 800e968:	4652      	mov	r2, sl
 800e96a:	465b      	mov	r3, fp
 800e96c:	e7e1      	b.n	800e932 <_strtod_l+0x9a>
 800e96e:	2200      	movs	r2, #0
 800e970:	e7ee      	b.n	800e950 <_strtod_l+0xb8>
 800e972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e974:	b13a      	cbz	r2, 800e986 <_strtod_l+0xee>
 800e976:	2135      	movs	r1, #53	; 0x35
 800e978:	a81a      	add	r0, sp, #104	; 0x68
 800e97a:	f001 fea0 	bl	80106be <__copybits>
 800e97e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e980:	4620      	mov	r0, r4
 800e982:	f001 fa5f 	bl	800fe44 <_Bfree>
 800e986:	3f01      	subs	r7, #1
 800e988:	2f04      	cmp	r7, #4
 800e98a:	d806      	bhi.n	800e99a <_strtod_l+0x102>
 800e98c:	e8df f007 	tbb	[pc, r7]
 800e990:	1714030a 	.word	0x1714030a
 800e994:	0a          	.byte	0x0a
 800e995:	00          	.byte	0x00
 800e996:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e99a:	0728      	lsls	r0, r5, #28
 800e99c:	d5c0      	bpl.n	800e920 <_strtod_l+0x88>
 800e99e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e9a2:	e7bd      	b.n	800e920 <_strtod_l+0x88>
 800e9a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e9a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e9aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e9ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e9b6:	e7f0      	b.n	800e99a <_strtod_l+0x102>
 800e9b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800eb3c <_strtod_l+0x2a4>
 800e9bc:	e7ed      	b.n	800e99a <_strtod_l+0x102>
 800e9be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e9c2:	f04f 3aff 	mov.w	sl, #4294967295
 800e9c6:	e7e8      	b.n	800e99a <_strtod_l+0x102>
 800e9c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e9ce:	785b      	ldrb	r3, [r3, #1]
 800e9d0:	2b30      	cmp	r3, #48	; 0x30
 800e9d2:	d0f9      	beq.n	800e9c8 <_strtod_l+0x130>
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d0a3      	beq.n	800e920 <_strtod_l+0x88>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f04f 0900 	mov.w	r9, #0
 800e9de:	9304      	str	r3, [sp, #16]
 800e9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800e9e8:	464f      	mov	r7, r9
 800e9ea:	220a      	movs	r2, #10
 800e9ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e9ee:	7806      	ldrb	r6, [r0, #0]
 800e9f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e9f4:	b2d9      	uxtb	r1, r3
 800e9f6:	2909      	cmp	r1, #9
 800e9f8:	d92a      	bls.n	800ea50 <_strtod_l+0x1b8>
 800e9fa:	9905      	ldr	r1, [sp, #20]
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	f7ff ff1a 	bl	800e836 <strncmp>
 800ea02:	b398      	cbz	r0, 800ea6c <_strtod_l+0x1d4>
 800ea04:	2000      	movs	r0, #0
 800ea06:	4632      	mov	r2, r6
 800ea08:	463d      	mov	r5, r7
 800ea0a:	9005      	str	r0, [sp, #20]
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2a65      	cmp	r2, #101	; 0x65
 800ea10:	d001      	beq.n	800ea16 <_strtod_l+0x17e>
 800ea12:	2a45      	cmp	r2, #69	; 0x45
 800ea14:	d118      	bne.n	800ea48 <_strtod_l+0x1b0>
 800ea16:	b91d      	cbnz	r5, 800ea20 <_strtod_l+0x188>
 800ea18:	9a04      	ldr	r2, [sp, #16]
 800ea1a:	4302      	orrs	r2, r0
 800ea1c:	d09e      	beq.n	800e95c <_strtod_l+0xc4>
 800ea1e:	2500      	movs	r5, #0
 800ea20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ea24:	f108 0201 	add.w	r2, r8, #1
 800ea28:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ea2e:	2a2b      	cmp	r2, #43	; 0x2b
 800ea30:	d075      	beq.n	800eb1e <_strtod_l+0x286>
 800ea32:	2a2d      	cmp	r2, #45	; 0x2d
 800ea34:	d07b      	beq.n	800eb2e <_strtod_l+0x296>
 800ea36:	f04f 0c00 	mov.w	ip, #0
 800ea3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ea3e:	2909      	cmp	r1, #9
 800ea40:	f240 8082 	bls.w	800eb48 <_strtod_l+0x2b0>
 800ea44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ea48:	2600      	movs	r6, #0
 800ea4a:	e09d      	b.n	800eb88 <_strtod_l+0x2f0>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e7c4      	b.n	800e9da <_strtod_l+0x142>
 800ea50:	2f08      	cmp	r7, #8
 800ea52:	bfd8      	it	le
 800ea54:	9907      	ldrle	r1, [sp, #28]
 800ea56:	f100 0001 	add.w	r0, r0, #1
 800ea5a:	bfda      	itte	le
 800ea5c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea60:	9307      	strle	r3, [sp, #28]
 800ea62:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ea66:	3701      	adds	r7, #1
 800ea68:	9017      	str	r0, [sp, #92]	; 0x5c
 800ea6a:	e7bf      	b.n	800e9ec <_strtod_l+0x154>
 800ea6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea6e:	195a      	adds	r2, r3, r5
 800ea70:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea72:	5d5a      	ldrb	r2, [r3, r5]
 800ea74:	2f00      	cmp	r7, #0
 800ea76:	d037      	beq.n	800eae8 <_strtod_l+0x250>
 800ea78:	9005      	str	r0, [sp, #20]
 800ea7a:	463d      	mov	r5, r7
 800ea7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ea80:	2b09      	cmp	r3, #9
 800ea82:	d912      	bls.n	800eaaa <_strtod_l+0x212>
 800ea84:	2301      	movs	r3, #1
 800ea86:	e7c2      	b.n	800ea0e <_strtod_l+0x176>
 800ea88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea8e:	785a      	ldrb	r2, [r3, #1]
 800ea90:	3001      	adds	r0, #1
 800ea92:	2a30      	cmp	r2, #48	; 0x30
 800ea94:	d0f8      	beq.n	800ea88 <_strtod_l+0x1f0>
 800ea96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ea9a:	2b08      	cmp	r3, #8
 800ea9c:	f200 84d9 	bhi.w	800f452 <_strtod_l+0xbba>
 800eaa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eaa2:	9005      	str	r0, [sp, #20]
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	9308      	str	r3, [sp, #32]
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	3a30      	subs	r2, #48	; 0x30
 800eaac:	f100 0301 	add.w	r3, r0, #1
 800eab0:	d014      	beq.n	800eadc <_strtod_l+0x244>
 800eab2:	9905      	ldr	r1, [sp, #20]
 800eab4:	4419      	add	r1, r3
 800eab6:	9105      	str	r1, [sp, #20]
 800eab8:	462b      	mov	r3, r5
 800eaba:	eb00 0e05 	add.w	lr, r0, r5
 800eabe:	210a      	movs	r1, #10
 800eac0:	4573      	cmp	r3, lr
 800eac2:	d113      	bne.n	800eaec <_strtod_l+0x254>
 800eac4:	182b      	adds	r3, r5, r0
 800eac6:	2b08      	cmp	r3, #8
 800eac8:	f105 0501 	add.w	r5, r5, #1
 800eacc:	4405      	add	r5, r0
 800eace:	dc1c      	bgt.n	800eb0a <_strtod_l+0x272>
 800ead0:	9907      	ldr	r1, [sp, #28]
 800ead2:	230a      	movs	r3, #10
 800ead4:	fb03 2301 	mla	r3, r3, r1, r2
 800ead8:	9307      	str	r3, [sp, #28]
 800eada:	2300      	movs	r3, #0
 800eadc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eade:	1c51      	adds	r1, r2, #1
 800eae0:	9117      	str	r1, [sp, #92]	; 0x5c
 800eae2:	7852      	ldrb	r2, [r2, #1]
 800eae4:	4618      	mov	r0, r3
 800eae6:	e7c9      	b.n	800ea7c <_strtod_l+0x1e4>
 800eae8:	4638      	mov	r0, r7
 800eaea:	e7d2      	b.n	800ea92 <_strtod_l+0x1fa>
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	dc04      	bgt.n	800eafa <_strtod_l+0x262>
 800eaf0:	9e07      	ldr	r6, [sp, #28]
 800eaf2:	434e      	muls	r6, r1
 800eaf4:	9607      	str	r6, [sp, #28]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	e7e2      	b.n	800eac0 <_strtod_l+0x228>
 800eafa:	f103 0c01 	add.w	ip, r3, #1
 800eafe:	f1bc 0f10 	cmp.w	ip, #16
 800eb02:	bfd8      	it	le
 800eb04:	fb01 f909 	mulle.w	r9, r1, r9
 800eb08:	e7f5      	b.n	800eaf6 <_strtod_l+0x25e>
 800eb0a:	2d10      	cmp	r5, #16
 800eb0c:	bfdc      	itt	le
 800eb0e:	230a      	movle	r3, #10
 800eb10:	fb03 2909 	mlale	r9, r3, r9, r2
 800eb14:	e7e1      	b.n	800eada <_strtod_l+0x242>
 800eb16:	2300      	movs	r3, #0
 800eb18:	9305      	str	r3, [sp, #20]
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e77c      	b.n	800ea18 <_strtod_l+0x180>
 800eb1e:	f04f 0c00 	mov.w	ip, #0
 800eb22:	f108 0202 	add.w	r2, r8, #2
 800eb26:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb28:	f898 2002 	ldrb.w	r2, [r8, #2]
 800eb2c:	e785      	b.n	800ea3a <_strtod_l+0x1a2>
 800eb2e:	f04f 0c01 	mov.w	ip, #1
 800eb32:	e7f6      	b.n	800eb22 <_strtod_l+0x28a>
 800eb34:	08012250 	.word	0x08012250
 800eb38:	08012184 	.word	0x08012184
 800eb3c:	7ff00000 	.word	0x7ff00000
 800eb40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb42:	1c51      	adds	r1, r2, #1
 800eb44:	9117      	str	r1, [sp, #92]	; 0x5c
 800eb46:	7852      	ldrb	r2, [r2, #1]
 800eb48:	2a30      	cmp	r2, #48	; 0x30
 800eb4a:	d0f9      	beq.n	800eb40 <_strtod_l+0x2a8>
 800eb4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eb50:	2908      	cmp	r1, #8
 800eb52:	f63f af79 	bhi.w	800ea48 <_strtod_l+0x1b0>
 800eb56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eb5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb5c:	9206      	str	r2, [sp, #24]
 800eb5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb60:	1c51      	adds	r1, r2, #1
 800eb62:	9117      	str	r1, [sp, #92]	; 0x5c
 800eb64:	7852      	ldrb	r2, [r2, #1]
 800eb66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800eb6a:	2e09      	cmp	r6, #9
 800eb6c:	d937      	bls.n	800ebde <_strtod_l+0x346>
 800eb6e:	9e06      	ldr	r6, [sp, #24]
 800eb70:	1b89      	subs	r1, r1, r6
 800eb72:	2908      	cmp	r1, #8
 800eb74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800eb78:	dc02      	bgt.n	800eb80 <_strtod_l+0x2e8>
 800eb7a:	4576      	cmp	r6, lr
 800eb7c:	bfa8      	it	ge
 800eb7e:	4676      	movge	r6, lr
 800eb80:	f1bc 0f00 	cmp.w	ip, #0
 800eb84:	d000      	beq.n	800eb88 <_strtod_l+0x2f0>
 800eb86:	4276      	negs	r6, r6
 800eb88:	2d00      	cmp	r5, #0
 800eb8a:	d14d      	bne.n	800ec28 <_strtod_l+0x390>
 800eb8c:	9904      	ldr	r1, [sp, #16]
 800eb8e:	4301      	orrs	r1, r0
 800eb90:	f47f aec6 	bne.w	800e920 <_strtod_l+0x88>
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f47f aee1 	bne.w	800e95c <_strtod_l+0xc4>
 800eb9a:	2a69      	cmp	r2, #105	; 0x69
 800eb9c:	d027      	beq.n	800ebee <_strtod_l+0x356>
 800eb9e:	dc24      	bgt.n	800ebea <_strtod_l+0x352>
 800eba0:	2a49      	cmp	r2, #73	; 0x49
 800eba2:	d024      	beq.n	800ebee <_strtod_l+0x356>
 800eba4:	2a4e      	cmp	r2, #78	; 0x4e
 800eba6:	f47f aed9 	bne.w	800e95c <_strtod_l+0xc4>
 800ebaa:	499f      	ldr	r1, [pc, #636]	; (800ee28 <_strtod_l+0x590>)
 800ebac:	a817      	add	r0, sp, #92	; 0x5c
 800ebae:	f001 f829 	bl	800fc04 <__match>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f aed2 	beq.w	800e95c <_strtod_l+0xc4>
 800ebb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b28      	cmp	r3, #40	; 0x28
 800ebbe:	d12d      	bne.n	800ec1c <_strtod_l+0x384>
 800ebc0:	499a      	ldr	r1, [pc, #616]	; (800ee2c <_strtod_l+0x594>)
 800ebc2:	aa1a      	add	r2, sp, #104	; 0x68
 800ebc4:	a817      	add	r0, sp, #92	; 0x5c
 800ebc6:	f001 f831 	bl	800fc2c <__hexnan>
 800ebca:	2805      	cmp	r0, #5
 800ebcc:	d126      	bne.n	800ec1c <_strtod_l+0x384>
 800ebce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ebd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ebd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ebdc:	e6a0      	b.n	800e920 <_strtod_l+0x88>
 800ebde:	210a      	movs	r1, #10
 800ebe0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ebe4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ebe8:	e7b9      	b.n	800eb5e <_strtod_l+0x2c6>
 800ebea:	2a6e      	cmp	r2, #110	; 0x6e
 800ebec:	e7db      	b.n	800eba6 <_strtod_l+0x30e>
 800ebee:	4990      	ldr	r1, [pc, #576]	; (800ee30 <_strtod_l+0x598>)
 800ebf0:	a817      	add	r0, sp, #92	; 0x5c
 800ebf2:	f001 f807 	bl	800fc04 <__match>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f aeb0 	beq.w	800e95c <_strtod_l+0xc4>
 800ebfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebfe:	498d      	ldr	r1, [pc, #564]	; (800ee34 <_strtod_l+0x59c>)
 800ec00:	3b01      	subs	r3, #1
 800ec02:	a817      	add	r0, sp, #92	; 0x5c
 800ec04:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec06:	f000 fffd 	bl	800fc04 <__match>
 800ec0a:	b910      	cbnz	r0, 800ec12 <_strtod_l+0x37a>
 800ec0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec0e:	3301      	adds	r3, #1
 800ec10:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec12:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ee44 <_strtod_l+0x5ac>
 800ec16:	f04f 0a00 	mov.w	sl, #0
 800ec1a:	e681      	b.n	800e920 <_strtod_l+0x88>
 800ec1c:	4886      	ldr	r0, [pc, #536]	; (800ee38 <_strtod_l+0x5a0>)
 800ec1e:	f002 fbff 	bl	8011420 <nan>
 800ec22:	ec5b ab10 	vmov	sl, fp, d0
 800ec26:	e67b      	b.n	800e920 <_strtod_l+0x88>
 800ec28:	9b05      	ldr	r3, [sp, #20]
 800ec2a:	9807      	ldr	r0, [sp, #28]
 800ec2c:	1af3      	subs	r3, r6, r3
 800ec2e:	2f00      	cmp	r7, #0
 800ec30:	bf08      	it	eq
 800ec32:	462f      	moveq	r7, r5
 800ec34:	2d10      	cmp	r5, #16
 800ec36:	9306      	str	r3, [sp, #24]
 800ec38:	46a8      	mov	r8, r5
 800ec3a:	bfa8      	it	ge
 800ec3c:	f04f 0810 	movge.w	r8, #16
 800ec40:	f7f1 fc78 	bl	8000534 <__aeabi_ui2d>
 800ec44:	2d09      	cmp	r5, #9
 800ec46:	4682      	mov	sl, r0
 800ec48:	468b      	mov	fp, r1
 800ec4a:	dd13      	ble.n	800ec74 <_strtod_l+0x3dc>
 800ec4c:	4b7b      	ldr	r3, [pc, #492]	; (800ee3c <_strtod_l+0x5a4>)
 800ec4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ec52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ec56:	f7f1 fce7 	bl	8000628 <__aeabi_dmul>
 800ec5a:	4682      	mov	sl, r0
 800ec5c:	4648      	mov	r0, r9
 800ec5e:	468b      	mov	fp, r1
 800ec60:	f7f1 fc68 	bl	8000534 <__aeabi_ui2d>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4650      	mov	r0, sl
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	f7f1 fb26 	bl	80002bc <__adddf3>
 800ec70:	4682      	mov	sl, r0
 800ec72:	468b      	mov	fp, r1
 800ec74:	2d0f      	cmp	r5, #15
 800ec76:	dc38      	bgt.n	800ecea <_strtod_l+0x452>
 800ec78:	9b06      	ldr	r3, [sp, #24]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f43f ae50 	beq.w	800e920 <_strtod_l+0x88>
 800ec80:	dd24      	ble.n	800eccc <_strtod_l+0x434>
 800ec82:	2b16      	cmp	r3, #22
 800ec84:	dc0b      	bgt.n	800ec9e <_strtod_l+0x406>
 800ec86:	496d      	ldr	r1, [pc, #436]	; (800ee3c <_strtod_l+0x5a4>)
 800ec88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec90:	4652      	mov	r2, sl
 800ec92:	465b      	mov	r3, fp
 800ec94:	f7f1 fcc8 	bl	8000628 <__aeabi_dmul>
 800ec98:	4682      	mov	sl, r0
 800ec9a:	468b      	mov	fp, r1
 800ec9c:	e640      	b.n	800e920 <_strtod_l+0x88>
 800ec9e:	9a06      	ldr	r2, [sp, #24]
 800eca0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800eca4:	4293      	cmp	r3, r2
 800eca6:	db20      	blt.n	800ecea <_strtod_l+0x452>
 800eca8:	4c64      	ldr	r4, [pc, #400]	; (800ee3c <_strtod_l+0x5a4>)
 800ecaa:	f1c5 050f 	rsb	r5, r5, #15
 800ecae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ecb2:	4652      	mov	r2, sl
 800ecb4:	465b      	mov	r3, fp
 800ecb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecba:	f7f1 fcb5 	bl	8000628 <__aeabi_dmul>
 800ecbe:	9b06      	ldr	r3, [sp, #24]
 800ecc0:	1b5d      	subs	r5, r3, r5
 800ecc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ecc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ecca:	e7e3      	b.n	800ec94 <_strtod_l+0x3fc>
 800eccc:	9b06      	ldr	r3, [sp, #24]
 800ecce:	3316      	adds	r3, #22
 800ecd0:	db0b      	blt.n	800ecea <_strtod_l+0x452>
 800ecd2:	9b05      	ldr	r3, [sp, #20]
 800ecd4:	1b9e      	subs	r6, r3, r6
 800ecd6:	4b59      	ldr	r3, [pc, #356]	; (800ee3c <_strtod_l+0x5a4>)
 800ecd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ecdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ece0:	4650      	mov	r0, sl
 800ece2:	4659      	mov	r1, fp
 800ece4:	f7f1 fdca 	bl	800087c <__aeabi_ddiv>
 800ece8:	e7d6      	b.n	800ec98 <_strtod_l+0x400>
 800ecea:	9b06      	ldr	r3, [sp, #24]
 800ecec:	eba5 0808 	sub.w	r8, r5, r8
 800ecf0:	4498      	add	r8, r3
 800ecf2:	f1b8 0f00 	cmp.w	r8, #0
 800ecf6:	dd74      	ble.n	800ede2 <_strtod_l+0x54a>
 800ecf8:	f018 030f 	ands.w	r3, r8, #15
 800ecfc:	d00a      	beq.n	800ed14 <_strtod_l+0x47c>
 800ecfe:	494f      	ldr	r1, [pc, #316]	; (800ee3c <_strtod_l+0x5a4>)
 800ed00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed04:	4652      	mov	r2, sl
 800ed06:	465b      	mov	r3, fp
 800ed08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed0c:	f7f1 fc8c 	bl	8000628 <__aeabi_dmul>
 800ed10:	4682      	mov	sl, r0
 800ed12:	468b      	mov	fp, r1
 800ed14:	f038 080f 	bics.w	r8, r8, #15
 800ed18:	d04f      	beq.n	800edba <_strtod_l+0x522>
 800ed1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ed1e:	dd22      	ble.n	800ed66 <_strtod_l+0x4ce>
 800ed20:	2500      	movs	r5, #0
 800ed22:	462e      	mov	r6, r5
 800ed24:	9507      	str	r5, [sp, #28]
 800ed26:	9505      	str	r5, [sp, #20]
 800ed28:	2322      	movs	r3, #34	; 0x22
 800ed2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ee44 <_strtod_l+0x5ac>
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	f04f 0a00 	mov.w	sl, #0
 800ed34:	9b07      	ldr	r3, [sp, #28]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f43f adf2 	beq.w	800e920 <_strtod_l+0x88>
 800ed3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f001 f880 	bl	800fe44 <_Bfree>
 800ed44:	9905      	ldr	r1, [sp, #20]
 800ed46:	4620      	mov	r0, r4
 800ed48:	f001 f87c 	bl	800fe44 <_Bfree>
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f001 f878 	bl	800fe44 <_Bfree>
 800ed54:	9907      	ldr	r1, [sp, #28]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f001 f874 	bl	800fe44 <_Bfree>
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f001 f870 	bl	800fe44 <_Bfree>
 800ed64:	e5dc      	b.n	800e920 <_strtod_l+0x88>
 800ed66:	4b36      	ldr	r3, [pc, #216]	; (800ee40 <_strtod_l+0x5a8>)
 800ed68:	9304      	str	r3, [sp, #16]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ed70:	4650      	mov	r0, sl
 800ed72:	4659      	mov	r1, fp
 800ed74:	4699      	mov	r9, r3
 800ed76:	f1b8 0f01 	cmp.w	r8, #1
 800ed7a:	dc21      	bgt.n	800edc0 <_strtod_l+0x528>
 800ed7c:	b10b      	cbz	r3, 800ed82 <_strtod_l+0x4ea>
 800ed7e:	4682      	mov	sl, r0
 800ed80:	468b      	mov	fp, r1
 800ed82:	4b2f      	ldr	r3, [pc, #188]	; (800ee40 <_strtod_l+0x5a8>)
 800ed84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ed88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ed8c:	4652      	mov	r2, sl
 800ed8e:	465b      	mov	r3, fp
 800ed90:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ed94:	f7f1 fc48 	bl	8000628 <__aeabi_dmul>
 800ed98:	4b2a      	ldr	r3, [pc, #168]	; (800ee44 <_strtod_l+0x5ac>)
 800ed9a:	460a      	mov	r2, r1
 800ed9c:	400b      	ands	r3, r1
 800ed9e:	492a      	ldr	r1, [pc, #168]	; (800ee48 <_strtod_l+0x5b0>)
 800eda0:	428b      	cmp	r3, r1
 800eda2:	4682      	mov	sl, r0
 800eda4:	d8bc      	bhi.n	800ed20 <_strtod_l+0x488>
 800eda6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800edaa:	428b      	cmp	r3, r1
 800edac:	bf86      	itte	hi
 800edae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ee4c <_strtod_l+0x5b4>
 800edb2:	f04f 3aff 	movhi.w	sl, #4294967295
 800edb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800edba:	2300      	movs	r3, #0
 800edbc:	9304      	str	r3, [sp, #16]
 800edbe:	e084      	b.n	800eeca <_strtod_l+0x632>
 800edc0:	f018 0f01 	tst.w	r8, #1
 800edc4:	d005      	beq.n	800edd2 <_strtod_l+0x53a>
 800edc6:	9b04      	ldr	r3, [sp, #16]
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	f7f1 fc2c 	bl	8000628 <__aeabi_dmul>
 800edd0:	2301      	movs	r3, #1
 800edd2:	9a04      	ldr	r2, [sp, #16]
 800edd4:	3208      	adds	r2, #8
 800edd6:	f109 0901 	add.w	r9, r9, #1
 800edda:	ea4f 0868 	mov.w	r8, r8, asr #1
 800edde:	9204      	str	r2, [sp, #16]
 800ede0:	e7c9      	b.n	800ed76 <_strtod_l+0x4de>
 800ede2:	d0ea      	beq.n	800edba <_strtod_l+0x522>
 800ede4:	f1c8 0800 	rsb	r8, r8, #0
 800ede8:	f018 020f 	ands.w	r2, r8, #15
 800edec:	d00a      	beq.n	800ee04 <_strtod_l+0x56c>
 800edee:	4b13      	ldr	r3, [pc, #76]	; (800ee3c <_strtod_l+0x5a4>)
 800edf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edf4:	4650      	mov	r0, sl
 800edf6:	4659      	mov	r1, fp
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	f7f1 fd3e 	bl	800087c <__aeabi_ddiv>
 800ee00:	4682      	mov	sl, r0
 800ee02:	468b      	mov	fp, r1
 800ee04:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ee08:	d0d7      	beq.n	800edba <_strtod_l+0x522>
 800ee0a:	f1b8 0f1f 	cmp.w	r8, #31
 800ee0e:	dd1f      	ble.n	800ee50 <_strtod_l+0x5b8>
 800ee10:	2500      	movs	r5, #0
 800ee12:	462e      	mov	r6, r5
 800ee14:	9507      	str	r5, [sp, #28]
 800ee16:	9505      	str	r5, [sp, #20]
 800ee18:	2322      	movs	r3, #34	; 0x22
 800ee1a:	f04f 0a00 	mov.w	sl, #0
 800ee1e:	f04f 0b00 	mov.w	fp, #0
 800ee22:	6023      	str	r3, [r4, #0]
 800ee24:	e786      	b.n	800ed34 <_strtod_l+0x49c>
 800ee26:	bf00      	nop
 800ee28:	08012181 	.word	0x08012181
 800ee2c:	08012198 	.word	0x08012198
 800ee30:	08012178 	.word	0x08012178
 800ee34:	0801217b 	.word	0x0801217b
 800ee38:	0801245d 	.word	0x0801245d
 800ee3c:	08012300 	.word	0x08012300
 800ee40:	080122d8 	.word	0x080122d8
 800ee44:	7ff00000 	.word	0x7ff00000
 800ee48:	7ca00000 	.word	0x7ca00000
 800ee4c:	7fefffff 	.word	0x7fefffff
 800ee50:	f018 0310 	ands.w	r3, r8, #16
 800ee54:	bf18      	it	ne
 800ee56:	236a      	movne	r3, #106	; 0x6a
 800ee58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f208 <_strtod_l+0x970>
 800ee5c:	9304      	str	r3, [sp, #16]
 800ee5e:	4650      	mov	r0, sl
 800ee60:	4659      	mov	r1, fp
 800ee62:	2300      	movs	r3, #0
 800ee64:	f018 0f01 	tst.w	r8, #1
 800ee68:	d004      	beq.n	800ee74 <_strtod_l+0x5dc>
 800ee6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ee6e:	f7f1 fbdb 	bl	8000628 <__aeabi_dmul>
 800ee72:	2301      	movs	r3, #1
 800ee74:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ee78:	f109 0908 	add.w	r9, r9, #8
 800ee7c:	d1f2      	bne.n	800ee64 <_strtod_l+0x5cc>
 800ee7e:	b10b      	cbz	r3, 800ee84 <_strtod_l+0x5ec>
 800ee80:	4682      	mov	sl, r0
 800ee82:	468b      	mov	fp, r1
 800ee84:	9b04      	ldr	r3, [sp, #16]
 800ee86:	b1c3      	cbz	r3, 800eeba <_strtod_l+0x622>
 800ee88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ee8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	4659      	mov	r1, fp
 800ee94:	dd11      	ble.n	800eeba <_strtod_l+0x622>
 800ee96:	2b1f      	cmp	r3, #31
 800ee98:	f340 8124 	ble.w	800f0e4 <_strtod_l+0x84c>
 800ee9c:	2b34      	cmp	r3, #52	; 0x34
 800ee9e:	bfde      	ittt	le
 800eea0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800eea4:	f04f 33ff 	movle.w	r3, #4294967295
 800eea8:	fa03 f202 	lslle.w	r2, r3, r2
 800eeac:	f04f 0a00 	mov.w	sl, #0
 800eeb0:	bfcc      	ite	gt
 800eeb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eeb6:	ea02 0b01 	andle.w	fp, r2, r1
 800eeba:	2200      	movs	r2, #0
 800eebc:	2300      	movs	r3, #0
 800eebe:	4650      	mov	r0, sl
 800eec0:	4659      	mov	r1, fp
 800eec2:	f7f1 fe19 	bl	8000af8 <__aeabi_dcmpeq>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d1a2      	bne.n	800ee10 <_strtod_l+0x578>
 800eeca:	9b07      	ldr	r3, [sp, #28]
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	9908      	ldr	r1, [sp, #32]
 800eed0:	462b      	mov	r3, r5
 800eed2:	463a      	mov	r2, r7
 800eed4:	4620      	mov	r0, r4
 800eed6:	f001 f81d 	bl	800ff14 <__s2b>
 800eeda:	9007      	str	r0, [sp, #28]
 800eedc:	2800      	cmp	r0, #0
 800eede:	f43f af1f 	beq.w	800ed20 <_strtod_l+0x488>
 800eee2:	9b05      	ldr	r3, [sp, #20]
 800eee4:	1b9e      	subs	r6, r3, r6
 800eee6:	9b06      	ldr	r3, [sp, #24]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	bfb4      	ite	lt
 800eeec:	4633      	movlt	r3, r6
 800eeee:	2300      	movge	r3, #0
 800eef0:	930c      	str	r3, [sp, #48]	; 0x30
 800eef2:	9b06      	ldr	r3, [sp, #24]
 800eef4:	2500      	movs	r5, #0
 800eef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eefa:	9312      	str	r3, [sp, #72]	; 0x48
 800eefc:	462e      	mov	r6, r5
 800eefe:	9b07      	ldr	r3, [sp, #28]
 800ef00:	4620      	mov	r0, r4
 800ef02:	6859      	ldr	r1, [r3, #4]
 800ef04:	f000 ff5e 	bl	800fdc4 <_Balloc>
 800ef08:	9005      	str	r0, [sp, #20]
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	f43f af0c 	beq.w	800ed28 <_strtod_l+0x490>
 800ef10:	9b07      	ldr	r3, [sp, #28]
 800ef12:	691a      	ldr	r2, [r3, #16]
 800ef14:	3202      	adds	r2, #2
 800ef16:	f103 010c 	add.w	r1, r3, #12
 800ef1a:	0092      	lsls	r2, r2, #2
 800ef1c:	300c      	adds	r0, #12
 800ef1e:	f7ff fa79 	bl	800e414 <memcpy>
 800ef22:	ec4b ab10 	vmov	d0, sl, fp
 800ef26:	aa1a      	add	r2, sp, #104	; 0x68
 800ef28:	a919      	add	r1, sp, #100	; 0x64
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f001 fb38 	bl	80105a0 <__d2b>
 800ef30:	ec4b ab18 	vmov	d8, sl, fp
 800ef34:	9018      	str	r0, [sp, #96]	; 0x60
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f43f aef6 	beq.w	800ed28 <_strtod_l+0x490>
 800ef3c:	2101      	movs	r1, #1
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f001 f882 	bl	8010048 <__i2b>
 800ef44:	4606      	mov	r6, r0
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f aeee 	beq.w	800ed28 <_strtod_l+0x490>
 800ef4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef4e:	9904      	ldr	r1, [sp, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	bfab      	itete	ge
 800ef54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ef56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ef58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ef5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ef5e:	bfac      	ite	ge
 800ef60:	eb03 0902 	addge.w	r9, r3, r2
 800ef64:	1ad7      	sublt	r7, r2, r3
 800ef66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef68:	eba3 0801 	sub.w	r8, r3, r1
 800ef6c:	4490      	add	r8, r2
 800ef6e:	4ba1      	ldr	r3, [pc, #644]	; (800f1f4 <_strtod_l+0x95c>)
 800ef70:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef74:	4598      	cmp	r8, r3
 800ef76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ef7a:	f280 80c7 	bge.w	800f10c <_strtod_l+0x874>
 800ef7e:	eba3 0308 	sub.w	r3, r3, r8
 800ef82:	2b1f      	cmp	r3, #31
 800ef84:	eba2 0203 	sub.w	r2, r2, r3
 800ef88:	f04f 0101 	mov.w	r1, #1
 800ef8c:	f300 80b1 	bgt.w	800f0f2 <_strtod_l+0x85a>
 800ef90:	fa01 f303 	lsl.w	r3, r1, r3
 800ef94:	930d      	str	r3, [sp, #52]	; 0x34
 800ef96:	2300      	movs	r3, #0
 800ef98:	9308      	str	r3, [sp, #32]
 800ef9a:	eb09 0802 	add.w	r8, r9, r2
 800ef9e:	9b04      	ldr	r3, [sp, #16]
 800efa0:	45c1      	cmp	r9, r8
 800efa2:	4417      	add	r7, r2
 800efa4:	441f      	add	r7, r3
 800efa6:	464b      	mov	r3, r9
 800efa8:	bfa8      	it	ge
 800efaa:	4643      	movge	r3, r8
 800efac:	42bb      	cmp	r3, r7
 800efae:	bfa8      	it	ge
 800efb0:	463b      	movge	r3, r7
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	bfc2      	ittt	gt
 800efb6:	eba8 0803 	subgt.w	r8, r8, r3
 800efba:	1aff      	subgt	r7, r7, r3
 800efbc:	eba9 0903 	subgt.w	r9, r9, r3
 800efc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	dd17      	ble.n	800eff6 <_strtod_l+0x75e>
 800efc6:	4631      	mov	r1, r6
 800efc8:	461a      	mov	r2, r3
 800efca:	4620      	mov	r0, r4
 800efcc:	f001 f8fc 	bl	80101c8 <__pow5mult>
 800efd0:	4606      	mov	r6, r0
 800efd2:	2800      	cmp	r0, #0
 800efd4:	f43f aea8 	beq.w	800ed28 <_strtod_l+0x490>
 800efd8:	4601      	mov	r1, r0
 800efda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800efdc:	4620      	mov	r0, r4
 800efde:	f001 f849 	bl	8010074 <__multiply>
 800efe2:	900b      	str	r0, [sp, #44]	; 0x2c
 800efe4:	2800      	cmp	r0, #0
 800efe6:	f43f ae9f 	beq.w	800ed28 <_strtod_l+0x490>
 800efea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800efec:	4620      	mov	r0, r4
 800efee:	f000 ff29 	bl	800fe44 <_Bfree>
 800eff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eff4:	9318      	str	r3, [sp, #96]	; 0x60
 800eff6:	f1b8 0f00 	cmp.w	r8, #0
 800effa:	f300 808c 	bgt.w	800f116 <_strtod_l+0x87e>
 800effe:	9b06      	ldr	r3, [sp, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	dd08      	ble.n	800f016 <_strtod_l+0x77e>
 800f004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f006:	9905      	ldr	r1, [sp, #20]
 800f008:	4620      	mov	r0, r4
 800f00a:	f001 f8dd 	bl	80101c8 <__pow5mult>
 800f00e:	9005      	str	r0, [sp, #20]
 800f010:	2800      	cmp	r0, #0
 800f012:	f43f ae89 	beq.w	800ed28 <_strtod_l+0x490>
 800f016:	2f00      	cmp	r7, #0
 800f018:	dd08      	ble.n	800f02c <_strtod_l+0x794>
 800f01a:	9905      	ldr	r1, [sp, #20]
 800f01c:	463a      	mov	r2, r7
 800f01e:	4620      	mov	r0, r4
 800f020:	f001 f92c 	bl	801027c <__lshift>
 800f024:	9005      	str	r0, [sp, #20]
 800f026:	2800      	cmp	r0, #0
 800f028:	f43f ae7e 	beq.w	800ed28 <_strtod_l+0x490>
 800f02c:	f1b9 0f00 	cmp.w	r9, #0
 800f030:	dd08      	ble.n	800f044 <_strtod_l+0x7ac>
 800f032:	4631      	mov	r1, r6
 800f034:	464a      	mov	r2, r9
 800f036:	4620      	mov	r0, r4
 800f038:	f001 f920 	bl	801027c <__lshift>
 800f03c:	4606      	mov	r6, r0
 800f03e:	2800      	cmp	r0, #0
 800f040:	f43f ae72 	beq.w	800ed28 <_strtod_l+0x490>
 800f044:	9a05      	ldr	r2, [sp, #20]
 800f046:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f048:	4620      	mov	r0, r4
 800f04a:	f001 f9a3 	bl	8010394 <__mdiff>
 800f04e:	4605      	mov	r5, r0
 800f050:	2800      	cmp	r0, #0
 800f052:	f43f ae69 	beq.w	800ed28 <_strtod_l+0x490>
 800f056:	68c3      	ldr	r3, [r0, #12]
 800f058:	930b      	str	r3, [sp, #44]	; 0x2c
 800f05a:	2300      	movs	r3, #0
 800f05c:	60c3      	str	r3, [r0, #12]
 800f05e:	4631      	mov	r1, r6
 800f060:	f001 f97c 	bl	801035c <__mcmp>
 800f064:	2800      	cmp	r0, #0
 800f066:	da60      	bge.n	800f12a <_strtod_l+0x892>
 800f068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f06a:	ea53 030a 	orrs.w	r3, r3, sl
 800f06e:	f040 8082 	bne.w	800f176 <_strtod_l+0x8de>
 800f072:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f076:	2b00      	cmp	r3, #0
 800f078:	d17d      	bne.n	800f176 <_strtod_l+0x8de>
 800f07a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f07e:	0d1b      	lsrs	r3, r3, #20
 800f080:	051b      	lsls	r3, r3, #20
 800f082:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f086:	d976      	bls.n	800f176 <_strtod_l+0x8de>
 800f088:	696b      	ldr	r3, [r5, #20]
 800f08a:	b913      	cbnz	r3, 800f092 <_strtod_l+0x7fa>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	2b01      	cmp	r3, #1
 800f090:	dd71      	ble.n	800f176 <_strtod_l+0x8de>
 800f092:	4629      	mov	r1, r5
 800f094:	2201      	movs	r2, #1
 800f096:	4620      	mov	r0, r4
 800f098:	f001 f8f0 	bl	801027c <__lshift>
 800f09c:	4631      	mov	r1, r6
 800f09e:	4605      	mov	r5, r0
 800f0a0:	f001 f95c 	bl	801035c <__mcmp>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dd66      	ble.n	800f176 <_strtod_l+0x8de>
 800f0a8:	9904      	ldr	r1, [sp, #16]
 800f0aa:	4a53      	ldr	r2, [pc, #332]	; (800f1f8 <_strtod_l+0x960>)
 800f0ac:	465b      	mov	r3, fp
 800f0ae:	2900      	cmp	r1, #0
 800f0b0:	f000 8081 	beq.w	800f1b6 <_strtod_l+0x91e>
 800f0b4:	ea02 010b 	and.w	r1, r2, fp
 800f0b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f0bc:	dc7b      	bgt.n	800f1b6 <_strtod_l+0x91e>
 800f0be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f0c2:	f77f aea9 	ble.w	800ee18 <_strtod_l+0x580>
 800f0c6:	4b4d      	ldr	r3, [pc, #308]	; (800f1fc <_strtod_l+0x964>)
 800f0c8:	4650      	mov	r0, sl
 800f0ca:	4659      	mov	r1, fp
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f7f1 faab 	bl	8000628 <__aeabi_dmul>
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	4303      	orrs	r3, r0
 800f0d6:	bf08      	it	eq
 800f0d8:	2322      	moveq	r3, #34	; 0x22
 800f0da:	4682      	mov	sl, r0
 800f0dc:	468b      	mov	fp, r1
 800f0de:	bf08      	it	eq
 800f0e0:	6023      	streq	r3, [r4, #0]
 800f0e2:	e62b      	b.n	800ed3c <_strtod_l+0x4a4>
 800f0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ec:	ea03 0a0a 	and.w	sl, r3, sl
 800f0f0:	e6e3      	b.n	800eeba <_strtod_l+0x622>
 800f0f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f0f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f0fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f0fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f102:	fa01 f308 	lsl.w	r3, r1, r8
 800f106:	9308      	str	r3, [sp, #32]
 800f108:	910d      	str	r1, [sp, #52]	; 0x34
 800f10a:	e746      	b.n	800ef9a <_strtod_l+0x702>
 800f10c:	2300      	movs	r3, #0
 800f10e:	9308      	str	r3, [sp, #32]
 800f110:	2301      	movs	r3, #1
 800f112:	930d      	str	r3, [sp, #52]	; 0x34
 800f114:	e741      	b.n	800ef9a <_strtod_l+0x702>
 800f116:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f118:	4642      	mov	r2, r8
 800f11a:	4620      	mov	r0, r4
 800f11c:	f001 f8ae 	bl	801027c <__lshift>
 800f120:	9018      	str	r0, [sp, #96]	; 0x60
 800f122:	2800      	cmp	r0, #0
 800f124:	f47f af6b 	bne.w	800effe <_strtod_l+0x766>
 800f128:	e5fe      	b.n	800ed28 <_strtod_l+0x490>
 800f12a:	465f      	mov	r7, fp
 800f12c:	d16e      	bne.n	800f20c <_strtod_l+0x974>
 800f12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f134:	b342      	cbz	r2, 800f188 <_strtod_l+0x8f0>
 800f136:	4a32      	ldr	r2, [pc, #200]	; (800f200 <_strtod_l+0x968>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d128      	bne.n	800f18e <_strtod_l+0x8f6>
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	4651      	mov	r1, sl
 800f140:	b1eb      	cbz	r3, 800f17e <_strtod_l+0x8e6>
 800f142:	4b2d      	ldr	r3, [pc, #180]	; (800f1f8 <_strtod_l+0x960>)
 800f144:	403b      	ands	r3, r7
 800f146:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f14a:	f04f 32ff 	mov.w	r2, #4294967295
 800f14e:	d819      	bhi.n	800f184 <_strtod_l+0x8ec>
 800f150:	0d1b      	lsrs	r3, r3, #20
 800f152:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f156:	fa02 f303 	lsl.w	r3, r2, r3
 800f15a:	4299      	cmp	r1, r3
 800f15c:	d117      	bne.n	800f18e <_strtod_l+0x8f6>
 800f15e:	4b29      	ldr	r3, [pc, #164]	; (800f204 <_strtod_l+0x96c>)
 800f160:	429f      	cmp	r7, r3
 800f162:	d102      	bne.n	800f16a <_strtod_l+0x8d2>
 800f164:	3101      	adds	r1, #1
 800f166:	f43f addf 	beq.w	800ed28 <_strtod_l+0x490>
 800f16a:	4b23      	ldr	r3, [pc, #140]	; (800f1f8 <_strtod_l+0x960>)
 800f16c:	403b      	ands	r3, r7
 800f16e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f172:	f04f 0a00 	mov.w	sl, #0
 800f176:	9b04      	ldr	r3, [sp, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1a4      	bne.n	800f0c6 <_strtod_l+0x82e>
 800f17c:	e5de      	b.n	800ed3c <_strtod_l+0x4a4>
 800f17e:	f04f 33ff 	mov.w	r3, #4294967295
 800f182:	e7ea      	b.n	800f15a <_strtod_l+0x8c2>
 800f184:	4613      	mov	r3, r2
 800f186:	e7e8      	b.n	800f15a <_strtod_l+0x8c2>
 800f188:	ea53 030a 	orrs.w	r3, r3, sl
 800f18c:	d08c      	beq.n	800f0a8 <_strtod_l+0x810>
 800f18e:	9b08      	ldr	r3, [sp, #32]
 800f190:	b1db      	cbz	r3, 800f1ca <_strtod_l+0x932>
 800f192:	423b      	tst	r3, r7
 800f194:	d0ef      	beq.n	800f176 <_strtod_l+0x8de>
 800f196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f198:	9a04      	ldr	r2, [sp, #16]
 800f19a:	4650      	mov	r0, sl
 800f19c:	4659      	mov	r1, fp
 800f19e:	b1c3      	cbz	r3, 800f1d2 <_strtod_l+0x93a>
 800f1a0:	f7ff fb5d 	bl	800e85e <sulp>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	ec51 0b18 	vmov	r0, r1, d8
 800f1ac:	f7f1 f886 	bl	80002bc <__adddf3>
 800f1b0:	4682      	mov	sl, r0
 800f1b2:	468b      	mov	fp, r1
 800f1b4:	e7df      	b.n	800f176 <_strtod_l+0x8de>
 800f1b6:	4013      	ands	r3, r2
 800f1b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f1bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f1c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f1c4:	f04f 3aff 	mov.w	sl, #4294967295
 800f1c8:	e7d5      	b.n	800f176 <_strtod_l+0x8de>
 800f1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1cc:	ea13 0f0a 	tst.w	r3, sl
 800f1d0:	e7e0      	b.n	800f194 <_strtod_l+0x8fc>
 800f1d2:	f7ff fb44 	bl	800e85e <sulp>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	ec51 0b18 	vmov	r0, r1, d8
 800f1de:	f7f1 f86b 	bl	80002b8 <__aeabi_dsub>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4682      	mov	sl, r0
 800f1e8:	468b      	mov	fp, r1
 800f1ea:	f7f1 fc85 	bl	8000af8 <__aeabi_dcmpeq>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d0c1      	beq.n	800f176 <_strtod_l+0x8de>
 800f1f2:	e611      	b.n	800ee18 <_strtod_l+0x580>
 800f1f4:	fffffc02 	.word	0xfffffc02
 800f1f8:	7ff00000 	.word	0x7ff00000
 800f1fc:	39500000 	.word	0x39500000
 800f200:	000fffff 	.word	0x000fffff
 800f204:	7fefffff 	.word	0x7fefffff
 800f208:	080121b0 	.word	0x080121b0
 800f20c:	4631      	mov	r1, r6
 800f20e:	4628      	mov	r0, r5
 800f210:	f001 fa22 	bl	8010658 <__ratio>
 800f214:	ec59 8b10 	vmov	r8, r9, d0
 800f218:	ee10 0a10 	vmov	r0, s0
 800f21c:	2200      	movs	r2, #0
 800f21e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f222:	4649      	mov	r1, r9
 800f224:	f7f1 fc7c 	bl	8000b20 <__aeabi_dcmple>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d07a      	beq.n	800f322 <_strtod_l+0xa8a>
 800f22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d04a      	beq.n	800f2c8 <_strtod_l+0xa30>
 800f232:	4b95      	ldr	r3, [pc, #596]	; (800f488 <_strtod_l+0xbf0>)
 800f234:	2200      	movs	r2, #0
 800f236:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f23a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f488 <_strtod_l+0xbf0>
 800f23e:	f04f 0800 	mov.w	r8, #0
 800f242:	4b92      	ldr	r3, [pc, #584]	; (800f48c <_strtod_l+0xbf4>)
 800f244:	403b      	ands	r3, r7
 800f246:	930d      	str	r3, [sp, #52]	; 0x34
 800f248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f24a:	4b91      	ldr	r3, [pc, #580]	; (800f490 <_strtod_l+0xbf8>)
 800f24c:	429a      	cmp	r2, r3
 800f24e:	f040 80b0 	bne.w	800f3b2 <_strtod_l+0xb1a>
 800f252:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f256:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f25a:	ec4b ab10 	vmov	d0, sl, fp
 800f25e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f262:	f001 f921 	bl	80104a8 <__ulp>
 800f266:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f26a:	ec53 2b10 	vmov	r2, r3, d0
 800f26e:	f7f1 f9db 	bl	8000628 <__aeabi_dmul>
 800f272:	4652      	mov	r2, sl
 800f274:	465b      	mov	r3, fp
 800f276:	f7f1 f821 	bl	80002bc <__adddf3>
 800f27a:	460b      	mov	r3, r1
 800f27c:	4983      	ldr	r1, [pc, #524]	; (800f48c <_strtod_l+0xbf4>)
 800f27e:	4a85      	ldr	r2, [pc, #532]	; (800f494 <_strtod_l+0xbfc>)
 800f280:	4019      	ands	r1, r3
 800f282:	4291      	cmp	r1, r2
 800f284:	4682      	mov	sl, r0
 800f286:	d960      	bls.n	800f34a <_strtod_l+0xab2>
 800f288:	ee18 3a90 	vmov	r3, s17
 800f28c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f290:	4293      	cmp	r3, r2
 800f292:	d104      	bne.n	800f29e <_strtod_l+0xa06>
 800f294:	ee18 3a10 	vmov	r3, s16
 800f298:	3301      	adds	r3, #1
 800f29a:	f43f ad45 	beq.w	800ed28 <_strtod_l+0x490>
 800f29e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f4a0 <_strtod_l+0xc08>
 800f2a2:	f04f 3aff 	mov.w	sl, #4294967295
 800f2a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f000 fdcb 	bl	800fe44 <_Bfree>
 800f2ae:	9905      	ldr	r1, [sp, #20]
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 fdc7 	bl	800fe44 <_Bfree>
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fdc3 	bl	800fe44 <_Bfree>
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 fdbf 	bl	800fe44 <_Bfree>
 800f2c6:	e61a      	b.n	800eefe <_strtod_l+0x666>
 800f2c8:	f1ba 0f00 	cmp.w	sl, #0
 800f2cc:	d11b      	bne.n	800f306 <_strtod_l+0xa6e>
 800f2ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2d2:	b9f3      	cbnz	r3, 800f312 <_strtod_l+0xa7a>
 800f2d4:	4b6c      	ldr	r3, [pc, #432]	; (800f488 <_strtod_l+0xbf0>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4640      	mov	r0, r8
 800f2da:	4649      	mov	r1, r9
 800f2dc:	f7f1 fc16 	bl	8000b0c <__aeabi_dcmplt>
 800f2e0:	b9d0      	cbnz	r0, 800f318 <_strtod_l+0xa80>
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	4b6c      	ldr	r3, [pc, #432]	; (800f498 <_strtod_l+0xc00>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f7f1 f99d 	bl	8000628 <__aeabi_dmul>
 800f2ee:	4680      	mov	r8, r0
 800f2f0:	4689      	mov	r9, r1
 800f2f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f2f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f2fa:	9315      	str	r3, [sp, #84]	; 0x54
 800f2fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f300:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f304:	e79d      	b.n	800f242 <_strtod_l+0x9aa>
 800f306:	f1ba 0f01 	cmp.w	sl, #1
 800f30a:	d102      	bne.n	800f312 <_strtod_l+0xa7a>
 800f30c:	2f00      	cmp	r7, #0
 800f30e:	f43f ad83 	beq.w	800ee18 <_strtod_l+0x580>
 800f312:	4b62      	ldr	r3, [pc, #392]	; (800f49c <_strtod_l+0xc04>)
 800f314:	2200      	movs	r2, #0
 800f316:	e78e      	b.n	800f236 <_strtod_l+0x99e>
 800f318:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f498 <_strtod_l+0xc00>
 800f31c:	f04f 0800 	mov.w	r8, #0
 800f320:	e7e7      	b.n	800f2f2 <_strtod_l+0xa5a>
 800f322:	4b5d      	ldr	r3, [pc, #372]	; (800f498 <_strtod_l+0xc00>)
 800f324:	4640      	mov	r0, r8
 800f326:	4649      	mov	r1, r9
 800f328:	2200      	movs	r2, #0
 800f32a:	f7f1 f97d 	bl	8000628 <__aeabi_dmul>
 800f32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f330:	4680      	mov	r8, r0
 800f332:	4689      	mov	r9, r1
 800f334:	b933      	cbnz	r3, 800f344 <_strtod_l+0xaac>
 800f336:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f33a:	900e      	str	r0, [sp, #56]	; 0x38
 800f33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f33e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f342:	e7dd      	b.n	800f300 <_strtod_l+0xa68>
 800f344:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f348:	e7f9      	b.n	800f33e <_strtod_l+0xaa6>
 800f34a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f34e:	9b04      	ldr	r3, [sp, #16]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1a8      	bne.n	800f2a6 <_strtod_l+0xa0e>
 800f354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f35a:	0d1b      	lsrs	r3, r3, #20
 800f35c:	051b      	lsls	r3, r3, #20
 800f35e:	429a      	cmp	r2, r3
 800f360:	d1a1      	bne.n	800f2a6 <_strtod_l+0xa0e>
 800f362:	4640      	mov	r0, r8
 800f364:	4649      	mov	r1, r9
 800f366:	f7f1 fcbf 	bl	8000ce8 <__aeabi_d2lz>
 800f36a:	f7f1 f92f 	bl	80005cc <__aeabi_l2d>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4640      	mov	r0, r8
 800f374:	4649      	mov	r1, r9
 800f376:	f7f0 ff9f 	bl	80002b8 <__aeabi_dsub>
 800f37a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f380:	ea43 030a 	orr.w	r3, r3, sl
 800f384:	4313      	orrs	r3, r2
 800f386:	4680      	mov	r8, r0
 800f388:	4689      	mov	r9, r1
 800f38a:	d055      	beq.n	800f438 <_strtod_l+0xba0>
 800f38c:	a336      	add	r3, pc, #216	; (adr r3, 800f468 <_strtod_l+0xbd0>)
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	f7f1 fbbb 	bl	8000b0c <__aeabi_dcmplt>
 800f396:	2800      	cmp	r0, #0
 800f398:	f47f acd0 	bne.w	800ed3c <_strtod_l+0x4a4>
 800f39c:	a334      	add	r3, pc, #208	; (adr r3, 800f470 <_strtod_l+0xbd8>)
 800f39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	f7f1 fbcf 	bl	8000b48 <__aeabi_dcmpgt>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f43f af7b 	beq.w	800f2a6 <_strtod_l+0xa0e>
 800f3b0:	e4c4      	b.n	800ed3c <_strtod_l+0x4a4>
 800f3b2:	9b04      	ldr	r3, [sp, #16]
 800f3b4:	b333      	cbz	r3, 800f404 <_strtod_l+0xb6c>
 800f3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f3bc:	d822      	bhi.n	800f404 <_strtod_l+0xb6c>
 800f3be:	a32e      	add	r3, pc, #184	; (adr r3, 800f478 <_strtod_l+0xbe0>)
 800f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	f7f1 fbaa 	bl	8000b20 <__aeabi_dcmple>
 800f3cc:	b1a0      	cbz	r0, 800f3f8 <_strtod_l+0xb60>
 800f3ce:	4649      	mov	r1, r9
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	f7f1 fc01 	bl	8000bd8 <__aeabi_d2uiz>
 800f3d6:	2801      	cmp	r0, #1
 800f3d8:	bf38      	it	cc
 800f3da:	2001      	movcc	r0, #1
 800f3dc:	f7f1 f8aa 	bl	8000534 <__aeabi_ui2d>
 800f3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3e2:	4680      	mov	r8, r0
 800f3e4:	4689      	mov	r9, r1
 800f3e6:	bb23      	cbnz	r3, 800f432 <_strtod_l+0xb9a>
 800f3e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3ec:	9010      	str	r0, [sp, #64]	; 0x40
 800f3ee:	9311      	str	r3, [sp, #68]	; 0x44
 800f3f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f3f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f400:	1a9b      	subs	r3, r3, r2
 800f402:	9309      	str	r3, [sp, #36]	; 0x24
 800f404:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f408:	eeb0 0a48 	vmov.f32	s0, s16
 800f40c:	eef0 0a68 	vmov.f32	s1, s17
 800f410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f414:	f001 f848 	bl	80104a8 <__ulp>
 800f418:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f41c:	ec53 2b10 	vmov	r2, r3, d0
 800f420:	f7f1 f902 	bl	8000628 <__aeabi_dmul>
 800f424:	ec53 2b18 	vmov	r2, r3, d8
 800f428:	f7f0 ff48 	bl	80002bc <__adddf3>
 800f42c:	4682      	mov	sl, r0
 800f42e:	468b      	mov	fp, r1
 800f430:	e78d      	b.n	800f34e <_strtod_l+0xab6>
 800f432:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f436:	e7db      	b.n	800f3f0 <_strtod_l+0xb58>
 800f438:	a311      	add	r3, pc, #68	; (adr r3, 800f480 <_strtod_l+0xbe8>)
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	f7f1 fb65 	bl	8000b0c <__aeabi_dcmplt>
 800f442:	e7b2      	b.n	800f3aa <_strtod_l+0xb12>
 800f444:	2300      	movs	r3, #0
 800f446:	930a      	str	r3, [sp, #40]	; 0x28
 800f448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f44a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f44c:	6013      	str	r3, [r2, #0]
 800f44e:	f7ff ba6b 	b.w	800e928 <_strtod_l+0x90>
 800f452:	2a65      	cmp	r2, #101	; 0x65
 800f454:	f43f ab5f 	beq.w	800eb16 <_strtod_l+0x27e>
 800f458:	2a45      	cmp	r2, #69	; 0x45
 800f45a:	f43f ab5c 	beq.w	800eb16 <_strtod_l+0x27e>
 800f45e:	2301      	movs	r3, #1
 800f460:	f7ff bb94 	b.w	800eb8c <_strtod_l+0x2f4>
 800f464:	f3af 8000 	nop.w
 800f468:	94a03595 	.word	0x94a03595
 800f46c:	3fdfffff 	.word	0x3fdfffff
 800f470:	35afe535 	.word	0x35afe535
 800f474:	3fe00000 	.word	0x3fe00000
 800f478:	ffc00000 	.word	0xffc00000
 800f47c:	41dfffff 	.word	0x41dfffff
 800f480:	94a03595 	.word	0x94a03595
 800f484:	3fcfffff 	.word	0x3fcfffff
 800f488:	3ff00000 	.word	0x3ff00000
 800f48c:	7ff00000 	.word	0x7ff00000
 800f490:	7fe00000 	.word	0x7fe00000
 800f494:	7c9fffff 	.word	0x7c9fffff
 800f498:	3fe00000 	.word	0x3fe00000
 800f49c:	bff00000 	.word	0xbff00000
 800f4a0:	7fefffff 	.word	0x7fefffff

0800f4a4 <strtod>:
 800f4a4:	460a      	mov	r2, r1
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	4802      	ldr	r0, [pc, #8]	; (800f4b4 <strtod+0x10>)
 800f4aa:	4b03      	ldr	r3, [pc, #12]	; (800f4b8 <strtod+0x14>)
 800f4ac:	6800      	ldr	r0, [r0, #0]
 800f4ae:	f7ff b9f3 	b.w	800e898 <_strtod_l>
 800f4b2:	bf00      	nop
 800f4b4:	20000184 	.word	0x20000184
 800f4b8:	200001ec 	.word	0x200001ec

0800f4bc <_write_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	4d07      	ldr	r5, [pc, #28]	; (800f4dc <_write_r+0x20>)
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	4608      	mov	r0, r1
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	602a      	str	r2, [r5, #0]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	f7f5 ff2b 	bl	8005326 <_write>
 800f4d0:	1c43      	adds	r3, r0, #1
 800f4d2:	d102      	bne.n	800f4da <_write_r+0x1e>
 800f4d4:	682b      	ldr	r3, [r5, #0]
 800f4d6:	b103      	cbz	r3, 800f4da <_write_r+0x1e>
 800f4d8:	6023      	str	r3, [r4, #0]
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	20002ce4 	.word	0x20002ce4

0800f4e0 <_close_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d06      	ldr	r5, [pc, #24]	; (800f4fc <_close_r+0x1c>)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	f7f5 ff37 	bl	800535e <_close>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d102      	bne.n	800f4fa <_close_r+0x1a>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	b103      	cbz	r3, 800f4fa <_close_r+0x1a>
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	20002ce4 	.word	0x20002ce4

0800f500 <__sflush_r>:
 800f500:	898a      	ldrh	r2, [r1, #12]
 800f502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f506:	4605      	mov	r5, r0
 800f508:	0710      	lsls	r0, r2, #28
 800f50a:	460c      	mov	r4, r1
 800f50c:	d458      	bmi.n	800f5c0 <__sflush_r+0xc0>
 800f50e:	684b      	ldr	r3, [r1, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	dc05      	bgt.n	800f520 <__sflush_r+0x20>
 800f514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f516:	2b00      	cmp	r3, #0
 800f518:	dc02      	bgt.n	800f520 <__sflush_r+0x20>
 800f51a:	2000      	movs	r0, #0
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f522:	2e00      	cmp	r6, #0
 800f524:	d0f9      	beq.n	800f51a <__sflush_r+0x1a>
 800f526:	2300      	movs	r3, #0
 800f528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f52c:	682f      	ldr	r7, [r5, #0]
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	d032      	beq.n	800f598 <__sflush_r+0x98>
 800f532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f534:	89a3      	ldrh	r3, [r4, #12]
 800f536:	075a      	lsls	r2, r3, #29
 800f538:	d505      	bpl.n	800f546 <__sflush_r+0x46>
 800f53a:	6863      	ldr	r3, [r4, #4]
 800f53c:	1ac0      	subs	r0, r0, r3
 800f53e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f540:	b10b      	cbz	r3, 800f546 <__sflush_r+0x46>
 800f542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f544:	1ac0      	subs	r0, r0, r3
 800f546:	2300      	movs	r3, #0
 800f548:	4602      	mov	r2, r0
 800f54a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f54c:	6a21      	ldr	r1, [r4, #32]
 800f54e:	4628      	mov	r0, r5
 800f550:	47b0      	blx	r6
 800f552:	1c43      	adds	r3, r0, #1
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	d106      	bne.n	800f566 <__sflush_r+0x66>
 800f558:	6829      	ldr	r1, [r5, #0]
 800f55a:	291d      	cmp	r1, #29
 800f55c:	d82c      	bhi.n	800f5b8 <__sflush_r+0xb8>
 800f55e:	4a2a      	ldr	r2, [pc, #168]	; (800f608 <__sflush_r+0x108>)
 800f560:	40ca      	lsrs	r2, r1
 800f562:	07d6      	lsls	r6, r2, #31
 800f564:	d528      	bpl.n	800f5b8 <__sflush_r+0xb8>
 800f566:	2200      	movs	r2, #0
 800f568:	6062      	str	r2, [r4, #4]
 800f56a:	04d9      	lsls	r1, r3, #19
 800f56c:	6922      	ldr	r2, [r4, #16]
 800f56e:	6022      	str	r2, [r4, #0]
 800f570:	d504      	bpl.n	800f57c <__sflush_r+0x7c>
 800f572:	1c42      	adds	r2, r0, #1
 800f574:	d101      	bne.n	800f57a <__sflush_r+0x7a>
 800f576:	682b      	ldr	r3, [r5, #0]
 800f578:	b903      	cbnz	r3, 800f57c <__sflush_r+0x7c>
 800f57a:	6560      	str	r0, [r4, #84]	; 0x54
 800f57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f57e:	602f      	str	r7, [r5, #0]
 800f580:	2900      	cmp	r1, #0
 800f582:	d0ca      	beq.n	800f51a <__sflush_r+0x1a>
 800f584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f588:	4299      	cmp	r1, r3
 800f58a:	d002      	beq.n	800f592 <__sflush_r+0x92>
 800f58c:	4628      	mov	r0, r5
 800f58e:	f7fe ff57 	bl	800e440 <_free_r>
 800f592:	2000      	movs	r0, #0
 800f594:	6360      	str	r0, [r4, #52]	; 0x34
 800f596:	e7c1      	b.n	800f51c <__sflush_r+0x1c>
 800f598:	6a21      	ldr	r1, [r4, #32]
 800f59a:	2301      	movs	r3, #1
 800f59c:	4628      	mov	r0, r5
 800f59e:	47b0      	blx	r6
 800f5a0:	1c41      	adds	r1, r0, #1
 800f5a2:	d1c7      	bne.n	800f534 <__sflush_r+0x34>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d0c4      	beq.n	800f534 <__sflush_r+0x34>
 800f5aa:	2b1d      	cmp	r3, #29
 800f5ac:	d001      	beq.n	800f5b2 <__sflush_r+0xb2>
 800f5ae:	2b16      	cmp	r3, #22
 800f5b0:	d101      	bne.n	800f5b6 <__sflush_r+0xb6>
 800f5b2:	602f      	str	r7, [r5, #0]
 800f5b4:	e7b1      	b.n	800f51a <__sflush_r+0x1a>
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5bc:	81a3      	strh	r3, [r4, #12]
 800f5be:	e7ad      	b.n	800f51c <__sflush_r+0x1c>
 800f5c0:	690f      	ldr	r7, [r1, #16]
 800f5c2:	2f00      	cmp	r7, #0
 800f5c4:	d0a9      	beq.n	800f51a <__sflush_r+0x1a>
 800f5c6:	0793      	lsls	r3, r2, #30
 800f5c8:	680e      	ldr	r6, [r1, #0]
 800f5ca:	bf08      	it	eq
 800f5cc:	694b      	ldreq	r3, [r1, #20]
 800f5ce:	600f      	str	r7, [r1, #0]
 800f5d0:	bf18      	it	ne
 800f5d2:	2300      	movne	r3, #0
 800f5d4:	eba6 0807 	sub.w	r8, r6, r7
 800f5d8:	608b      	str	r3, [r1, #8]
 800f5da:	f1b8 0f00 	cmp.w	r8, #0
 800f5de:	dd9c      	ble.n	800f51a <__sflush_r+0x1a>
 800f5e0:	6a21      	ldr	r1, [r4, #32]
 800f5e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5e4:	4643      	mov	r3, r8
 800f5e6:	463a      	mov	r2, r7
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	47b0      	blx	r6
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	dc06      	bgt.n	800f5fe <__sflush_r+0xfe>
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	e78e      	b.n	800f51c <__sflush_r+0x1c>
 800f5fe:	4407      	add	r7, r0
 800f600:	eba8 0800 	sub.w	r8, r8, r0
 800f604:	e7e9      	b.n	800f5da <__sflush_r+0xda>
 800f606:	bf00      	nop
 800f608:	20400001 	.word	0x20400001

0800f60c <_fflush_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	690b      	ldr	r3, [r1, #16]
 800f610:	4605      	mov	r5, r0
 800f612:	460c      	mov	r4, r1
 800f614:	b913      	cbnz	r3, 800f61c <_fflush_r+0x10>
 800f616:	2500      	movs	r5, #0
 800f618:	4628      	mov	r0, r5
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	b118      	cbz	r0, 800f626 <_fflush_r+0x1a>
 800f61e:	6983      	ldr	r3, [r0, #24]
 800f620:	b90b      	cbnz	r3, 800f626 <_fflush_r+0x1a>
 800f622:	f7fe fe21 	bl	800e268 <__sinit>
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <_fflush_r+0x6c>)
 800f628:	429c      	cmp	r4, r3
 800f62a:	d11b      	bne.n	800f664 <_fflush_r+0x58>
 800f62c:	686c      	ldr	r4, [r5, #4]
 800f62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0ef      	beq.n	800f616 <_fflush_r+0xa>
 800f636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f638:	07d0      	lsls	r0, r2, #31
 800f63a:	d404      	bmi.n	800f646 <_fflush_r+0x3a>
 800f63c:	0599      	lsls	r1, r3, #22
 800f63e:	d402      	bmi.n	800f646 <_fflush_r+0x3a>
 800f640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f642:	f7fe fed4 	bl	800e3ee <__retarget_lock_acquire_recursive>
 800f646:	4628      	mov	r0, r5
 800f648:	4621      	mov	r1, r4
 800f64a:	f7ff ff59 	bl	800f500 <__sflush_r>
 800f64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f650:	07da      	lsls	r2, r3, #31
 800f652:	4605      	mov	r5, r0
 800f654:	d4e0      	bmi.n	800f618 <_fflush_r+0xc>
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	059b      	lsls	r3, r3, #22
 800f65a:	d4dd      	bmi.n	800f618 <_fflush_r+0xc>
 800f65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f65e:	f7fe fec7 	bl	800e3f0 <__retarget_lock_release_recursive>
 800f662:	e7d9      	b.n	800f618 <_fflush_r+0xc>
 800f664:	4b05      	ldr	r3, [pc, #20]	; (800f67c <_fflush_r+0x70>)
 800f666:	429c      	cmp	r4, r3
 800f668:	d101      	bne.n	800f66e <_fflush_r+0x62>
 800f66a:	68ac      	ldr	r4, [r5, #8]
 800f66c:	e7df      	b.n	800f62e <_fflush_r+0x22>
 800f66e:	4b04      	ldr	r3, [pc, #16]	; (800f680 <_fflush_r+0x74>)
 800f670:	429c      	cmp	r4, r3
 800f672:	bf08      	it	eq
 800f674:	68ec      	ldreq	r4, [r5, #12]
 800f676:	e7da      	b.n	800f62e <_fflush_r+0x22>
 800f678:	08012134 	.word	0x08012134
 800f67c:	08012154 	.word	0x08012154
 800f680:	08012114 	.word	0x08012114

0800f684 <rshift>:
 800f684:	6903      	ldr	r3, [r0, #16]
 800f686:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f68a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f68e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f692:	f100 0414 	add.w	r4, r0, #20
 800f696:	dd45      	ble.n	800f724 <rshift+0xa0>
 800f698:	f011 011f 	ands.w	r1, r1, #31
 800f69c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f6a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f6a4:	d10c      	bne.n	800f6c0 <rshift+0x3c>
 800f6a6:	f100 0710 	add.w	r7, r0, #16
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	42b1      	cmp	r1, r6
 800f6ae:	d334      	bcc.n	800f71a <rshift+0x96>
 800f6b0:	1a9b      	subs	r3, r3, r2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	1eea      	subs	r2, r5, #3
 800f6b6:	4296      	cmp	r6, r2
 800f6b8:	bf38      	it	cc
 800f6ba:	2300      	movcc	r3, #0
 800f6bc:	4423      	add	r3, r4
 800f6be:	e015      	b.n	800f6ec <rshift+0x68>
 800f6c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f6c4:	f1c1 0820 	rsb	r8, r1, #32
 800f6c8:	40cf      	lsrs	r7, r1
 800f6ca:	f105 0e04 	add.w	lr, r5, #4
 800f6ce:	46a1      	mov	r9, r4
 800f6d0:	4576      	cmp	r6, lr
 800f6d2:	46f4      	mov	ip, lr
 800f6d4:	d815      	bhi.n	800f702 <rshift+0x7e>
 800f6d6:	1a9a      	subs	r2, r3, r2
 800f6d8:	0092      	lsls	r2, r2, #2
 800f6da:	3a04      	subs	r2, #4
 800f6dc:	3501      	adds	r5, #1
 800f6de:	42ae      	cmp	r6, r5
 800f6e0:	bf38      	it	cc
 800f6e2:	2200      	movcc	r2, #0
 800f6e4:	18a3      	adds	r3, r4, r2
 800f6e6:	50a7      	str	r7, [r4, r2]
 800f6e8:	b107      	cbz	r7, 800f6ec <rshift+0x68>
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	1b1a      	subs	r2, r3, r4
 800f6ee:	42a3      	cmp	r3, r4
 800f6f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f6f4:	bf08      	it	eq
 800f6f6:	2300      	moveq	r3, #0
 800f6f8:	6102      	str	r2, [r0, #16]
 800f6fa:	bf08      	it	eq
 800f6fc:	6143      	streq	r3, [r0, #20]
 800f6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f702:	f8dc c000 	ldr.w	ip, [ip]
 800f706:	fa0c fc08 	lsl.w	ip, ip, r8
 800f70a:	ea4c 0707 	orr.w	r7, ip, r7
 800f70e:	f849 7b04 	str.w	r7, [r9], #4
 800f712:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f716:	40cf      	lsrs	r7, r1
 800f718:	e7da      	b.n	800f6d0 <rshift+0x4c>
 800f71a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f71e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f722:	e7c3      	b.n	800f6ac <rshift+0x28>
 800f724:	4623      	mov	r3, r4
 800f726:	e7e1      	b.n	800f6ec <rshift+0x68>

0800f728 <__hexdig_fun>:
 800f728:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d802      	bhi.n	800f736 <__hexdig_fun+0xe>
 800f730:	3820      	subs	r0, #32
 800f732:	b2c0      	uxtb	r0, r0
 800f734:	4770      	bx	lr
 800f736:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f73a:	2b05      	cmp	r3, #5
 800f73c:	d801      	bhi.n	800f742 <__hexdig_fun+0x1a>
 800f73e:	3847      	subs	r0, #71	; 0x47
 800f740:	e7f7      	b.n	800f732 <__hexdig_fun+0xa>
 800f742:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f746:	2b05      	cmp	r3, #5
 800f748:	d801      	bhi.n	800f74e <__hexdig_fun+0x26>
 800f74a:	3827      	subs	r0, #39	; 0x27
 800f74c:	e7f1      	b.n	800f732 <__hexdig_fun+0xa>
 800f74e:	2000      	movs	r0, #0
 800f750:	4770      	bx	lr
	...

0800f754 <__gethex>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	ed2d 8b02 	vpush	{d8}
 800f75c:	b089      	sub	sp, #36	; 0x24
 800f75e:	ee08 0a10 	vmov	s16, r0
 800f762:	9304      	str	r3, [sp, #16]
 800f764:	4bb4      	ldr	r3, [pc, #720]	; (800fa38 <__gethex+0x2e4>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	4618      	mov	r0, r3
 800f76c:	468b      	mov	fp, r1
 800f76e:	4690      	mov	r8, r2
 800f770:	f7f0 fd40 	bl	80001f4 <strlen>
 800f774:	9b01      	ldr	r3, [sp, #4]
 800f776:	f8db 2000 	ldr.w	r2, [fp]
 800f77a:	4403      	add	r3, r0
 800f77c:	4682      	mov	sl, r0
 800f77e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f782:	9305      	str	r3, [sp, #20]
 800f784:	1c93      	adds	r3, r2, #2
 800f786:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f78a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f78e:	32fe      	adds	r2, #254	; 0xfe
 800f790:	18d1      	adds	r1, r2, r3
 800f792:	461f      	mov	r7, r3
 800f794:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f798:	9100      	str	r1, [sp, #0]
 800f79a:	2830      	cmp	r0, #48	; 0x30
 800f79c:	d0f8      	beq.n	800f790 <__gethex+0x3c>
 800f79e:	f7ff ffc3 	bl	800f728 <__hexdig_fun>
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d13a      	bne.n	800f81e <__gethex+0xca>
 800f7a8:	9901      	ldr	r1, [sp, #4]
 800f7aa:	4652      	mov	r2, sl
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f7ff f842 	bl	800e836 <strncmp>
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d168      	bne.n	800f88a <__gethex+0x136>
 800f7b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f7bc:	eb07 060a 	add.w	r6, r7, sl
 800f7c0:	f7ff ffb2 	bl	800f728 <__hexdig_fun>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d062      	beq.n	800f88e <__gethex+0x13a>
 800f7c8:	4633      	mov	r3, r6
 800f7ca:	7818      	ldrb	r0, [r3, #0]
 800f7cc:	2830      	cmp	r0, #48	; 0x30
 800f7ce:	461f      	mov	r7, r3
 800f7d0:	f103 0301 	add.w	r3, r3, #1
 800f7d4:	d0f9      	beq.n	800f7ca <__gethex+0x76>
 800f7d6:	f7ff ffa7 	bl	800f728 <__hexdig_fun>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	fab0 f480 	clz	r4, r0
 800f7e0:	0964      	lsrs	r4, r4, #5
 800f7e2:	4635      	mov	r5, r6
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	463a      	mov	r2, r7
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	7830      	ldrb	r0, [r6, #0]
 800f7ee:	f7ff ff9b 	bl	800f728 <__hexdig_fun>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d1f8      	bne.n	800f7e8 <__gethex+0x94>
 800f7f6:	9901      	ldr	r1, [sp, #4]
 800f7f8:	4652      	mov	r2, sl
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f7ff f81b 	bl	800e836 <strncmp>
 800f800:	b980      	cbnz	r0, 800f824 <__gethex+0xd0>
 800f802:	b94d      	cbnz	r5, 800f818 <__gethex+0xc4>
 800f804:	eb06 050a 	add.w	r5, r6, sl
 800f808:	462a      	mov	r2, r5
 800f80a:	4616      	mov	r6, r2
 800f80c:	3201      	adds	r2, #1
 800f80e:	7830      	ldrb	r0, [r6, #0]
 800f810:	f7ff ff8a 	bl	800f728 <__hexdig_fun>
 800f814:	2800      	cmp	r0, #0
 800f816:	d1f8      	bne.n	800f80a <__gethex+0xb6>
 800f818:	1bad      	subs	r5, r5, r6
 800f81a:	00ad      	lsls	r5, r5, #2
 800f81c:	e004      	b.n	800f828 <__gethex+0xd4>
 800f81e:	2400      	movs	r4, #0
 800f820:	4625      	mov	r5, r4
 800f822:	e7e0      	b.n	800f7e6 <__gethex+0x92>
 800f824:	2d00      	cmp	r5, #0
 800f826:	d1f7      	bne.n	800f818 <__gethex+0xc4>
 800f828:	7833      	ldrb	r3, [r6, #0]
 800f82a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f82e:	2b50      	cmp	r3, #80	; 0x50
 800f830:	d13b      	bne.n	800f8aa <__gethex+0x156>
 800f832:	7873      	ldrb	r3, [r6, #1]
 800f834:	2b2b      	cmp	r3, #43	; 0x2b
 800f836:	d02c      	beq.n	800f892 <__gethex+0x13e>
 800f838:	2b2d      	cmp	r3, #45	; 0x2d
 800f83a:	d02e      	beq.n	800f89a <__gethex+0x146>
 800f83c:	1c71      	adds	r1, r6, #1
 800f83e:	f04f 0900 	mov.w	r9, #0
 800f842:	7808      	ldrb	r0, [r1, #0]
 800f844:	f7ff ff70 	bl	800f728 <__hexdig_fun>
 800f848:	1e43      	subs	r3, r0, #1
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2b18      	cmp	r3, #24
 800f84e:	d82c      	bhi.n	800f8aa <__gethex+0x156>
 800f850:	f1a0 0210 	sub.w	r2, r0, #16
 800f854:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f858:	f7ff ff66 	bl	800f728 <__hexdig_fun>
 800f85c:	1e43      	subs	r3, r0, #1
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b18      	cmp	r3, #24
 800f862:	d91d      	bls.n	800f8a0 <__gethex+0x14c>
 800f864:	f1b9 0f00 	cmp.w	r9, #0
 800f868:	d000      	beq.n	800f86c <__gethex+0x118>
 800f86a:	4252      	negs	r2, r2
 800f86c:	4415      	add	r5, r2
 800f86e:	f8cb 1000 	str.w	r1, [fp]
 800f872:	b1e4      	cbz	r4, 800f8ae <__gethex+0x15a>
 800f874:	9b00      	ldr	r3, [sp, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	bf14      	ite	ne
 800f87a:	2700      	movne	r7, #0
 800f87c:	2706      	moveq	r7, #6
 800f87e:	4638      	mov	r0, r7
 800f880:	b009      	add	sp, #36	; 0x24
 800f882:	ecbd 8b02 	vpop	{d8}
 800f886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88a:	463e      	mov	r6, r7
 800f88c:	4625      	mov	r5, r4
 800f88e:	2401      	movs	r4, #1
 800f890:	e7ca      	b.n	800f828 <__gethex+0xd4>
 800f892:	f04f 0900 	mov.w	r9, #0
 800f896:	1cb1      	adds	r1, r6, #2
 800f898:	e7d3      	b.n	800f842 <__gethex+0xee>
 800f89a:	f04f 0901 	mov.w	r9, #1
 800f89e:	e7fa      	b.n	800f896 <__gethex+0x142>
 800f8a0:	230a      	movs	r3, #10
 800f8a2:	fb03 0202 	mla	r2, r3, r2, r0
 800f8a6:	3a10      	subs	r2, #16
 800f8a8:	e7d4      	b.n	800f854 <__gethex+0x100>
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	e7df      	b.n	800f86e <__gethex+0x11a>
 800f8ae:	1bf3      	subs	r3, r6, r7
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	2b07      	cmp	r3, #7
 800f8b6:	dc0b      	bgt.n	800f8d0 <__gethex+0x17c>
 800f8b8:	ee18 0a10 	vmov	r0, s16
 800f8bc:	f000 fa82 	bl	800fdc4 <_Balloc>
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	b940      	cbnz	r0, 800f8d6 <__gethex+0x182>
 800f8c4:	4b5d      	ldr	r3, [pc, #372]	; (800fa3c <__gethex+0x2e8>)
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	21de      	movs	r1, #222	; 0xde
 800f8ca:	485d      	ldr	r0, [pc, #372]	; (800fa40 <__gethex+0x2ec>)
 800f8cc:	f001 ff28 	bl	8011720 <__assert_func>
 800f8d0:	3101      	adds	r1, #1
 800f8d2:	105b      	asrs	r3, r3, #1
 800f8d4:	e7ee      	b.n	800f8b4 <__gethex+0x160>
 800f8d6:	f100 0914 	add.w	r9, r0, #20
 800f8da:	f04f 0b00 	mov.w	fp, #0
 800f8de:	f1ca 0301 	rsb	r3, sl, #1
 800f8e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800f8e6:	f8cd b000 	str.w	fp, [sp]
 800f8ea:	9306      	str	r3, [sp, #24]
 800f8ec:	42b7      	cmp	r7, r6
 800f8ee:	d340      	bcc.n	800f972 <__gethex+0x21e>
 800f8f0:	9802      	ldr	r0, [sp, #8]
 800f8f2:	9b00      	ldr	r3, [sp, #0]
 800f8f4:	f840 3b04 	str.w	r3, [r0], #4
 800f8f8:	eba0 0009 	sub.w	r0, r0, r9
 800f8fc:	1080      	asrs	r0, r0, #2
 800f8fe:	0146      	lsls	r6, r0, #5
 800f900:	6120      	str	r0, [r4, #16]
 800f902:	4618      	mov	r0, r3
 800f904:	f000 fb50 	bl	800ffa8 <__hi0bits>
 800f908:	1a30      	subs	r0, r6, r0
 800f90a:	f8d8 6000 	ldr.w	r6, [r8]
 800f90e:	42b0      	cmp	r0, r6
 800f910:	dd63      	ble.n	800f9da <__gethex+0x286>
 800f912:	1b87      	subs	r7, r0, r6
 800f914:	4639      	mov	r1, r7
 800f916:	4620      	mov	r0, r4
 800f918:	f000 fef4 	bl	8010704 <__any_on>
 800f91c:	4682      	mov	sl, r0
 800f91e:	b1a8      	cbz	r0, 800f94c <__gethex+0x1f8>
 800f920:	1e7b      	subs	r3, r7, #1
 800f922:	1159      	asrs	r1, r3, #5
 800f924:	f003 021f 	and.w	r2, r3, #31
 800f928:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f92c:	f04f 0a01 	mov.w	sl, #1
 800f930:	fa0a f202 	lsl.w	r2, sl, r2
 800f934:	420a      	tst	r2, r1
 800f936:	d009      	beq.n	800f94c <__gethex+0x1f8>
 800f938:	4553      	cmp	r3, sl
 800f93a:	dd05      	ble.n	800f948 <__gethex+0x1f4>
 800f93c:	1eb9      	subs	r1, r7, #2
 800f93e:	4620      	mov	r0, r4
 800f940:	f000 fee0 	bl	8010704 <__any_on>
 800f944:	2800      	cmp	r0, #0
 800f946:	d145      	bne.n	800f9d4 <__gethex+0x280>
 800f948:	f04f 0a02 	mov.w	sl, #2
 800f94c:	4639      	mov	r1, r7
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff fe98 	bl	800f684 <rshift>
 800f954:	443d      	add	r5, r7
 800f956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f95a:	42ab      	cmp	r3, r5
 800f95c:	da4c      	bge.n	800f9f8 <__gethex+0x2a4>
 800f95e:	ee18 0a10 	vmov	r0, s16
 800f962:	4621      	mov	r1, r4
 800f964:	f000 fa6e 	bl	800fe44 <_Bfree>
 800f968:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f96a:	2300      	movs	r3, #0
 800f96c:	6013      	str	r3, [r2, #0]
 800f96e:	27a3      	movs	r7, #163	; 0xa3
 800f970:	e785      	b.n	800f87e <__gethex+0x12a>
 800f972:	1e73      	subs	r3, r6, #1
 800f974:	9a05      	ldr	r2, [sp, #20]
 800f976:	9303      	str	r3, [sp, #12]
 800f978:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d019      	beq.n	800f9b4 <__gethex+0x260>
 800f980:	f1bb 0f20 	cmp.w	fp, #32
 800f984:	d107      	bne.n	800f996 <__gethex+0x242>
 800f986:	9b02      	ldr	r3, [sp, #8]
 800f988:	9a00      	ldr	r2, [sp, #0]
 800f98a:	f843 2b04 	str.w	r2, [r3], #4
 800f98e:	9302      	str	r3, [sp, #8]
 800f990:	2300      	movs	r3, #0
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	469b      	mov	fp, r3
 800f996:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f99a:	f7ff fec5 	bl	800f728 <__hexdig_fun>
 800f99e:	9b00      	ldr	r3, [sp, #0]
 800f9a0:	f000 000f 	and.w	r0, r0, #15
 800f9a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f9a8:	4303      	orrs	r3, r0
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	f10b 0b04 	add.w	fp, fp, #4
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	e00d      	b.n	800f9d0 <__gethex+0x27c>
 800f9b4:	9b03      	ldr	r3, [sp, #12]
 800f9b6:	9a06      	ldr	r2, [sp, #24]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	42bb      	cmp	r3, r7
 800f9bc:	d3e0      	bcc.n	800f980 <__gethex+0x22c>
 800f9be:	4618      	mov	r0, r3
 800f9c0:	9901      	ldr	r1, [sp, #4]
 800f9c2:	9307      	str	r3, [sp, #28]
 800f9c4:	4652      	mov	r2, sl
 800f9c6:	f7fe ff36 	bl	800e836 <strncmp>
 800f9ca:	9b07      	ldr	r3, [sp, #28]
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d1d7      	bne.n	800f980 <__gethex+0x22c>
 800f9d0:	461e      	mov	r6, r3
 800f9d2:	e78b      	b.n	800f8ec <__gethex+0x198>
 800f9d4:	f04f 0a03 	mov.w	sl, #3
 800f9d8:	e7b8      	b.n	800f94c <__gethex+0x1f8>
 800f9da:	da0a      	bge.n	800f9f2 <__gethex+0x29e>
 800f9dc:	1a37      	subs	r7, r6, r0
 800f9de:	4621      	mov	r1, r4
 800f9e0:	ee18 0a10 	vmov	r0, s16
 800f9e4:	463a      	mov	r2, r7
 800f9e6:	f000 fc49 	bl	801027c <__lshift>
 800f9ea:	1bed      	subs	r5, r5, r7
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	f100 0914 	add.w	r9, r0, #20
 800f9f2:	f04f 0a00 	mov.w	sl, #0
 800f9f6:	e7ae      	b.n	800f956 <__gethex+0x202>
 800f9f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f9fc:	42a8      	cmp	r0, r5
 800f9fe:	dd72      	ble.n	800fae6 <__gethex+0x392>
 800fa00:	1b45      	subs	r5, r0, r5
 800fa02:	42ae      	cmp	r6, r5
 800fa04:	dc36      	bgt.n	800fa74 <__gethex+0x320>
 800fa06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d02a      	beq.n	800fa64 <__gethex+0x310>
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d02c      	beq.n	800fa6c <__gethex+0x318>
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d11c      	bne.n	800fa50 <__gethex+0x2fc>
 800fa16:	42ae      	cmp	r6, r5
 800fa18:	d11a      	bne.n	800fa50 <__gethex+0x2fc>
 800fa1a:	2e01      	cmp	r6, #1
 800fa1c:	d112      	bne.n	800fa44 <__gethex+0x2f0>
 800fa1e:	9a04      	ldr	r2, [sp, #16]
 800fa20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	2301      	movs	r3, #1
 800fa28:	6123      	str	r3, [r4, #16]
 800fa2a:	f8c9 3000 	str.w	r3, [r9]
 800fa2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa30:	2762      	movs	r7, #98	; 0x62
 800fa32:	601c      	str	r4, [r3, #0]
 800fa34:	e723      	b.n	800f87e <__gethex+0x12a>
 800fa36:	bf00      	nop
 800fa38:	08012250 	.word	0x08012250
 800fa3c:	080121d8 	.word	0x080121d8
 800fa40:	080121e9 	.word	0x080121e9
 800fa44:	1e71      	subs	r1, r6, #1
 800fa46:	4620      	mov	r0, r4
 800fa48:	f000 fe5c 	bl	8010704 <__any_on>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d1e6      	bne.n	800fa1e <__gethex+0x2ca>
 800fa50:	ee18 0a10 	vmov	r0, s16
 800fa54:	4621      	mov	r1, r4
 800fa56:	f000 f9f5 	bl	800fe44 <_Bfree>
 800fa5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	6013      	str	r3, [r2, #0]
 800fa60:	2750      	movs	r7, #80	; 0x50
 800fa62:	e70c      	b.n	800f87e <__gethex+0x12a>
 800fa64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1f2      	bne.n	800fa50 <__gethex+0x2fc>
 800fa6a:	e7d8      	b.n	800fa1e <__gethex+0x2ca>
 800fa6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1d5      	bne.n	800fa1e <__gethex+0x2ca>
 800fa72:	e7ed      	b.n	800fa50 <__gethex+0x2fc>
 800fa74:	1e6f      	subs	r7, r5, #1
 800fa76:	f1ba 0f00 	cmp.w	sl, #0
 800fa7a:	d131      	bne.n	800fae0 <__gethex+0x38c>
 800fa7c:	b127      	cbz	r7, 800fa88 <__gethex+0x334>
 800fa7e:	4639      	mov	r1, r7
 800fa80:	4620      	mov	r0, r4
 800fa82:	f000 fe3f 	bl	8010704 <__any_on>
 800fa86:	4682      	mov	sl, r0
 800fa88:	117b      	asrs	r3, r7, #5
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fa90:	f007 071f 	and.w	r7, r7, #31
 800fa94:	fa01 f707 	lsl.w	r7, r1, r7
 800fa98:	421f      	tst	r7, r3
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	bf18      	it	ne
 800faa0:	f04a 0a02 	orrne.w	sl, sl, #2
 800faa4:	1b76      	subs	r6, r6, r5
 800faa6:	f7ff fded 	bl	800f684 <rshift>
 800faaa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800faae:	2702      	movs	r7, #2
 800fab0:	f1ba 0f00 	cmp.w	sl, #0
 800fab4:	d048      	beq.n	800fb48 <__gethex+0x3f4>
 800fab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d015      	beq.n	800faea <__gethex+0x396>
 800fabe:	2b03      	cmp	r3, #3
 800fac0:	d017      	beq.n	800faf2 <__gethex+0x39e>
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d109      	bne.n	800fada <__gethex+0x386>
 800fac6:	f01a 0f02 	tst.w	sl, #2
 800faca:	d006      	beq.n	800fada <__gethex+0x386>
 800facc:	f8d9 0000 	ldr.w	r0, [r9]
 800fad0:	ea4a 0a00 	orr.w	sl, sl, r0
 800fad4:	f01a 0f01 	tst.w	sl, #1
 800fad8:	d10e      	bne.n	800faf8 <__gethex+0x3a4>
 800fada:	f047 0710 	orr.w	r7, r7, #16
 800fade:	e033      	b.n	800fb48 <__gethex+0x3f4>
 800fae0:	f04f 0a01 	mov.w	sl, #1
 800fae4:	e7d0      	b.n	800fa88 <__gethex+0x334>
 800fae6:	2701      	movs	r7, #1
 800fae8:	e7e2      	b.n	800fab0 <__gethex+0x35c>
 800faea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faec:	f1c3 0301 	rsb	r3, r3, #1
 800faf0:	9315      	str	r3, [sp, #84]	; 0x54
 800faf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d0f0      	beq.n	800fada <__gethex+0x386>
 800faf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fafc:	f104 0314 	add.w	r3, r4, #20
 800fb00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fb04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fb08:	f04f 0c00 	mov.w	ip, #0
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb12:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fb16:	d01c      	beq.n	800fb52 <__gethex+0x3fe>
 800fb18:	3201      	adds	r2, #1
 800fb1a:	6002      	str	r2, [r0, #0]
 800fb1c:	2f02      	cmp	r7, #2
 800fb1e:	f104 0314 	add.w	r3, r4, #20
 800fb22:	d13f      	bne.n	800fba4 <__gethex+0x450>
 800fb24:	f8d8 2000 	ldr.w	r2, [r8]
 800fb28:	3a01      	subs	r2, #1
 800fb2a:	42b2      	cmp	r2, r6
 800fb2c:	d10a      	bne.n	800fb44 <__gethex+0x3f0>
 800fb2e:	1171      	asrs	r1, r6, #5
 800fb30:	2201      	movs	r2, #1
 800fb32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb36:	f006 061f 	and.w	r6, r6, #31
 800fb3a:	fa02 f606 	lsl.w	r6, r2, r6
 800fb3e:	421e      	tst	r6, r3
 800fb40:	bf18      	it	ne
 800fb42:	4617      	movne	r7, r2
 800fb44:	f047 0720 	orr.w	r7, r7, #32
 800fb48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb4a:	601c      	str	r4, [r3, #0]
 800fb4c:	9b04      	ldr	r3, [sp, #16]
 800fb4e:	601d      	str	r5, [r3, #0]
 800fb50:	e695      	b.n	800f87e <__gethex+0x12a>
 800fb52:	4299      	cmp	r1, r3
 800fb54:	f843 cc04 	str.w	ip, [r3, #-4]
 800fb58:	d8d8      	bhi.n	800fb0c <__gethex+0x3b8>
 800fb5a:	68a3      	ldr	r3, [r4, #8]
 800fb5c:	459b      	cmp	fp, r3
 800fb5e:	db19      	blt.n	800fb94 <__gethex+0x440>
 800fb60:	6861      	ldr	r1, [r4, #4]
 800fb62:	ee18 0a10 	vmov	r0, s16
 800fb66:	3101      	adds	r1, #1
 800fb68:	f000 f92c 	bl	800fdc4 <_Balloc>
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	b918      	cbnz	r0, 800fb78 <__gethex+0x424>
 800fb70:	4b1a      	ldr	r3, [pc, #104]	; (800fbdc <__gethex+0x488>)
 800fb72:	4602      	mov	r2, r0
 800fb74:	2184      	movs	r1, #132	; 0x84
 800fb76:	e6a8      	b.n	800f8ca <__gethex+0x176>
 800fb78:	6922      	ldr	r2, [r4, #16]
 800fb7a:	3202      	adds	r2, #2
 800fb7c:	f104 010c 	add.w	r1, r4, #12
 800fb80:	0092      	lsls	r2, r2, #2
 800fb82:	300c      	adds	r0, #12
 800fb84:	f7fe fc46 	bl	800e414 <memcpy>
 800fb88:	4621      	mov	r1, r4
 800fb8a:	ee18 0a10 	vmov	r0, s16
 800fb8e:	f000 f959 	bl	800fe44 <_Bfree>
 800fb92:	464c      	mov	r4, r9
 800fb94:	6923      	ldr	r3, [r4, #16]
 800fb96:	1c5a      	adds	r2, r3, #1
 800fb98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb9c:	6122      	str	r2, [r4, #16]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	615a      	str	r2, [r3, #20]
 800fba2:	e7bb      	b.n	800fb1c <__gethex+0x3c8>
 800fba4:	6922      	ldr	r2, [r4, #16]
 800fba6:	455a      	cmp	r2, fp
 800fba8:	dd0b      	ble.n	800fbc2 <__gethex+0x46e>
 800fbaa:	2101      	movs	r1, #1
 800fbac:	4620      	mov	r0, r4
 800fbae:	f7ff fd69 	bl	800f684 <rshift>
 800fbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbb6:	3501      	adds	r5, #1
 800fbb8:	42ab      	cmp	r3, r5
 800fbba:	f6ff aed0 	blt.w	800f95e <__gethex+0x20a>
 800fbbe:	2701      	movs	r7, #1
 800fbc0:	e7c0      	b.n	800fb44 <__gethex+0x3f0>
 800fbc2:	f016 061f 	ands.w	r6, r6, #31
 800fbc6:	d0fa      	beq.n	800fbbe <__gethex+0x46a>
 800fbc8:	4453      	add	r3, sl
 800fbca:	f1c6 0620 	rsb	r6, r6, #32
 800fbce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fbd2:	f000 f9e9 	bl	800ffa8 <__hi0bits>
 800fbd6:	42b0      	cmp	r0, r6
 800fbd8:	dbe7      	blt.n	800fbaa <__gethex+0x456>
 800fbda:	e7f0      	b.n	800fbbe <__gethex+0x46a>
 800fbdc:	080121d8 	.word	0x080121d8

0800fbe0 <L_shift>:
 800fbe0:	f1c2 0208 	rsb	r2, r2, #8
 800fbe4:	0092      	lsls	r2, r2, #2
 800fbe6:	b570      	push	{r4, r5, r6, lr}
 800fbe8:	f1c2 0620 	rsb	r6, r2, #32
 800fbec:	6843      	ldr	r3, [r0, #4]
 800fbee:	6804      	ldr	r4, [r0, #0]
 800fbf0:	fa03 f506 	lsl.w	r5, r3, r6
 800fbf4:	432c      	orrs	r4, r5
 800fbf6:	40d3      	lsrs	r3, r2
 800fbf8:	6004      	str	r4, [r0, #0]
 800fbfa:	f840 3f04 	str.w	r3, [r0, #4]!
 800fbfe:	4288      	cmp	r0, r1
 800fc00:	d3f4      	bcc.n	800fbec <L_shift+0xc>
 800fc02:	bd70      	pop	{r4, r5, r6, pc}

0800fc04 <__match>:
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	6803      	ldr	r3, [r0, #0]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc0e:	b914      	cbnz	r4, 800fc16 <__match+0x12>
 800fc10:	6003      	str	r3, [r0, #0]
 800fc12:	2001      	movs	r0, #1
 800fc14:	bd30      	pop	{r4, r5, pc}
 800fc16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fc1e:	2d19      	cmp	r5, #25
 800fc20:	bf98      	it	ls
 800fc22:	3220      	addls	r2, #32
 800fc24:	42a2      	cmp	r2, r4
 800fc26:	d0f0      	beq.n	800fc0a <__match+0x6>
 800fc28:	2000      	movs	r0, #0
 800fc2a:	e7f3      	b.n	800fc14 <__match+0x10>

0800fc2c <__hexnan>:
 800fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc30:	680b      	ldr	r3, [r1, #0]
 800fc32:	115e      	asrs	r6, r3, #5
 800fc34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fc38:	f013 031f 	ands.w	r3, r3, #31
 800fc3c:	b087      	sub	sp, #28
 800fc3e:	bf18      	it	ne
 800fc40:	3604      	addne	r6, #4
 800fc42:	2500      	movs	r5, #0
 800fc44:	1f37      	subs	r7, r6, #4
 800fc46:	4690      	mov	r8, r2
 800fc48:	6802      	ldr	r2, [r0, #0]
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	4682      	mov	sl, r0
 800fc4e:	f846 5c04 	str.w	r5, [r6, #-4]
 800fc52:	46b9      	mov	r9, r7
 800fc54:	463c      	mov	r4, r7
 800fc56:	9502      	str	r5, [sp, #8]
 800fc58:	46ab      	mov	fp, r5
 800fc5a:	7851      	ldrb	r1, [r2, #1]
 800fc5c:	1c53      	adds	r3, r2, #1
 800fc5e:	9303      	str	r3, [sp, #12]
 800fc60:	b341      	cbz	r1, 800fcb4 <__hexnan+0x88>
 800fc62:	4608      	mov	r0, r1
 800fc64:	9205      	str	r2, [sp, #20]
 800fc66:	9104      	str	r1, [sp, #16]
 800fc68:	f7ff fd5e 	bl	800f728 <__hexdig_fun>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d14f      	bne.n	800fd10 <__hexnan+0xe4>
 800fc70:	9904      	ldr	r1, [sp, #16]
 800fc72:	9a05      	ldr	r2, [sp, #20]
 800fc74:	2920      	cmp	r1, #32
 800fc76:	d818      	bhi.n	800fcaa <__hexnan+0x7e>
 800fc78:	9b02      	ldr	r3, [sp, #8]
 800fc7a:	459b      	cmp	fp, r3
 800fc7c:	dd13      	ble.n	800fca6 <__hexnan+0x7a>
 800fc7e:	454c      	cmp	r4, r9
 800fc80:	d206      	bcs.n	800fc90 <__hexnan+0x64>
 800fc82:	2d07      	cmp	r5, #7
 800fc84:	dc04      	bgt.n	800fc90 <__hexnan+0x64>
 800fc86:	462a      	mov	r2, r5
 800fc88:	4649      	mov	r1, r9
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f7ff ffa8 	bl	800fbe0 <L_shift>
 800fc90:	4544      	cmp	r4, r8
 800fc92:	d950      	bls.n	800fd36 <__hexnan+0x10a>
 800fc94:	2300      	movs	r3, #0
 800fc96:	f1a4 0904 	sub.w	r9, r4, #4
 800fc9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc9e:	f8cd b008 	str.w	fp, [sp, #8]
 800fca2:	464c      	mov	r4, r9
 800fca4:	461d      	mov	r5, r3
 800fca6:	9a03      	ldr	r2, [sp, #12]
 800fca8:	e7d7      	b.n	800fc5a <__hexnan+0x2e>
 800fcaa:	2929      	cmp	r1, #41	; 0x29
 800fcac:	d156      	bne.n	800fd5c <__hexnan+0x130>
 800fcae:	3202      	adds	r2, #2
 800fcb0:	f8ca 2000 	str.w	r2, [sl]
 800fcb4:	f1bb 0f00 	cmp.w	fp, #0
 800fcb8:	d050      	beq.n	800fd5c <__hexnan+0x130>
 800fcba:	454c      	cmp	r4, r9
 800fcbc:	d206      	bcs.n	800fccc <__hexnan+0xa0>
 800fcbe:	2d07      	cmp	r5, #7
 800fcc0:	dc04      	bgt.n	800fccc <__hexnan+0xa0>
 800fcc2:	462a      	mov	r2, r5
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f7ff ff8a 	bl	800fbe0 <L_shift>
 800fccc:	4544      	cmp	r4, r8
 800fcce:	d934      	bls.n	800fd3a <__hexnan+0x10e>
 800fcd0:	f1a8 0204 	sub.w	r2, r8, #4
 800fcd4:	4623      	mov	r3, r4
 800fcd6:	f853 1b04 	ldr.w	r1, [r3], #4
 800fcda:	f842 1f04 	str.w	r1, [r2, #4]!
 800fcde:	429f      	cmp	r7, r3
 800fce0:	d2f9      	bcs.n	800fcd6 <__hexnan+0xaa>
 800fce2:	1b3b      	subs	r3, r7, r4
 800fce4:	f023 0303 	bic.w	r3, r3, #3
 800fce8:	3304      	adds	r3, #4
 800fcea:	3401      	adds	r4, #1
 800fcec:	3e03      	subs	r6, #3
 800fcee:	42b4      	cmp	r4, r6
 800fcf0:	bf88      	it	hi
 800fcf2:	2304      	movhi	r3, #4
 800fcf4:	4443      	add	r3, r8
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f843 2b04 	str.w	r2, [r3], #4
 800fcfc:	429f      	cmp	r7, r3
 800fcfe:	d2fb      	bcs.n	800fcf8 <__hexnan+0xcc>
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	b91b      	cbnz	r3, 800fd0c <__hexnan+0xe0>
 800fd04:	4547      	cmp	r7, r8
 800fd06:	d127      	bne.n	800fd58 <__hexnan+0x12c>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	603b      	str	r3, [r7, #0]
 800fd0c:	2005      	movs	r0, #5
 800fd0e:	e026      	b.n	800fd5e <__hexnan+0x132>
 800fd10:	3501      	adds	r5, #1
 800fd12:	2d08      	cmp	r5, #8
 800fd14:	f10b 0b01 	add.w	fp, fp, #1
 800fd18:	dd06      	ble.n	800fd28 <__hexnan+0xfc>
 800fd1a:	4544      	cmp	r4, r8
 800fd1c:	d9c3      	bls.n	800fca6 <__hexnan+0x7a>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd24:	2501      	movs	r5, #1
 800fd26:	3c04      	subs	r4, #4
 800fd28:	6822      	ldr	r2, [r4, #0]
 800fd2a:	f000 000f 	and.w	r0, r0, #15
 800fd2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fd32:	6022      	str	r2, [r4, #0]
 800fd34:	e7b7      	b.n	800fca6 <__hexnan+0x7a>
 800fd36:	2508      	movs	r5, #8
 800fd38:	e7b5      	b.n	800fca6 <__hexnan+0x7a>
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d0df      	beq.n	800fd00 <__hexnan+0xd4>
 800fd40:	f04f 32ff 	mov.w	r2, #4294967295
 800fd44:	f1c3 0320 	rsb	r3, r3, #32
 800fd48:	fa22 f303 	lsr.w	r3, r2, r3
 800fd4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fd50:	401a      	ands	r2, r3
 800fd52:	f846 2c04 	str.w	r2, [r6, #-4]
 800fd56:	e7d3      	b.n	800fd00 <__hexnan+0xd4>
 800fd58:	3f04      	subs	r7, #4
 800fd5a:	e7d1      	b.n	800fd00 <__hexnan+0xd4>
 800fd5c:	2004      	movs	r0, #4
 800fd5e:	b007      	add	sp, #28
 800fd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd64 <_lseek_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_lseek_r+0x20>)
 800fd68:	4604      	mov	r4, r0
 800fd6a:	4608      	mov	r0, r1
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	2200      	movs	r2, #0
 800fd70:	602a      	str	r2, [r5, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	f7f5 fb1a 	bl	80053ac <_lseek>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d102      	bne.n	800fd82 <_lseek_r+0x1e>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b103      	cbz	r3, 800fd82 <_lseek_r+0x1e>
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd38      	pop	{r3, r4, r5, pc}
 800fd84:	20002ce4 	.word	0x20002ce4

0800fd88 <__ascii_mbtowc>:
 800fd88:	b082      	sub	sp, #8
 800fd8a:	b901      	cbnz	r1, 800fd8e <__ascii_mbtowc+0x6>
 800fd8c:	a901      	add	r1, sp, #4
 800fd8e:	b142      	cbz	r2, 800fda2 <__ascii_mbtowc+0x1a>
 800fd90:	b14b      	cbz	r3, 800fda6 <__ascii_mbtowc+0x1e>
 800fd92:	7813      	ldrb	r3, [r2, #0]
 800fd94:	600b      	str	r3, [r1, #0]
 800fd96:	7812      	ldrb	r2, [r2, #0]
 800fd98:	1e10      	subs	r0, r2, #0
 800fd9a:	bf18      	it	ne
 800fd9c:	2001      	movne	r0, #1
 800fd9e:	b002      	add	sp, #8
 800fda0:	4770      	bx	lr
 800fda2:	4610      	mov	r0, r2
 800fda4:	e7fb      	b.n	800fd9e <__ascii_mbtowc+0x16>
 800fda6:	f06f 0001 	mvn.w	r0, #1
 800fdaa:	e7f8      	b.n	800fd9e <__ascii_mbtowc+0x16>

0800fdac <__malloc_lock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	; (800fdb4 <__malloc_lock+0x8>)
 800fdae:	f7fe bb1e 	b.w	800e3ee <__retarget_lock_acquire_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	20002cd8 	.word	0x20002cd8

0800fdb8 <__malloc_unlock>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__malloc_unlock+0x8>)
 800fdba:	f7fe bb19 	b.w	800e3f0 <__retarget_lock_release_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	20002cd8 	.word	0x20002cd8

0800fdc4 <_Balloc>:
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdc8:	4604      	mov	r4, r0
 800fdca:	460d      	mov	r5, r1
 800fdcc:	b976      	cbnz	r6, 800fdec <_Balloc+0x28>
 800fdce:	2010      	movs	r0, #16
 800fdd0:	f7fe fb10 	bl	800e3f4 <malloc>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	6260      	str	r0, [r4, #36]	; 0x24
 800fdd8:	b920      	cbnz	r0, 800fde4 <_Balloc+0x20>
 800fdda:	4b18      	ldr	r3, [pc, #96]	; (800fe3c <_Balloc+0x78>)
 800fddc:	4818      	ldr	r0, [pc, #96]	; (800fe40 <_Balloc+0x7c>)
 800fdde:	2166      	movs	r1, #102	; 0x66
 800fde0:	f001 fc9e 	bl	8011720 <__assert_func>
 800fde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fde8:	6006      	str	r6, [r0, #0]
 800fdea:	60c6      	str	r6, [r0, #12]
 800fdec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fdee:	68f3      	ldr	r3, [r6, #12]
 800fdf0:	b183      	cbz	r3, 800fe14 <_Balloc+0x50>
 800fdf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdfa:	b9b8      	cbnz	r0, 800fe2c <_Balloc+0x68>
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	fa01 f605 	lsl.w	r6, r1, r5
 800fe02:	1d72      	adds	r2, r6, #5
 800fe04:	0092      	lsls	r2, r2, #2
 800fe06:	4620      	mov	r0, r4
 800fe08:	f000 fc9d 	bl	8010746 <_calloc_r>
 800fe0c:	b160      	cbz	r0, 800fe28 <_Balloc+0x64>
 800fe0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe12:	e00e      	b.n	800fe32 <_Balloc+0x6e>
 800fe14:	2221      	movs	r2, #33	; 0x21
 800fe16:	2104      	movs	r1, #4
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fc94 	bl	8010746 <_calloc_r>
 800fe1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe20:	60f0      	str	r0, [r6, #12]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1e4      	bne.n	800fdf2 <_Balloc+0x2e>
 800fe28:	2000      	movs	r0, #0
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}
 800fe2c:	6802      	ldr	r2, [r0, #0]
 800fe2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe32:	2300      	movs	r3, #0
 800fe34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe38:	e7f7      	b.n	800fe2a <_Balloc+0x66>
 800fe3a:	bf00      	nop
 800fe3c:	08012264 	.word	0x08012264
 800fe40:	0801227b 	.word	0x0801227b

0800fe44 <_Bfree>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe48:	4605      	mov	r5, r0
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	b976      	cbnz	r6, 800fe6c <_Bfree+0x28>
 800fe4e:	2010      	movs	r0, #16
 800fe50:	f7fe fad0 	bl	800e3f4 <malloc>
 800fe54:	4602      	mov	r2, r0
 800fe56:	6268      	str	r0, [r5, #36]	; 0x24
 800fe58:	b920      	cbnz	r0, 800fe64 <_Bfree+0x20>
 800fe5a:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <_Bfree+0x3c>)
 800fe5c:	4809      	ldr	r0, [pc, #36]	; (800fe84 <_Bfree+0x40>)
 800fe5e:	218a      	movs	r1, #138	; 0x8a
 800fe60:	f001 fc5e 	bl	8011720 <__assert_func>
 800fe64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe68:	6006      	str	r6, [r0, #0]
 800fe6a:	60c6      	str	r6, [r0, #12]
 800fe6c:	b13c      	cbz	r4, 800fe7e <_Bfree+0x3a>
 800fe6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe70:	6862      	ldr	r2, [r4, #4]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe78:	6021      	str	r1, [r4, #0]
 800fe7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe7e:	bd70      	pop	{r4, r5, r6, pc}
 800fe80:	08012264 	.word	0x08012264
 800fe84:	0801227b 	.word	0x0801227b

0800fe88 <__multadd>:
 800fe88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8c:	690d      	ldr	r5, [r1, #16]
 800fe8e:	4607      	mov	r7, r0
 800fe90:	460c      	mov	r4, r1
 800fe92:	461e      	mov	r6, r3
 800fe94:	f101 0c14 	add.w	ip, r1, #20
 800fe98:	2000      	movs	r0, #0
 800fe9a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe9e:	b299      	uxth	r1, r3
 800fea0:	fb02 6101 	mla	r1, r2, r1, r6
 800fea4:	0c1e      	lsrs	r6, r3, #16
 800fea6:	0c0b      	lsrs	r3, r1, #16
 800fea8:	fb02 3306 	mla	r3, r2, r6, r3
 800feac:	b289      	uxth	r1, r1
 800feae:	3001      	adds	r0, #1
 800feb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800feb4:	4285      	cmp	r5, r0
 800feb6:	f84c 1b04 	str.w	r1, [ip], #4
 800feba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800febe:	dcec      	bgt.n	800fe9a <__multadd+0x12>
 800fec0:	b30e      	cbz	r6, 800ff06 <__multadd+0x7e>
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	42ab      	cmp	r3, r5
 800fec6:	dc19      	bgt.n	800fefc <__multadd+0x74>
 800fec8:	6861      	ldr	r1, [r4, #4]
 800feca:	4638      	mov	r0, r7
 800fecc:	3101      	adds	r1, #1
 800fece:	f7ff ff79 	bl	800fdc4 <_Balloc>
 800fed2:	4680      	mov	r8, r0
 800fed4:	b928      	cbnz	r0, 800fee2 <__multadd+0x5a>
 800fed6:	4602      	mov	r2, r0
 800fed8:	4b0c      	ldr	r3, [pc, #48]	; (800ff0c <__multadd+0x84>)
 800feda:	480d      	ldr	r0, [pc, #52]	; (800ff10 <__multadd+0x88>)
 800fedc:	21b5      	movs	r1, #181	; 0xb5
 800fede:	f001 fc1f 	bl	8011720 <__assert_func>
 800fee2:	6922      	ldr	r2, [r4, #16]
 800fee4:	3202      	adds	r2, #2
 800fee6:	f104 010c 	add.w	r1, r4, #12
 800feea:	0092      	lsls	r2, r2, #2
 800feec:	300c      	adds	r0, #12
 800feee:	f7fe fa91 	bl	800e414 <memcpy>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4638      	mov	r0, r7
 800fef6:	f7ff ffa5 	bl	800fe44 <_Bfree>
 800fefa:	4644      	mov	r4, r8
 800fefc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff00:	3501      	adds	r5, #1
 800ff02:	615e      	str	r6, [r3, #20]
 800ff04:	6125      	str	r5, [r4, #16]
 800ff06:	4620      	mov	r0, r4
 800ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0c:	080121d8 	.word	0x080121d8
 800ff10:	0801227b 	.word	0x0801227b

0800ff14 <__s2b>:
 800ff14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff18:	460c      	mov	r4, r1
 800ff1a:	4615      	mov	r5, r2
 800ff1c:	461f      	mov	r7, r3
 800ff1e:	2209      	movs	r2, #9
 800ff20:	3308      	adds	r3, #8
 800ff22:	4606      	mov	r6, r0
 800ff24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff28:	2100      	movs	r1, #0
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	db09      	blt.n	800ff44 <__s2b+0x30>
 800ff30:	4630      	mov	r0, r6
 800ff32:	f7ff ff47 	bl	800fdc4 <_Balloc>
 800ff36:	b940      	cbnz	r0, 800ff4a <__s2b+0x36>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	4b19      	ldr	r3, [pc, #100]	; (800ffa0 <__s2b+0x8c>)
 800ff3c:	4819      	ldr	r0, [pc, #100]	; (800ffa4 <__s2b+0x90>)
 800ff3e:	21ce      	movs	r1, #206	; 0xce
 800ff40:	f001 fbee 	bl	8011720 <__assert_func>
 800ff44:	0052      	lsls	r2, r2, #1
 800ff46:	3101      	adds	r1, #1
 800ff48:	e7f0      	b.n	800ff2c <__s2b+0x18>
 800ff4a:	9b08      	ldr	r3, [sp, #32]
 800ff4c:	6143      	str	r3, [r0, #20]
 800ff4e:	2d09      	cmp	r5, #9
 800ff50:	f04f 0301 	mov.w	r3, #1
 800ff54:	6103      	str	r3, [r0, #16]
 800ff56:	dd16      	ble.n	800ff86 <__s2b+0x72>
 800ff58:	f104 0909 	add.w	r9, r4, #9
 800ff5c:	46c8      	mov	r8, r9
 800ff5e:	442c      	add	r4, r5
 800ff60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff64:	4601      	mov	r1, r0
 800ff66:	3b30      	subs	r3, #48	; 0x30
 800ff68:	220a      	movs	r2, #10
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	f7ff ff8c 	bl	800fe88 <__multadd>
 800ff70:	45a0      	cmp	r8, r4
 800ff72:	d1f5      	bne.n	800ff60 <__s2b+0x4c>
 800ff74:	f1a5 0408 	sub.w	r4, r5, #8
 800ff78:	444c      	add	r4, r9
 800ff7a:	1b2d      	subs	r5, r5, r4
 800ff7c:	1963      	adds	r3, r4, r5
 800ff7e:	42bb      	cmp	r3, r7
 800ff80:	db04      	blt.n	800ff8c <__s2b+0x78>
 800ff82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff86:	340a      	adds	r4, #10
 800ff88:	2509      	movs	r5, #9
 800ff8a:	e7f6      	b.n	800ff7a <__s2b+0x66>
 800ff8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff90:	4601      	mov	r1, r0
 800ff92:	3b30      	subs	r3, #48	; 0x30
 800ff94:	220a      	movs	r2, #10
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff ff76 	bl	800fe88 <__multadd>
 800ff9c:	e7ee      	b.n	800ff7c <__s2b+0x68>
 800ff9e:	bf00      	nop
 800ffa0:	080121d8 	.word	0x080121d8
 800ffa4:	0801227b 	.word	0x0801227b

0800ffa8 <__hi0bits>:
 800ffa8:	0c03      	lsrs	r3, r0, #16
 800ffaa:	041b      	lsls	r3, r3, #16
 800ffac:	b9d3      	cbnz	r3, 800ffe4 <__hi0bits+0x3c>
 800ffae:	0400      	lsls	r0, r0, #16
 800ffb0:	2310      	movs	r3, #16
 800ffb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ffb6:	bf04      	itt	eq
 800ffb8:	0200      	lsleq	r0, r0, #8
 800ffba:	3308      	addeq	r3, #8
 800ffbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ffc0:	bf04      	itt	eq
 800ffc2:	0100      	lsleq	r0, r0, #4
 800ffc4:	3304      	addeq	r3, #4
 800ffc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ffca:	bf04      	itt	eq
 800ffcc:	0080      	lsleq	r0, r0, #2
 800ffce:	3302      	addeq	r3, #2
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	db05      	blt.n	800ffe0 <__hi0bits+0x38>
 800ffd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ffd8:	f103 0301 	add.w	r3, r3, #1
 800ffdc:	bf08      	it	eq
 800ffde:	2320      	moveq	r3, #32
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	4770      	bx	lr
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	e7e4      	b.n	800ffb2 <__hi0bits+0xa>

0800ffe8 <__lo0bits>:
 800ffe8:	6803      	ldr	r3, [r0, #0]
 800ffea:	f013 0207 	ands.w	r2, r3, #7
 800ffee:	4601      	mov	r1, r0
 800fff0:	d00b      	beq.n	801000a <__lo0bits+0x22>
 800fff2:	07da      	lsls	r2, r3, #31
 800fff4:	d423      	bmi.n	801003e <__lo0bits+0x56>
 800fff6:	0798      	lsls	r0, r3, #30
 800fff8:	bf49      	itett	mi
 800fffa:	085b      	lsrmi	r3, r3, #1
 800fffc:	089b      	lsrpl	r3, r3, #2
 800fffe:	2001      	movmi	r0, #1
 8010000:	600b      	strmi	r3, [r1, #0]
 8010002:	bf5c      	itt	pl
 8010004:	600b      	strpl	r3, [r1, #0]
 8010006:	2002      	movpl	r0, #2
 8010008:	4770      	bx	lr
 801000a:	b298      	uxth	r0, r3
 801000c:	b9a8      	cbnz	r0, 801003a <__lo0bits+0x52>
 801000e:	0c1b      	lsrs	r3, r3, #16
 8010010:	2010      	movs	r0, #16
 8010012:	b2da      	uxtb	r2, r3
 8010014:	b90a      	cbnz	r2, 801001a <__lo0bits+0x32>
 8010016:	3008      	adds	r0, #8
 8010018:	0a1b      	lsrs	r3, r3, #8
 801001a:	071a      	lsls	r2, r3, #28
 801001c:	bf04      	itt	eq
 801001e:	091b      	lsreq	r3, r3, #4
 8010020:	3004      	addeq	r0, #4
 8010022:	079a      	lsls	r2, r3, #30
 8010024:	bf04      	itt	eq
 8010026:	089b      	lsreq	r3, r3, #2
 8010028:	3002      	addeq	r0, #2
 801002a:	07da      	lsls	r2, r3, #31
 801002c:	d403      	bmi.n	8010036 <__lo0bits+0x4e>
 801002e:	085b      	lsrs	r3, r3, #1
 8010030:	f100 0001 	add.w	r0, r0, #1
 8010034:	d005      	beq.n	8010042 <__lo0bits+0x5a>
 8010036:	600b      	str	r3, [r1, #0]
 8010038:	4770      	bx	lr
 801003a:	4610      	mov	r0, r2
 801003c:	e7e9      	b.n	8010012 <__lo0bits+0x2a>
 801003e:	2000      	movs	r0, #0
 8010040:	4770      	bx	lr
 8010042:	2020      	movs	r0, #32
 8010044:	4770      	bx	lr
	...

08010048 <__i2b>:
 8010048:	b510      	push	{r4, lr}
 801004a:	460c      	mov	r4, r1
 801004c:	2101      	movs	r1, #1
 801004e:	f7ff feb9 	bl	800fdc4 <_Balloc>
 8010052:	4602      	mov	r2, r0
 8010054:	b928      	cbnz	r0, 8010062 <__i2b+0x1a>
 8010056:	4b05      	ldr	r3, [pc, #20]	; (801006c <__i2b+0x24>)
 8010058:	4805      	ldr	r0, [pc, #20]	; (8010070 <__i2b+0x28>)
 801005a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801005e:	f001 fb5f 	bl	8011720 <__assert_func>
 8010062:	2301      	movs	r3, #1
 8010064:	6144      	str	r4, [r0, #20]
 8010066:	6103      	str	r3, [r0, #16]
 8010068:	bd10      	pop	{r4, pc}
 801006a:	bf00      	nop
 801006c:	080121d8 	.word	0x080121d8
 8010070:	0801227b 	.word	0x0801227b

08010074 <__multiply>:
 8010074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010078:	4691      	mov	r9, r2
 801007a:	690a      	ldr	r2, [r1, #16]
 801007c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010080:	429a      	cmp	r2, r3
 8010082:	bfb8      	it	lt
 8010084:	460b      	movlt	r3, r1
 8010086:	460c      	mov	r4, r1
 8010088:	bfbc      	itt	lt
 801008a:	464c      	movlt	r4, r9
 801008c:	4699      	movlt	r9, r3
 801008e:	6927      	ldr	r7, [r4, #16]
 8010090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	6861      	ldr	r1, [r4, #4]
 8010098:	eb07 060a 	add.w	r6, r7, sl
 801009c:	42b3      	cmp	r3, r6
 801009e:	b085      	sub	sp, #20
 80100a0:	bfb8      	it	lt
 80100a2:	3101      	addlt	r1, #1
 80100a4:	f7ff fe8e 	bl	800fdc4 <_Balloc>
 80100a8:	b930      	cbnz	r0, 80100b8 <__multiply+0x44>
 80100aa:	4602      	mov	r2, r0
 80100ac:	4b44      	ldr	r3, [pc, #272]	; (80101c0 <__multiply+0x14c>)
 80100ae:	4845      	ldr	r0, [pc, #276]	; (80101c4 <__multiply+0x150>)
 80100b0:	f240 115d 	movw	r1, #349	; 0x15d
 80100b4:	f001 fb34 	bl	8011720 <__assert_func>
 80100b8:	f100 0514 	add.w	r5, r0, #20
 80100bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100c0:	462b      	mov	r3, r5
 80100c2:	2200      	movs	r2, #0
 80100c4:	4543      	cmp	r3, r8
 80100c6:	d321      	bcc.n	801010c <__multiply+0x98>
 80100c8:	f104 0314 	add.w	r3, r4, #20
 80100cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80100d0:	f109 0314 	add.w	r3, r9, #20
 80100d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80100d8:	9202      	str	r2, [sp, #8]
 80100da:	1b3a      	subs	r2, r7, r4
 80100dc:	3a15      	subs	r2, #21
 80100de:	f022 0203 	bic.w	r2, r2, #3
 80100e2:	3204      	adds	r2, #4
 80100e4:	f104 0115 	add.w	r1, r4, #21
 80100e8:	428f      	cmp	r7, r1
 80100ea:	bf38      	it	cc
 80100ec:	2204      	movcc	r2, #4
 80100ee:	9201      	str	r2, [sp, #4]
 80100f0:	9a02      	ldr	r2, [sp, #8]
 80100f2:	9303      	str	r3, [sp, #12]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d80c      	bhi.n	8010112 <__multiply+0x9e>
 80100f8:	2e00      	cmp	r6, #0
 80100fa:	dd03      	ble.n	8010104 <__multiply+0x90>
 80100fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010100:	2b00      	cmp	r3, #0
 8010102:	d05a      	beq.n	80101ba <__multiply+0x146>
 8010104:	6106      	str	r6, [r0, #16]
 8010106:	b005      	add	sp, #20
 8010108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010c:	f843 2b04 	str.w	r2, [r3], #4
 8010110:	e7d8      	b.n	80100c4 <__multiply+0x50>
 8010112:	f8b3 a000 	ldrh.w	sl, [r3]
 8010116:	f1ba 0f00 	cmp.w	sl, #0
 801011a:	d024      	beq.n	8010166 <__multiply+0xf2>
 801011c:	f104 0e14 	add.w	lr, r4, #20
 8010120:	46a9      	mov	r9, r5
 8010122:	f04f 0c00 	mov.w	ip, #0
 8010126:	f85e 2b04 	ldr.w	r2, [lr], #4
 801012a:	f8d9 1000 	ldr.w	r1, [r9]
 801012e:	fa1f fb82 	uxth.w	fp, r2
 8010132:	b289      	uxth	r1, r1
 8010134:	fb0a 110b 	mla	r1, sl, fp, r1
 8010138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801013c:	f8d9 2000 	ldr.w	r2, [r9]
 8010140:	4461      	add	r1, ip
 8010142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010146:	fb0a c20b 	mla	r2, sl, fp, ip
 801014a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801014e:	b289      	uxth	r1, r1
 8010150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010154:	4577      	cmp	r7, lr
 8010156:	f849 1b04 	str.w	r1, [r9], #4
 801015a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801015e:	d8e2      	bhi.n	8010126 <__multiply+0xb2>
 8010160:	9a01      	ldr	r2, [sp, #4]
 8010162:	f845 c002 	str.w	ip, [r5, r2]
 8010166:	9a03      	ldr	r2, [sp, #12]
 8010168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801016c:	3304      	adds	r3, #4
 801016e:	f1b9 0f00 	cmp.w	r9, #0
 8010172:	d020      	beq.n	80101b6 <__multiply+0x142>
 8010174:	6829      	ldr	r1, [r5, #0]
 8010176:	f104 0c14 	add.w	ip, r4, #20
 801017a:	46ae      	mov	lr, r5
 801017c:	f04f 0a00 	mov.w	sl, #0
 8010180:	f8bc b000 	ldrh.w	fp, [ip]
 8010184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010188:	fb09 220b 	mla	r2, r9, fp, r2
 801018c:	4492      	add	sl, r2
 801018e:	b289      	uxth	r1, r1
 8010190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010194:	f84e 1b04 	str.w	r1, [lr], #4
 8010198:	f85c 2b04 	ldr.w	r2, [ip], #4
 801019c:	f8be 1000 	ldrh.w	r1, [lr]
 80101a0:	0c12      	lsrs	r2, r2, #16
 80101a2:	fb09 1102 	mla	r1, r9, r2, r1
 80101a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80101aa:	4567      	cmp	r7, ip
 80101ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101b0:	d8e6      	bhi.n	8010180 <__multiply+0x10c>
 80101b2:	9a01      	ldr	r2, [sp, #4]
 80101b4:	50a9      	str	r1, [r5, r2]
 80101b6:	3504      	adds	r5, #4
 80101b8:	e79a      	b.n	80100f0 <__multiply+0x7c>
 80101ba:	3e01      	subs	r6, #1
 80101bc:	e79c      	b.n	80100f8 <__multiply+0x84>
 80101be:	bf00      	nop
 80101c0:	080121d8 	.word	0x080121d8
 80101c4:	0801227b 	.word	0x0801227b

080101c8 <__pow5mult>:
 80101c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101cc:	4615      	mov	r5, r2
 80101ce:	f012 0203 	ands.w	r2, r2, #3
 80101d2:	4606      	mov	r6, r0
 80101d4:	460f      	mov	r7, r1
 80101d6:	d007      	beq.n	80101e8 <__pow5mult+0x20>
 80101d8:	4c25      	ldr	r4, [pc, #148]	; (8010270 <__pow5mult+0xa8>)
 80101da:	3a01      	subs	r2, #1
 80101dc:	2300      	movs	r3, #0
 80101de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101e2:	f7ff fe51 	bl	800fe88 <__multadd>
 80101e6:	4607      	mov	r7, r0
 80101e8:	10ad      	asrs	r5, r5, #2
 80101ea:	d03d      	beq.n	8010268 <__pow5mult+0xa0>
 80101ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80101ee:	b97c      	cbnz	r4, 8010210 <__pow5mult+0x48>
 80101f0:	2010      	movs	r0, #16
 80101f2:	f7fe f8ff 	bl	800e3f4 <malloc>
 80101f6:	4602      	mov	r2, r0
 80101f8:	6270      	str	r0, [r6, #36]	; 0x24
 80101fa:	b928      	cbnz	r0, 8010208 <__pow5mult+0x40>
 80101fc:	4b1d      	ldr	r3, [pc, #116]	; (8010274 <__pow5mult+0xac>)
 80101fe:	481e      	ldr	r0, [pc, #120]	; (8010278 <__pow5mult+0xb0>)
 8010200:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010204:	f001 fa8c 	bl	8011720 <__assert_func>
 8010208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801020c:	6004      	str	r4, [r0, #0]
 801020e:	60c4      	str	r4, [r0, #12]
 8010210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010218:	b94c      	cbnz	r4, 801022e <__pow5mult+0x66>
 801021a:	f240 2171 	movw	r1, #625	; 0x271
 801021e:	4630      	mov	r0, r6
 8010220:	f7ff ff12 	bl	8010048 <__i2b>
 8010224:	2300      	movs	r3, #0
 8010226:	f8c8 0008 	str.w	r0, [r8, #8]
 801022a:	4604      	mov	r4, r0
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	f04f 0900 	mov.w	r9, #0
 8010232:	07eb      	lsls	r3, r5, #31
 8010234:	d50a      	bpl.n	801024c <__pow5mult+0x84>
 8010236:	4639      	mov	r1, r7
 8010238:	4622      	mov	r2, r4
 801023a:	4630      	mov	r0, r6
 801023c:	f7ff ff1a 	bl	8010074 <__multiply>
 8010240:	4639      	mov	r1, r7
 8010242:	4680      	mov	r8, r0
 8010244:	4630      	mov	r0, r6
 8010246:	f7ff fdfd 	bl	800fe44 <_Bfree>
 801024a:	4647      	mov	r7, r8
 801024c:	106d      	asrs	r5, r5, #1
 801024e:	d00b      	beq.n	8010268 <__pow5mult+0xa0>
 8010250:	6820      	ldr	r0, [r4, #0]
 8010252:	b938      	cbnz	r0, 8010264 <__pow5mult+0x9c>
 8010254:	4622      	mov	r2, r4
 8010256:	4621      	mov	r1, r4
 8010258:	4630      	mov	r0, r6
 801025a:	f7ff ff0b 	bl	8010074 <__multiply>
 801025e:	6020      	str	r0, [r4, #0]
 8010260:	f8c0 9000 	str.w	r9, [r0]
 8010264:	4604      	mov	r4, r0
 8010266:	e7e4      	b.n	8010232 <__pow5mult+0x6a>
 8010268:	4638      	mov	r0, r7
 801026a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026e:	bf00      	nop
 8010270:	080123c8 	.word	0x080123c8
 8010274:	08012264 	.word	0x08012264
 8010278:	0801227b 	.word	0x0801227b

0801027c <__lshift>:
 801027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010280:	460c      	mov	r4, r1
 8010282:	6849      	ldr	r1, [r1, #4]
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	4607      	mov	r7, r0
 801028e:	4691      	mov	r9, r2
 8010290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010294:	f108 0601 	add.w	r6, r8, #1
 8010298:	42b3      	cmp	r3, r6
 801029a:	db0b      	blt.n	80102b4 <__lshift+0x38>
 801029c:	4638      	mov	r0, r7
 801029e:	f7ff fd91 	bl	800fdc4 <_Balloc>
 80102a2:	4605      	mov	r5, r0
 80102a4:	b948      	cbnz	r0, 80102ba <__lshift+0x3e>
 80102a6:	4602      	mov	r2, r0
 80102a8:	4b2a      	ldr	r3, [pc, #168]	; (8010354 <__lshift+0xd8>)
 80102aa:	482b      	ldr	r0, [pc, #172]	; (8010358 <__lshift+0xdc>)
 80102ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80102b0:	f001 fa36 	bl	8011720 <__assert_func>
 80102b4:	3101      	adds	r1, #1
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	e7ee      	b.n	8010298 <__lshift+0x1c>
 80102ba:	2300      	movs	r3, #0
 80102bc:	f100 0114 	add.w	r1, r0, #20
 80102c0:	f100 0210 	add.w	r2, r0, #16
 80102c4:	4618      	mov	r0, r3
 80102c6:	4553      	cmp	r3, sl
 80102c8:	db37      	blt.n	801033a <__lshift+0xbe>
 80102ca:	6920      	ldr	r0, [r4, #16]
 80102cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102d0:	f104 0314 	add.w	r3, r4, #20
 80102d4:	f019 091f 	ands.w	r9, r9, #31
 80102d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80102e0:	d02f      	beq.n	8010342 <__lshift+0xc6>
 80102e2:	f1c9 0e20 	rsb	lr, r9, #32
 80102e6:	468a      	mov	sl, r1
 80102e8:	f04f 0c00 	mov.w	ip, #0
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	fa02 f209 	lsl.w	r2, r2, r9
 80102f2:	ea42 020c 	orr.w	r2, r2, ip
 80102f6:	f84a 2b04 	str.w	r2, [sl], #4
 80102fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80102fe:	4298      	cmp	r0, r3
 8010300:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010304:	d8f2      	bhi.n	80102ec <__lshift+0x70>
 8010306:	1b03      	subs	r3, r0, r4
 8010308:	3b15      	subs	r3, #21
 801030a:	f023 0303 	bic.w	r3, r3, #3
 801030e:	3304      	adds	r3, #4
 8010310:	f104 0215 	add.w	r2, r4, #21
 8010314:	4290      	cmp	r0, r2
 8010316:	bf38      	it	cc
 8010318:	2304      	movcc	r3, #4
 801031a:	f841 c003 	str.w	ip, [r1, r3]
 801031e:	f1bc 0f00 	cmp.w	ip, #0
 8010322:	d001      	beq.n	8010328 <__lshift+0xac>
 8010324:	f108 0602 	add.w	r6, r8, #2
 8010328:	3e01      	subs	r6, #1
 801032a:	4638      	mov	r0, r7
 801032c:	612e      	str	r6, [r5, #16]
 801032e:	4621      	mov	r1, r4
 8010330:	f7ff fd88 	bl	800fe44 <_Bfree>
 8010334:	4628      	mov	r0, r5
 8010336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801033a:	f842 0f04 	str.w	r0, [r2, #4]!
 801033e:	3301      	adds	r3, #1
 8010340:	e7c1      	b.n	80102c6 <__lshift+0x4a>
 8010342:	3904      	subs	r1, #4
 8010344:	f853 2b04 	ldr.w	r2, [r3], #4
 8010348:	f841 2f04 	str.w	r2, [r1, #4]!
 801034c:	4298      	cmp	r0, r3
 801034e:	d8f9      	bhi.n	8010344 <__lshift+0xc8>
 8010350:	e7ea      	b.n	8010328 <__lshift+0xac>
 8010352:	bf00      	nop
 8010354:	080121d8 	.word	0x080121d8
 8010358:	0801227b 	.word	0x0801227b

0801035c <__mcmp>:
 801035c:	b530      	push	{r4, r5, lr}
 801035e:	6902      	ldr	r2, [r0, #16]
 8010360:	690c      	ldr	r4, [r1, #16]
 8010362:	1b12      	subs	r2, r2, r4
 8010364:	d10e      	bne.n	8010384 <__mcmp+0x28>
 8010366:	f100 0314 	add.w	r3, r0, #20
 801036a:	3114      	adds	r1, #20
 801036c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801037c:	42a5      	cmp	r5, r4
 801037e:	d003      	beq.n	8010388 <__mcmp+0x2c>
 8010380:	d305      	bcc.n	801038e <__mcmp+0x32>
 8010382:	2201      	movs	r2, #1
 8010384:	4610      	mov	r0, r2
 8010386:	bd30      	pop	{r4, r5, pc}
 8010388:	4283      	cmp	r3, r0
 801038a:	d3f3      	bcc.n	8010374 <__mcmp+0x18>
 801038c:	e7fa      	b.n	8010384 <__mcmp+0x28>
 801038e:	f04f 32ff 	mov.w	r2, #4294967295
 8010392:	e7f7      	b.n	8010384 <__mcmp+0x28>

08010394 <__mdiff>:
 8010394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010398:	460c      	mov	r4, r1
 801039a:	4606      	mov	r6, r0
 801039c:	4611      	mov	r1, r2
 801039e:	4620      	mov	r0, r4
 80103a0:	4690      	mov	r8, r2
 80103a2:	f7ff ffdb 	bl	801035c <__mcmp>
 80103a6:	1e05      	subs	r5, r0, #0
 80103a8:	d110      	bne.n	80103cc <__mdiff+0x38>
 80103aa:	4629      	mov	r1, r5
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7ff fd09 	bl	800fdc4 <_Balloc>
 80103b2:	b930      	cbnz	r0, 80103c2 <__mdiff+0x2e>
 80103b4:	4b3a      	ldr	r3, [pc, #232]	; (80104a0 <__mdiff+0x10c>)
 80103b6:	4602      	mov	r2, r0
 80103b8:	f240 2132 	movw	r1, #562	; 0x232
 80103bc:	4839      	ldr	r0, [pc, #228]	; (80104a4 <__mdiff+0x110>)
 80103be:	f001 f9af 	bl	8011720 <__assert_func>
 80103c2:	2301      	movs	r3, #1
 80103c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	bfa4      	itt	ge
 80103ce:	4643      	movge	r3, r8
 80103d0:	46a0      	movge	r8, r4
 80103d2:	4630      	mov	r0, r6
 80103d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80103d8:	bfa6      	itte	ge
 80103da:	461c      	movge	r4, r3
 80103dc:	2500      	movge	r5, #0
 80103de:	2501      	movlt	r5, #1
 80103e0:	f7ff fcf0 	bl	800fdc4 <_Balloc>
 80103e4:	b920      	cbnz	r0, 80103f0 <__mdiff+0x5c>
 80103e6:	4b2e      	ldr	r3, [pc, #184]	; (80104a0 <__mdiff+0x10c>)
 80103e8:	4602      	mov	r2, r0
 80103ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80103ee:	e7e5      	b.n	80103bc <__mdiff+0x28>
 80103f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80103f4:	6926      	ldr	r6, [r4, #16]
 80103f6:	60c5      	str	r5, [r0, #12]
 80103f8:	f104 0914 	add.w	r9, r4, #20
 80103fc:	f108 0514 	add.w	r5, r8, #20
 8010400:	f100 0e14 	add.w	lr, r0, #20
 8010404:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801040c:	f108 0210 	add.w	r2, r8, #16
 8010410:	46f2      	mov	sl, lr
 8010412:	2100      	movs	r1, #0
 8010414:	f859 3b04 	ldr.w	r3, [r9], #4
 8010418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801041c:	fa1f f883 	uxth.w	r8, r3
 8010420:	fa11 f18b 	uxtah	r1, r1, fp
 8010424:	0c1b      	lsrs	r3, r3, #16
 8010426:	eba1 0808 	sub.w	r8, r1, r8
 801042a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801042e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010432:	fa1f f888 	uxth.w	r8, r8
 8010436:	1419      	asrs	r1, r3, #16
 8010438:	454e      	cmp	r6, r9
 801043a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801043e:	f84a 3b04 	str.w	r3, [sl], #4
 8010442:	d8e7      	bhi.n	8010414 <__mdiff+0x80>
 8010444:	1b33      	subs	r3, r6, r4
 8010446:	3b15      	subs	r3, #21
 8010448:	f023 0303 	bic.w	r3, r3, #3
 801044c:	3304      	adds	r3, #4
 801044e:	3415      	adds	r4, #21
 8010450:	42a6      	cmp	r6, r4
 8010452:	bf38      	it	cc
 8010454:	2304      	movcc	r3, #4
 8010456:	441d      	add	r5, r3
 8010458:	4473      	add	r3, lr
 801045a:	469e      	mov	lr, r3
 801045c:	462e      	mov	r6, r5
 801045e:	4566      	cmp	r6, ip
 8010460:	d30e      	bcc.n	8010480 <__mdiff+0xec>
 8010462:	f10c 0203 	add.w	r2, ip, #3
 8010466:	1b52      	subs	r2, r2, r5
 8010468:	f022 0203 	bic.w	r2, r2, #3
 801046c:	3d03      	subs	r5, #3
 801046e:	45ac      	cmp	ip, r5
 8010470:	bf38      	it	cc
 8010472:	2200      	movcc	r2, #0
 8010474:	441a      	add	r2, r3
 8010476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801047a:	b17b      	cbz	r3, 801049c <__mdiff+0x108>
 801047c:	6107      	str	r7, [r0, #16]
 801047e:	e7a3      	b.n	80103c8 <__mdiff+0x34>
 8010480:	f856 8b04 	ldr.w	r8, [r6], #4
 8010484:	fa11 f288 	uxtah	r2, r1, r8
 8010488:	1414      	asrs	r4, r2, #16
 801048a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801048e:	b292      	uxth	r2, r2
 8010490:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010494:	f84e 2b04 	str.w	r2, [lr], #4
 8010498:	1421      	asrs	r1, r4, #16
 801049a:	e7e0      	b.n	801045e <__mdiff+0xca>
 801049c:	3f01      	subs	r7, #1
 801049e:	e7ea      	b.n	8010476 <__mdiff+0xe2>
 80104a0:	080121d8 	.word	0x080121d8
 80104a4:	0801227b 	.word	0x0801227b

080104a8 <__ulp>:
 80104a8:	b082      	sub	sp, #8
 80104aa:	ed8d 0b00 	vstr	d0, [sp]
 80104ae:	9b01      	ldr	r3, [sp, #4]
 80104b0:	4912      	ldr	r1, [pc, #72]	; (80104fc <__ulp+0x54>)
 80104b2:	4019      	ands	r1, r3
 80104b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80104b8:	2900      	cmp	r1, #0
 80104ba:	dd05      	ble.n	80104c8 <__ulp+0x20>
 80104bc:	2200      	movs	r2, #0
 80104be:	460b      	mov	r3, r1
 80104c0:	ec43 2b10 	vmov	d0, r2, r3
 80104c4:	b002      	add	sp, #8
 80104c6:	4770      	bx	lr
 80104c8:	4249      	negs	r1, r1
 80104ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80104ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80104d2:	f04f 0200 	mov.w	r2, #0
 80104d6:	f04f 0300 	mov.w	r3, #0
 80104da:	da04      	bge.n	80104e6 <__ulp+0x3e>
 80104dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80104e0:	fa41 f300 	asr.w	r3, r1, r0
 80104e4:	e7ec      	b.n	80104c0 <__ulp+0x18>
 80104e6:	f1a0 0114 	sub.w	r1, r0, #20
 80104ea:	291e      	cmp	r1, #30
 80104ec:	bfda      	itte	le
 80104ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80104f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80104f6:	2101      	movgt	r1, #1
 80104f8:	460a      	mov	r2, r1
 80104fa:	e7e1      	b.n	80104c0 <__ulp+0x18>
 80104fc:	7ff00000 	.word	0x7ff00000

08010500 <__b2d>:
 8010500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010502:	6905      	ldr	r5, [r0, #16]
 8010504:	f100 0714 	add.w	r7, r0, #20
 8010508:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801050c:	1f2e      	subs	r6, r5, #4
 801050e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010512:	4620      	mov	r0, r4
 8010514:	f7ff fd48 	bl	800ffa8 <__hi0bits>
 8010518:	f1c0 0320 	rsb	r3, r0, #32
 801051c:	280a      	cmp	r0, #10
 801051e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801059c <__b2d+0x9c>
 8010522:	600b      	str	r3, [r1, #0]
 8010524:	dc14      	bgt.n	8010550 <__b2d+0x50>
 8010526:	f1c0 0e0b 	rsb	lr, r0, #11
 801052a:	fa24 f10e 	lsr.w	r1, r4, lr
 801052e:	42b7      	cmp	r7, r6
 8010530:	ea41 030c 	orr.w	r3, r1, ip
 8010534:	bf34      	ite	cc
 8010536:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801053a:	2100      	movcs	r1, #0
 801053c:	3015      	adds	r0, #21
 801053e:	fa04 f000 	lsl.w	r0, r4, r0
 8010542:	fa21 f10e 	lsr.w	r1, r1, lr
 8010546:	ea40 0201 	orr.w	r2, r0, r1
 801054a:	ec43 2b10 	vmov	d0, r2, r3
 801054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010550:	42b7      	cmp	r7, r6
 8010552:	bf3a      	itte	cc
 8010554:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010558:	f1a5 0608 	subcc.w	r6, r5, #8
 801055c:	2100      	movcs	r1, #0
 801055e:	380b      	subs	r0, #11
 8010560:	d017      	beq.n	8010592 <__b2d+0x92>
 8010562:	f1c0 0c20 	rsb	ip, r0, #32
 8010566:	fa04 f500 	lsl.w	r5, r4, r0
 801056a:	42be      	cmp	r6, r7
 801056c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010570:	ea45 0504 	orr.w	r5, r5, r4
 8010574:	bf8c      	ite	hi
 8010576:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801057a:	2400      	movls	r4, #0
 801057c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010580:	fa01 f000 	lsl.w	r0, r1, r0
 8010584:	fa24 f40c 	lsr.w	r4, r4, ip
 8010588:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801058c:	ea40 0204 	orr.w	r2, r0, r4
 8010590:	e7db      	b.n	801054a <__b2d+0x4a>
 8010592:	ea44 030c 	orr.w	r3, r4, ip
 8010596:	460a      	mov	r2, r1
 8010598:	e7d7      	b.n	801054a <__b2d+0x4a>
 801059a:	bf00      	nop
 801059c:	3ff00000 	.word	0x3ff00000

080105a0 <__d2b>:
 80105a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105a4:	4689      	mov	r9, r1
 80105a6:	2101      	movs	r1, #1
 80105a8:	ec57 6b10 	vmov	r6, r7, d0
 80105ac:	4690      	mov	r8, r2
 80105ae:	f7ff fc09 	bl	800fdc4 <_Balloc>
 80105b2:	4604      	mov	r4, r0
 80105b4:	b930      	cbnz	r0, 80105c4 <__d2b+0x24>
 80105b6:	4602      	mov	r2, r0
 80105b8:	4b25      	ldr	r3, [pc, #148]	; (8010650 <__d2b+0xb0>)
 80105ba:	4826      	ldr	r0, [pc, #152]	; (8010654 <__d2b+0xb4>)
 80105bc:	f240 310a 	movw	r1, #778	; 0x30a
 80105c0:	f001 f8ae 	bl	8011720 <__assert_func>
 80105c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80105c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105cc:	bb35      	cbnz	r5, 801061c <__d2b+0x7c>
 80105ce:	2e00      	cmp	r6, #0
 80105d0:	9301      	str	r3, [sp, #4]
 80105d2:	d028      	beq.n	8010626 <__d2b+0x86>
 80105d4:	4668      	mov	r0, sp
 80105d6:	9600      	str	r6, [sp, #0]
 80105d8:	f7ff fd06 	bl	800ffe8 <__lo0bits>
 80105dc:	9900      	ldr	r1, [sp, #0]
 80105de:	b300      	cbz	r0, 8010622 <__d2b+0x82>
 80105e0:	9a01      	ldr	r2, [sp, #4]
 80105e2:	f1c0 0320 	rsb	r3, r0, #32
 80105e6:	fa02 f303 	lsl.w	r3, r2, r3
 80105ea:	430b      	orrs	r3, r1
 80105ec:	40c2      	lsrs	r2, r0
 80105ee:	6163      	str	r3, [r4, #20]
 80105f0:	9201      	str	r2, [sp, #4]
 80105f2:	9b01      	ldr	r3, [sp, #4]
 80105f4:	61a3      	str	r3, [r4, #24]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	bf14      	ite	ne
 80105fa:	2202      	movne	r2, #2
 80105fc:	2201      	moveq	r2, #1
 80105fe:	6122      	str	r2, [r4, #16]
 8010600:	b1d5      	cbz	r5, 8010638 <__d2b+0x98>
 8010602:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010606:	4405      	add	r5, r0
 8010608:	f8c9 5000 	str.w	r5, [r9]
 801060c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010610:	f8c8 0000 	str.w	r0, [r8]
 8010614:	4620      	mov	r0, r4
 8010616:	b003      	add	sp, #12
 8010618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010620:	e7d5      	b.n	80105ce <__d2b+0x2e>
 8010622:	6161      	str	r1, [r4, #20]
 8010624:	e7e5      	b.n	80105f2 <__d2b+0x52>
 8010626:	a801      	add	r0, sp, #4
 8010628:	f7ff fcde 	bl	800ffe8 <__lo0bits>
 801062c:	9b01      	ldr	r3, [sp, #4]
 801062e:	6163      	str	r3, [r4, #20]
 8010630:	2201      	movs	r2, #1
 8010632:	6122      	str	r2, [r4, #16]
 8010634:	3020      	adds	r0, #32
 8010636:	e7e3      	b.n	8010600 <__d2b+0x60>
 8010638:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801063c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010640:	f8c9 0000 	str.w	r0, [r9]
 8010644:	6918      	ldr	r0, [r3, #16]
 8010646:	f7ff fcaf 	bl	800ffa8 <__hi0bits>
 801064a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801064e:	e7df      	b.n	8010610 <__d2b+0x70>
 8010650:	080121d8 	.word	0x080121d8
 8010654:	0801227b 	.word	0x0801227b

08010658 <__ratio>:
 8010658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	4688      	mov	r8, r1
 801065e:	4669      	mov	r1, sp
 8010660:	4681      	mov	r9, r0
 8010662:	f7ff ff4d 	bl	8010500 <__b2d>
 8010666:	a901      	add	r1, sp, #4
 8010668:	4640      	mov	r0, r8
 801066a:	ec55 4b10 	vmov	r4, r5, d0
 801066e:	f7ff ff47 	bl	8010500 <__b2d>
 8010672:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010676:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801067a:	eba3 0c02 	sub.w	ip, r3, r2
 801067e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010682:	1a9b      	subs	r3, r3, r2
 8010684:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010688:	ec51 0b10 	vmov	r0, r1, d0
 801068c:	2b00      	cmp	r3, #0
 801068e:	bfd6      	itet	le
 8010690:	460a      	movle	r2, r1
 8010692:	462a      	movgt	r2, r5
 8010694:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010698:	468b      	mov	fp, r1
 801069a:	462f      	mov	r7, r5
 801069c:	bfd4      	ite	le
 801069e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80106a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80106a6:	4620      	mov	r0, r4
 80106a8:	ee10 2a10 	vmov	r2, s0
 80106ac:	465b      	mov	r3, fp
 80106ae:	4639      	mov	r1, r7
 80106b0:	f7f0 f8e4 	bl	800087c <__aeabi_ddiv>
 80106b4:	ec41 0b10 	vmov	d0, r0, r1
 80106b8:	b003      	add	sp, #12
 80106ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106be <__copybits>:
 80106be:	3901      	subs	r1, #1
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	1149      	asrs	r1, r1, #5
 80106c4:	6914      	ldr	r4, [r2, #16]
 80106c6:	3101      	adds	r1, #1
 80106c8:	f102 0314 	add.w	r3, r2, #20
 80106cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80106d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106d4:	1f05      	subs	r5, r0, #4
 80106d6:	42a3      	cmp	r3, r4
 80106d8:	d30c      	bcc.n	80106f4 <__copybits+0x36>
 80106da:	1aa3      	subs	r3, r4, r2
 80106dc:	3b11      	subs	r3, #17
 80106de:	f023 0303 	bic.w	r3, r3, #3
 80106e2:	3211      	adds	r2, #17
 80106e4:	42a2      	cmp	r2, r4
 80106e6:	bf88      	it	hi
 80106e8:	2300      	movhi	r3, #0
 80106ea:	4418      	add	r0, r3
 80106ec:	2300      	movs	r3, #0
 80106ee:	4288      	cmp	r0, r1
 80106f0:	d305      	bcc.n	80106fe <__copybits+0x40>
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80106f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80106fc:	e7eb      	b.n	80106d6 <__copybits+0x18>
 80106fe:	f840 3b04 	str.w	r3, [r0], #4
 8010702:	e7f4      	b.n	80106ee <__copybits+0x30>

08010704 <__any_on>:
 8010704:	f100 0214 	add.w	r2, r0, #20
 8010708:	6900      	ldr	r0, [r0, #16]
 801070a:	114b      	asrs	r3, r1, #5
 801070c:	4298      	cmp	r0, r3
 801070e:	b510      	push	{r4, lr}
 8010710:	db11      	blt.n	8010736 <__any_on+0x32>
 8010712:	dd0a      	ble.n	801072a <__any_on+0x26>
 8010714:	f011 011f 	ands.w	r1, r1, #31
 8010718:	d007      	beq.n	801072a <__any_on+0x26>
 801071a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801071e:	fa24 f001 	lsr.w	r0, r4, r1
 8010722:	fa00 f101 	lsl.w	r1, r0, r1
 8010726:	428c      	cmp	r4, r1
 8010728:	d10b      	bne.n	8010742 <__any_on+0x3e>
 801072a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801072e:	4293      	cmp	r3, r2
 8010730:	d803      	bhi.n	801073a <__any_on+0x36>
 8010732:	2000      	movs	r0, #0
 8010734:	bd10      	pop	{r4, pc}
 8010736:	4603      	mov	r3, r0
 8010738:	e7f7      	b.n	801072a <__any_on+0x26>
 801073a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801073e:	2900      	cmp	r1, #0
 8010740:	d0f5      	beq.n	801072e <__any_on+0x2a>
 8010742:	2001      	movs	r0, #1
 8010744:	e7f6      	b.n	8010734 <__any_on+0x30>

08010746 <_calloc_r>:
 8010746:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010748:	fba1 2402 	umull	r2, r4, r1, r2
 801074c:	b94c      	cbnz	r4, 8010762 <_calloc_r+0x1c>
 801074e:	4611      	mov	r1, r2
 8010750:	9201      	str	r2, [sp, #4]
 8010752:	f7fd fee1 	bl	800e518 <_malloc_r>
 8010756:	9a01      	ldr	r2, [sp, #4]
 8010758:	4605      	mov	r5, r0
 801075a:	b930      	cbnz	r0, 801076a <_calloc_r+0x24>
 801075c:	4628      	mov	r0, r5
 801075e:	b003      	add	sp, #12
 8010760:	bd30      	pop	{r4, r5, pc}
 8010762:	220c      	movs	r2, #12
 8010764:	6002      	str	r2, [r0, #0]
 8010766:	2500      	movs	r5, #0
 8010768:	e7f8      	b.n	801075c <_calloc_r+0x16>
 801076a:	4621      	mov	r1, r4
 801076c:	f7fd fe60 	bl	800e430 <memset>
 8010770:	e7f4      	b.n	801075c <_calloc_r+0x16>

08010772 <_realloc_r>:
 8010772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010776:	4680      	mov	r8, r0
 8010778:	4614      	mov	r4, r2
 801077a:	460e      	mov	r6, r1
 801077c:	b921      	cbnz	r1, 8010788 <_realloc_r+0x16>
 801077e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010782:	4611      	mov	r1, r2
 8010784:	f7fd bec8 	b.w	800e518 <_malloc_r>
 8010788:	b92a      	cbnz	r2, 8010796 <_realloc_r+0x24>
 801078a:	f7fd fe59 	bl	800e440 <_free_r>
 801078e:	4625      	mov	r5, r4
 8010790:	4628      	mov	r0, r5
 8010792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010796:	f001 f80d 	bl	80117b4 <_malloc_usable_size_r>
 801079a:	4284      	cmp	r4, r0
 801079c:	4607      	mov	r7, r0
 801079e:	d802      	bhi.n	80107a6 <_realloc_r+0x34>
 80107a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80107a4:	d812      	bhi.n	80107cc <_realloc_r+0x5a>
 80107a6:	4621      	mov	r1, r4
 80107a8:	4640      	mov	r0, r8
 80107aa:	f7fd feb5 	bl	800e518 <_malloc_r>
 80107ae:	4605      	mov	r5, r0
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d0ed      	beq.n	8010790 <_realloc_r+0x1e>
 80107b4:	42bc      	cmp	r4, r7
 80107b6:	4622      	mov	r2, r4
 80107b8:	4631      	mov	r1, r6
 80107ba:	bf28      	it	cs
 80107bc:	463a      	movcs	r2, r7
 80107be:	f7fd fe29 	bl	800e414 <memcpy>
 80107c2:	4631      	mov	r1, r6
 80107c4:	4640      	mov	r0, r8
 80107c6:	f7fd fe3b 	bl	800e440 <_free_r>
 80107ca:	e7e1      	b.n	8010790 <_realloc_r+0x1e>
 80107cc:	4635      	mov	r5, r6
 80107ce:	e7df      	b.n	8010790 <_realloc_r+0x1e>

080107d0 <__ssputs_r>:
 80107d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	688e      	ldr	r6, [r1, #8]
 80107d6:	429e      	cmp	r6, r3
 80107d8:	4682      	mov	sl, r0
 80107da:	460c      	mov	r4, r1
 80107dc:	4690      	mov	r8, r2
 80107de:	461f      	mov	r7, r3
 80107e0:	d838      	bhi.n	8010854 <__ssputs_r+0x84>
 80107e2:	898a      	ldrh	r2, [r1, #12]
 80107e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80107e8:	d032      	beq.n	8010850 <__ssputs_r+0x80>
 80107ea:	6825      	ldr	r5, [r4, #0]
 80107ec:	6909      	ldr	r1, [r1, #16]
 80107ee:	eba5 0901 	sub.w	r9, r5, r1
 80107f2:	6965      	ldr	r5, [r4, #20]
 80107f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107fc:	3301      	adds	r3, #1
 80107fe:	444b      	add	r3, r9
 8010800:	106d      	asrs	r5, r5, #1
 8010802:	429d      	cmp	r5, r3
 8010804:	bf38      	it	cc
 8010806:	461d      	movcc	r5, r3
 8010808:	0553      	lsls	r3, r2, #21
 801080a:	d531      	bpl.n	8010870 <__ssputs_r+0xa0>
 801080c:	4629      	mov	r1, r5
 801080e:	f7fd fe83 	bl	800e518 <_malloc_r>
 8010812:	4606      	mov	r6, r0
 8010814:	b950      	cbnz	r0, 801082c <__ssputs_r+0x5c>
 8010816:	230c      	movs	r3, #12
 8010818:	f8ca 3000 	str.w	r3, [sl]
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010822:	81a3      	strh	r3, [r4, #12]
 8010824:	f04f 30ff 	mov.w	r0, #4294967295
 8010828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082c:	6921      	ldr	r1, [r4, #16]
 801082e:	464a      	mov	r2, r9
 8010830:	f7fd fdf0 	bl	800e414 <memcpy>
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801083a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801083e:	81a3      	strh	r3, [r4, #12]
 8010840:	6126      	str	r6, [r4, #16]
 8010842:	6165      	str	r5, [r4, #20]
 8010844:	444e      	add	r6, r9
 8010846:	eba5 0509 	sub.w	r5, r5, r9
 801084a:	6026      	str	r6, [r4, #0]
 801084c:	60a5      	str	r5, [r4, #8]
 801084e:	463e      	mov	r6, r7
 8010850:	42be      	cmp	r6, r7
 8010852:	d900      	bls.n	8010856 <__ssputs_r+0x86>
 8010854:	463e      	mov	r6, r7
 8010856:	6820      	ldr	r0, [r4, #0]
 8010858:	4632      	mov	r2, r6
 801085a:	4641      	mov	r1, r8
 801085c:	f000 ff90 	bl	8011780 <memmove>
 8010860:	68a3      	ldr	r3, [r4, #8]
 8010862:	1b9b      	subs	r3, r3, r6
 8010864:	60a3      	str	r3, [r4, #8]
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	4433      	add	r3, r6
 801086a:	6023      	str	r3, [r4, #0]
 801086c:	2000      	movs	r0, #0
 801086e:	e7db      	b.n	8010828 <__ssputs_r+0x58>
 8010870:	462a      	mov	r2, r5
 8010872:	f7ff ff7e 	bl	8010772 <_realloc_r>
 8010876:	4606      	mov	r6, r0
 8010878:	2800      	cmp	r0, #0
 801087a:	d1e1      	bne.n	8010840 <__ssputs_r+0x70>
 801087c:	6921      	ldr	r1, [r4, #16]
 801087e:	4650      	mov	r0, sl
 8010880:	f7fd fdde 	bl	800e440 <_free_r>
 8010884:	e7c7      	b.n	8010816 <__ssputs_r+0x46>
	...

08010888 <_svfiprintf_r>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	4698      	mov	r8, r3
 801088e:	898b      	ldrh	r3, [r1, #12]
 8010890:	061b      	lsls	r3, r3, #24
 8010892:	b09d      	sub	sp, #116	; 0x74
 8010894:	4607      	mov	r7, r0
 8010896:	460d      	mov	r5, r1
 8010898:	4614      	mov	r4, r2
 801089a:	d50e      	bpl.n	80108ba <_svfiprintf_r+0x32>
 801089c:	690b      	ldr	r3, [r1, #16]
 801089e:	b963      	cbnz	r3, 80108ba <_svfiprintf_r+0x32>
 80108a0:	2140      	movs	r1, #64	; 0x40
 80108a2:	f7fd fe39 	bl	800e518 <_malloc_r>
 80108a6:	6028      	str	r0, [r5, #0]
 80108a8:	6128      	str	r0, [r5, #16]
 80108aa:	b920      	cbnz	r0, 80108b6 <_svfiprintf_r+0x2e>
 80108ac:	230c      	movs	r3, #12
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	e0d1      	b.n	8010a5a <_svfiprintf_r+0x1d2>
 80108b6:	2340      	movs	r3, #64	; 0x40
 80108b8:	616b      	str	r3, [r5, #20]
 80108ba:	2300      	movs	r3, #0
 80108bc:	9309      	str	r3, [sp, #36]	; 0x24
 80108be:	2320      	movs	r3, #32
 80108c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80108c8:	2330      	movs	r3, #48	; 0x30
 80108ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a74 <_svfiprintf_r+0x1ec>
 80108ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108d2:	f04f 0901 	mov.w	r9, #1
 80108d6:	4623      	mov	r3, r4
 80108d8:	469a      	mov	sl, r3
 80108da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108de:	b10a      	cbz	r2, 80108e4 <_svfiprintf_r+0x5c>
 80108e0:	2a25      	cmp	r2, #37	; 0x25
 80108e2:	d1f9      	bne.n	80108d8 <_svfiprintf_r+0x50>
 80108e4:	ebba 0b04 	subs.w	fp, sl, r4
 80108e8:	d00b      	beq.n	8010902 <_svfiprintf_r+0x7a>
 80108ea:	465b      	mov	r3, fp
 80108ec:	4622      	mov	r2, r4
 80108ee:	4629      	mov	r1, r5
 80108f0:	4638      	mov	r0, r7
 80108f2:	f7ff ff6d 	bl	80107d0 <__ssputs_r>
 80108f6:	3001      	adds	r0, #1
 80108f8:	f000 80aa 	beq.w	8010a50 <_svfiprintf_r+0x1c8>
 80108fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108fe:	445a      	add	r2, fp
 8010900:	9209      	str	r2, [sp, #36]	; 0x24
 8010902:	f89a 3000 	ldrb.w	r3, [sl]
 8010906:	2b00      	cmp	r3, #0
 8010908:	f000 80a2 	beq.w	8010a50 <_svfiprintf_r+0x1c8>
 801090c:	2300      	movs	r3, #0
 801090e:	f04f 32ff 	mov.w	r2, #4294967295
 8010912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010916:	f10a 0a01 	add.w	sl, sl, #1
 801091a:	9304      	str	r3, [sp, #16]
 801091c:	9307      	str	r3, [sp, #28]
 801091e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010922:	931a      	str	r3, [sp, #104]	; 0x68
 8010924:	4654      	mov	r4, sl
 8010926:	2205      	movs	r2, #5
 8010928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801092c:	4851      	ldr	r0, [pc, #324]	; (8010a74 <_svfiprintf_r+0x1ec>)
 801092e:	f7ef fc6f 	bl	8000210 <memchr>
 8010932:	9a04      	ldr	r2, [sp, #16]
 8010934:	b9d8      	cbnz	r0, 801096e <_svfiprintf_r+0xe6>
 8010936:	06d0      	lsls	r0, r2, #27
 8010938:	bf44      	itt	mi
 801093a:	2320      	movmi	r3, #32
 801093c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010940:	0711      	lsls	r1, r2, #28
 8010942:	bf44      	itt	mi
 8010944:	232b      	movmi	r3, #43	; 0x2b
 8010946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801094a:	f89a 3000 	ldrb.w	r3, [sl]
 801094e:	2b2a      	cmp	r3, #42	; 0x2a
 8010950:	d015      	beq.n	801097e <_svfiprintf_r+0xf6>
 8010952:	9a07      	ldr	r2, [sp, #28]
 8010954:	4654      	mov	r4, sl
 8010956:	2000      	movs	r0, #0
 8010958:	f04f 0c0a 	mov.w	ip, #10
 801095c:	4621      	mov	r1, r4
 801095e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010962:	3b30      	subs	r3, #48	; 0x30
 8010964:	2b09      	cmp	r3, #9
 8010966:	d94e      	bls.n	8010a06 <_svfiprintf_r+0x17e>
 8010968:	b1b0      	cbz	r0, 8010998 <_svfiprintf_r+0x110>
 801096a:	9207      	str	r2, [sp, #28]
 801096c:	e014      	b.n	8010998 <_svfiprintf_r+0x110>
 801096e:	eba0 0308 	sub.w	r3, r0, r8
 8010972:	fa09 f303 	lsl.w	r3, r9, r3
 8010976:	4313      	orrs	r3, r2
 8010978:	9304      	str	r3, [sp, #16]
 801097a:	46a2      	mov	sl, r4
 801097c:	e7d2      	b.n	8010924 <_svfiprintf_r+0x9c>
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	1d19      	adds	r1, r3, #4
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	9103      	str	r1, [sp, #12]
 8010986:	2b00      	cmp	r3, #0
 8010988:	bfbb      	ittet	lt
 801098a:	425b      	neglt	r3, r3
 801098c:	f042 0202 	orrlt.w	r2, r2, #2
 8010990:	9307      	strge	r3, [sp, #28]
 8010992:	9307      	strlt	r3, [sp, #28]
 8010994:	bfb8      	it	lt
 8010996:	9204      	strlt	r2, [sp, #16]
 8010998:	7823      	ldrb	r3, [r4, #0]
 801099a:	2b2e      	cmp	r3, #46	; 0x2e
 801099c:	d10c      	bne.n	80109b8 <_svfiprintf_r+0x130>
 801099e:	7863      	ldrb	r3, [r4, #1]
 80109a0:	2b2a      	cmp	r3, #42	; 0x2a
 80109a2:	d135      	bne.n	8010a10 <_svfiprintf_r+0x188>
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	1d1a      	adds	r2, r3, #4
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	9203      	str	r2, [sp, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	bfb8      	it	lt
 80109b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80109b4:	3402      	adds	r4, #2
 80109b6:	9305      	str	r3, [sp, #20]
 80109b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a84 <_svfiprintf_r+0x1fc>
 80109bc:	7821      	ldrb	r1, [r4, #0]
 80109be:	2203      	movs	r2, #3
 80109c0:	4650      	mov	r0, sl
 80109c2:	f7ef fc25 	bl	8000210 <memchr>
 80109c6:	b140      	cbz	r0, 80109da <_svfiprintf_r+0x152>
 80109c8:	2340      	movs	r3, #64	; 0x40
 80109ca:	eba0 000a 	sub.w	r0, r0, sl
 80109ce:	fa03 f000 	lsl.w	r0, r3, r0
 80109d2:	9b04      	ldr	r3, [sp, #16]
 80109d4:	4303      	orrs	r3, r0
 80109d6:	3401      	adds	r4, #1
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109de:	4826      	ldr	r0, [pc, #152]	; (8010a78 <_svfiprintf_r+0x1f0>)
 80109e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109e4:	2206      	movs	r2, #6
 80109e6:	f7ef fc13 	bl	8000210 <memchr>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d038      	beq.n	8010a60 <_svfiprintf_r+0x1d8>
 80109ee:	4b23      	ldr	r3, [pc, #140]	; (8010a7c <_svfiprintf_r+0x1f4>)
 80109f0:	bb1b      	cbnz	r3, 8010a3a <_svfiprintf_r+0x1b2>
 80109f2:	9b03      	ldr	r3, [sp, #12]
 80109f4:	3307      	adds	r3, #7
 80109f6:	f023 0307 	bic.w	r3, r3, #7
 80109fa:	3308      	adds	r3, #8
 80109fc:	9303      	str	r3, [sp, #12]
 80109fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a00:	4433      	add	r3, r6
 8010a02:	9309      	str	r3, [sp, #36]	; 0x24
 8010a04:	e767      	b.n	80108d6 <_svfiprintf_r+0x4e>
 8010a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	2001      	movs	r0, #1
 8010a0e:	e7a5      	b.n	801095c <_svfiprintf_r+0xd4>
 8010a10:	2300      	movs	r3, #0
 8010a12:	3401      	adds	r4, #1
 8010a14:	9305      	str	r3, [sp, #20]
 8010a16:	4619      	mov	r1, r3
 8010a18:	f04f 0c0a 	mov.w	ip, #10
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a22:	3a30      	subs	r2, #48	; 0x30
 8010a24:	2a09      	cmp	r2, #9
 8010a26:	d903      	bls.n	8010a30 <_svfiprintf_r+0x1a8>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d0c5      	beq.n	80109b8 <_svfiprintf_r+0x130>
 8010a2c:	9105      	str	r1, [sp, #20]
 8010a2e:	e7c3      	b.n	80109b8 <_svfiprintf_r+0x130>
 8010a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a34:	4604      	mov	r4, r0
 8010a36:	2301      	movs	r3, #1
 8010a38:	e7f0      	b.n	8010a1c <_svfiprintf_r+0x194>
 8010a3a:	ab03      	add	r3, sp, #12
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	462a      	mov	r2, r5
 8010a40:	4b0f      	ldr	r3, [pc, #60]	; (8010a80 <_svfiprintf_r+0x1f8>)
 8010a42:	a904      	add	r1, sp, #16
 8010a44:	4638      	mov	r0, r7
 8010a46:	f3af 8000 	nop.w
 8010a4a:	1c42      	adds	r2, r0, #1
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	d1d6      	bne.n	80109fe <_svfiprintf_r+0x176>
 8010a50:	89ab      	ldrh	r3, [r5, #12]
 8010a52:	065b      	lsls	r3, r3, #25
 8010a54:	f53f af2c 	bmi.w	80108b0 <_svfiprintf_r+0x28>
 8010a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a5a:	b01d      	add	sp, #116	; 0x74
 8010a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a60:	ab03      	add	r3, sp, #12
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	462a      	mov	r2, r5
 8010a66:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <_svfiprintf_r+0x1f8>)
 8010a68:	a904      	add	r1, sp, #16
 8010a6a:	4638      	mov	r0, r7
 8010a6c:	f000 fa4c 	bl	8010f08 <_printf_i>
 8010a70:	e7eb      	b.n	8010a4a <_svfiprintf_r+0x1c2>
 8010a72:	bf00      	nop
 8010a74:	080123d4 	.word	0x080123d4
 8010a78:	080123de 	.word	0x080123de
 8010a7c:	00000000 	.word	0x00000000
 8010a80:	080107d1 	.word	0x080107d1
 8010a84:	080123da 	.word	0x080123da

08010a88 <_sungetc_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	1c4b      	adds	r3, r1, #1
 8010a8c:	4614      	mov	r4, r2
 8010a8e:	d103      	bne.n	8010a98 <_sungetc_r+0x10>
 8010a90:	f04f 35ff 	mov.w	r5, #4294967295
 8010a94:	4628      	mov	r0, r5
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	8993      	ldrh	r3, [r2, #12]
 8010a9a:	f023 0320 	bic.w	r3, r3, #32
 8010a9e:	8193      	strh	r3, [r2, #12]
 8010aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010aa2:	6852      	ldr	r2, [r2, #4]
 8010aa4:	b2cd      	uxtb	r5, r1
 8010aa6:	b18b      	cbz	r3, 8010acc <_sungetc_r+0x44>
 8010aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	dd08      	ble.n	8010ac0 <_sungetc_r+0x38>
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	1e5a      	subs	r2, r3, #1
 8010ab2:	6022      	str	r2, [r4, #0]
 8010ab4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010ab8:	6863      	ldr	r3, [r4, #4]
 8010aba:	3301      	adds	r3, #1
 8010abc:	6063      	str	r3, [r4, #4]
 8010abe:	e7e9      	b.n	8010a94 <_sungetc_r+0xc>
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	f000 fde5 	bl	8011690 <__submore>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d0f1      	beq.n	8010aae <_sungetc_r+0x26>
 8010aca:	e7e1      	b.n	8010a90 <_sungetc_r+0x8>
 8010acc:	6921      	ldr	r1, [r4, #16]
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	b151      	cbz	r1, 8010ae8 <_sungetc_r+0x60>
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	d208      	bcs.n	8010ae8 <_sungetc_r+0x60>
 8010ad6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010ada:	42a9      	cmp	r1, r5
 8010adc:	d104      	bne.n	8010ae8 <_sungetc_r+0x60>
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	3201      	adds	r2, #1
 8010ae2:	6023      	str	r3, [r4, #0]
 8010ae4:	6062      	str	r2, [r4, #4]
 8010ae6:	e7d5      	b.n	8010a94 <_sungetc_r+0xc>
 8010ae8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010af0:	6363      	str	r3, [r4, #52]	; 0x34
 8010af2:	2303      	movs	r3, #3
 8010af4:	63a3      	str	r3, [r4, #56]	; 0x38
 8010af6:	4623      	mov	r3, r4
 8010af8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010afc:	6023      	str	r3, [r4, #0]
 8010afe:	2301      	movs	r3, #1
 8010b00:	e7dc      	b.n	8010abc <_sungetc_r+0x34>

08010b02 <__ssrefill_r>:
 8010b02:	b510      	push	{r4, lr}
 8010b04:	460c      	mov	r4, r1
 8010b06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010b08:	b169      	cbz	r1, 8010b26 <__ssrefill_r+0x24>
 8010b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b0e:	4299      	cmp	r1, r3
 8010b10:	d001      	beq.n	8010b16 <__ssrefill_r+0x14>
 8010b12:	f7fd fc95 	bl	800e440 <_free_r>
 8010b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b18:	6063      	str	r3, [r4, #4]
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8010b1e:	b113      	cbz	r3, 8010b26 <__ssrefill_r+0x24>
 8010b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010b22:	6023      	str	r3, [r4, #0]
 8010b24:	bd10      	pop	{r4, pc}
 8010b26:	6923      	ldr	r3, [r4, #16]
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	6063      	str	r3, [r4, #4]
 8010b2e:	89a3      	ldrh	r3, [r4, #12]
 8010b30:	f043 0320 	orr.w	r3, r3, #32
 8010b34:	81a3      	strh	r3, [r4, #12]
 8010b36:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3a:	e7f3      	b.n	8010b24 <__ssrefill_r+0x22>

08010b3c <__ssvfiscanf_r>:
 8010b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b40:	460c      	mov	r4, r1
 8010b42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010b46:	2100      	movs	r1, #0
 8010b48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010b4c:	49a6      	ldr	r1, [pc, #664]	; (8010de8 <__ssvfiscanf_r+0x2ac>)
 8010b4e:	91a0      	str	r1, [sp, #640]	; 0x280
 8010b50:	f10d 0804 	add.w	r8, sp, #4
 8010b54:	49a5      	ldr	r1, [pc, #660]	; (8010dec <__ssvfiscanf_r+0x2b0>)
 8010b56:	4fa6      	ldr	r7, [pc, #664]	; (8010df0 <__ssvfiscanf_r+0x2b4>)
 8010b58:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010df4 <__ssvfiscanf_r+0x2b8>
 8010b5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010b60:	4606      	mov	r6, r0
 8010b62:	91a1      	str	r1, [sp, #644]	; 0x284
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	7813      	ldrb	r3, [r2, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 815a 	beq.w	8010e22 <__ssvfiscanf_r+0x2e6>
 8010b6e:	5dd9      	ldrb	r1, [r3, r7]
 8010b70:	f011 0108 	ands.w	r1, r1, #8
 8010b74:	f102 0501 	add.w	r5, r2, #1
 8010b78:	d019      	beq.n	8010bae <__ssvfiscanf_r+0x72>
 8010b7a:	6863      	ldr	r3, [r4, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	dd0f      	ble.n	8010ba0 <__ssvfiscanf_r+0x64>
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	781a      	ldrb	r2, [r3, #0]
 8010b84:	5cba      	ldrb	r2, [r7, r2]
 8010b86:	0712      	lsls	r2, r2, #28
 8010b88:	d401      	bmi.n	8010b8e <__ssvfiscanf_r+0x52>
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	e7eb      	b.n	8010b66 <__ssvfiscanf_r+0x2a>
 8010b8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010b90:	3201      	adds	r2, #1
 8010b92:	9245      	str	r2, [sp, #276]	; 0x114
 8010b94:	6862      	ldr	r2, [r4, #4]
 8010b96:	3301      	adds	r3, #1
 8010b98:	3a01      	subs	r2, #1
 8010b9a:	6062      	str	r2, [r4, #4]
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	e7ec      	b.n	8010b7a <__ssvfiscanf_r+0x3e>
 8010ba0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	4798      	blx	r3
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d0e9      	beq.n	8010b80 <__ssvfiscanf_r+0x44>
 8010bac:	e7ed      	b.n	8010b8a <__ssvfiscanf_r+0x4e>
 8010bae:	2b25      	cmp	r3, #37	; 0x25
 8010bb0:	d012      	beq.n	8010bd8 <__ssvfiscanf_r+0x9c>
 8010bb2:	469a      	mov	sl, r3
 8010bb4:	6863      	ldr	r3, [r4, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f340 8091 	ble.w	8010cde <__ssvfiscanf_r+0x1a2>
 8010bbc:	6822      	ldr	r2, [r4, #0]
 8010bbe:	7813      	ldrb	r3, [r2, #0]
 8010bc0:	4553      	cmp	r3, sl
 8010bc2:	f040 812e 	bne.w	8010e22 <__ssvfiscanf_r+0x2e6>
 8010bc6:	6863      	ldr	r3, [r4, #4]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	6063      	str	r3, [r4, #4]
 8010bcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010bce:	3201      	adds	r2, #1
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	6022      	str	r2, [r4, #0]
 8010bd4:	9345      	str	r3, [sp, #276]	; 0x114
 8010bd6:	e7d8      	b.n	8010b8a <__ssvfiscanf_r+0x4e>
 8010bd8:	9141      	str	r1, [sp, #260]	; 0x104
 8010bda:	9143      	str	r1, [sp, #268]	; 0x10c
 8010bdc:	7853      	ldrb	r3, [r2, #1]
 8010bde:	2b2a      	cmp	r3, #42	; 0x2a
 8010be0:	bf02      	ittt	eq
 8010be2:	2310      	moveq	r3, #16
 8010be4:	1c95      	addeq	r5, r2, #2
 8010be6:	9341      	streq	r3, [sp, #260]	; 0x104
 8010be8:	220a      	movs	r2, #10
 8010bea:	46aa      	mov	sl, r5
 8010bec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010bf0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010bf4:	2b09      	cmp	r3, #9
 8010bf6:	d91d      	bls.n	8010c34 <__ssvfiscanf_r+0xf8>
 8010bf8:	487e      	ldr	r0, [pc, #504]	; (8010df4 <__ssvfiscanf_r+0x2b8>)
 8010bfa:	2203      	movs	r2, #3
 8010bfc:	f7ef fb08 	bl	8000210 <memchr>
 8010c00:	b140      	cbz	r0, 8010c14 <__ssvfiscanf_r+0xd8>
 8010c02:	2301      	movs	r3, #1
 8010c04:	eba0 0009 	sub.w	r0, r0, r9
 8010c08:	fa03 f000 	lsl.w	r0, r3, r0
 8010c0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c0e:	4318      	orrs	r0, r3
 8010c10:	9041      	str	r0, [sp, #260]	; 0x104
 8010c12:	4655      	mov	r5, sl
 8010c14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010c18:	2b78      	cmp	r3, #120	; 0x78
 8010c1a:	d806      	bhi.n	8010c2a <__ssvfiscanf_r+0xee>
 8010c1c:	2b57      	cmp	r3, #87	; 0x57
 8010c1e:	d810      	bhi.n	8010c42 <__ssvfiscanf_r+0x106>
 8010c20:	2b25      	cmp	r3, #37	; 0x25
 8010c22:	d0c6      	beq.n	8010bb2 <__ssvfiscanf_r+0x76>
 8010c24:	d856      	bhi.n	8010cd4 <__ssvfiscanf_r+0x198>
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d064      	beq.n	8010cf4 <__ssvfiscanf_r+0x1b8>
 8010c2a:	2303      	movs	r3, #3
 8010c2c:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c2e:	230a      	movs	r3, #10
 8010c30:	9342      	str	r3, [sp, #264]	; 0x108
 8010c32:	e071      	b.n	8010d18 <__ssvfiscanf_r+0x1dc>
 8010c34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010c36:	fb02 1103 	mla	r1, r2, r3, r1
 8010c3a:	3930      	subs	r1, #48	; 0x30
 8010c3c:	9143      	str	r1, [sp, #268]	; 0x10c
 8010c3e:	4655      	mov	r5, sl
 8010c40:	e7d3      	b.n	8010bea <__ssvfiscanf_r+0xae>
 8010c42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010c46:	2a20      	cmp	r2, #32
 8010c48:	d8ef      	bhi.n	8010c2a <__ssvfiscanf_r+0xee>
 8010c4a:	a101      	add	r1, pc, #4	; (adr r1, 8010c50 <__ssvfiscanf_r+0x114>)
 8010c4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c50:	08010d03 	.word	0x08010d03
 8010c54:	08010c2b 	.word	0x08010c2b
 8010c58:	08010c2b 	.word	0x08010c2b
 8010c5c:	08010d61 	.word	0x08010d61
 8010c60:	08010c2b 	.word	0x08010c2b
 8010c64:	08010c2b 	.word	0x08010c2b
 8010c68:	08010c2b 	.word	0x08010c2b
 8010c6c:	08010c2b 	.word	0x08010c2b
 8010c70:	08010c2b 	.word	0x08010c2b
 8010c74:	08010c2b 	.word	0x08010c2b
 8010c78:	08010c2b 	.word	0x08010c2b
 8010c7c:	08010d77 	.word	0x08010d77
 8010c80:	08010d4d 	.word	0x08010d4d
 8010c84:	08010cdb 	.word	0x08010cdb
 8010c88:	08010cdb 	.word	0x08010cdb
 8010c8c:	08010cdb 	.word	0x08010cdb
 8010c90:	08010c2b 	.word	0x08010c2b
 8010c94:	08010d51 	.word	0x08010d51
 8010c98:	08010c2b 	.word	0x08010c2b
 8010c9c:	08010c2b 	.word	0x08010c2b
 8010ca0:	08010c2b 	.word	0x08010c2b
 8010ca4:	08010c2b 	.word	0x08010c2b
 8010ca8:	08010d87 	.word	0x08010d87
 8010cac:	08010d59 	.word	0x08010d59
 8010cb0:	08010cfb 	.word	0x08010cfb
 8010cb4:	08010c2b 	.word	0x08010c2b
 8010cb8:	08010c2b 	.word	0x08010c2b
 8010cbc:	08010d83 	.word	0x08010d83
 8010cc0:	08010c2b 	.word	0x08010c2b
 8010cc4:	08010d4d 	.word	0x08010d4d
 8010cc8:	08010c2b 	.word	0x08010c2b
 8010ccc:	08010c2b 	.word	0x08010c2b
 8010cd0:	08010d03 	.word	0x08010d03
 8010cd4:	3b45      	subs	r3, #69	; 0x45
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d8a7      	bhi.n	8010c2a <__ssvfiscanf_r+0xee>
 8010cda:	2305      	movs	r3, #5
 8010cdc:	e01b      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010cde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ce0:	4621      	mov	r1, r4
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	4798      	blx	r3
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	f43f af68 	beq.w	8010bbc <__ssvfiscanf_r+0x80>
 8010cec:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	f040 808d 	bne.w	8010e0e <__ssvfiscanf_r+0x2d2>
 8010cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf8:	e08f      	b.n	8010e1a <__ssvfiscanf_r+0x2de>
 8010cfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010cfc:	f042 0220 	orr.w	r2, r2, #32
 8010d00:	9241      	str	r2, [sp, #260]	; 0x104
 8010d02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d08:	9241      	str	r2, [sp, #260]	; 0x104
 8010d0a:	2210      	movs	r2, #16
 8010d0c:	2b6f      	cmp	r3, #111	; 0x6f
 8010d0e:	9242      	str	r2, [sp, #264]	; 0x108
 8010d10:	bf34      	ite	cc
 8010d12:	2303      	movcc	r3, #3
 8010d14:	2304      	movcs	r3, #4
 8010d16:	9347      	str	r3, [sp, #284]	; 0x11c
 8010d18:	6863      	ldr	r3, [r4, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	dd42      	ble.n	8010da4 <__ssvfiscanf_r+0x268>
 8010d1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010d20:	0659      	lsls	r1, r3, #25
 8010d22:	d404      	bmi.n	8010d2e <__ssvfiscanf_r+0x1f2>
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	781a      	ldrb	r2, [r3, #0]
 8010d28:	5cba      	ldrb	r2, [r7, r2]
 8010d2a:	0712      	lsls	r2, r2, #28
 8010d2c:	d441      	bmi.n	8010db2 <__ssvfiscanf_r+0x276>
 8010d2e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010d30:	2b02      	cmp	r3, #2
 8010d32:	dc50      	bgt.n	8010dd6 <__ssvfiscanf_r+0x29a>
 8010d34:	466b      	mov	r3, sp
 8010d36:	4622      	mov	r2, r4
 8010d38:	a941      	add	r1, sp, #260	; 0x104
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f000 fa0a 	bl	8011154 <_scanf_chars>
 8010d40:	2801      	cmp	r0, #1
 8010d42:	d06e      	beq.n	8010e22 <__ssvfiscanf_r+0x2e6>
 8010d44:	2802      	cmp	r0, #2
 8010d46:	f47f af20 	bne.w	8010b8a <__ssvfiscanf_r+0x4e>
 8010d4a:	e7cf      	b.n	8010cec <__ssvfiscanf_r+0x1b0>
 8010d4c:	220a      	movs	r2, #10
 8010d4e:	e7dd      	b.n	8010d0c <__ssvfiscanf_r+0x1d0>
 8010d50:	2300      	movs	r3, #0
 8010d52:	9342      	str	r3, [sp, #264]	; 0x108
 8010d54:	2303      	movs	r3, #3
 8010d56:	e7de      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010d58:	2308      	movs	r3, #8
 8010d5a:	9342      	str	r3, [sp, #264]	; 0x108
 8010d5c:	2304      	movs	r3, #4
 8010d5e:	e7da      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010d60:	4629      	mov	r1, r5
 8010d62:	4640      	mov	r0, r8
 8010d64:	f000 fb64 	bl	8011430 <__sccl>
 8010d68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d6e:	9341      	str	r3, [sp, #260]	; 0x104
 8010d70:	4605      	mov	r5, r0
 8010d72:	2301      	movs	r3, #1
 8010d74:	e7cf      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010d76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d7c:	9341      	str	r3, [sp, #260]	; 0x104
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e7c9      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010d82:	2302      	movs	r3, #2
 8010d84:	e7c7      	b.n	8010d16 <__ssvfiscanf_r+0x1da>
 8010d86:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010d88:	06c3      	lsls	r3, r0, #27
 8010d8a:	f53f aefe 	bmi.w	8010b8a <__ssvfiscanf_r+0x4e>
 8010d8e:	9b00      	ldr	r3, [sp, #0]
 8010d90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010d92:	1d19      	adds	r1, r3, #4
 8010d94:	9100      	str	r1, [sp, #0]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f010 0f01 	tst.w	r0, #1
 8010d9c:	bf14      	ite	ne
 8010d9e:	801a      	strhne	r2, [r3, #0]
 8010da0:	601a      	streq	r2, [r3, #0]
 8010da2:	e6f2      	b.n	8010b8a <__ssvfiscanf_r+0x4e>
 8010da4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010da6:	4621      	mov	r1, r4
 8010da8:	4630      	mov	r0, r6
 8010daa:	4798      	blx	r3
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d0b6      	beq.n	8010d1e <__ssvfiscanf_r+0x1e2>
 8010db0:	e79c      	b.n	8010cec <__ssvfiscanf_r+0x1b0>
 8010db2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010db4:	3201      	adds	r2, #1
 8010db6:	9245      	str	r2, [sp, #276]	; 0x114
 8010db8:	6862      	ldr	r2, [r4, #4]
 8010dba:	3a01      	subs	r2, #1
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	6062      	str	r2, [r4, #4]
 8010dc0:	dd02      	ble.n	8010dc8 <__ssvfiscanf_r+0x28c>
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	6023      	str	r3, [r4, #0]
 8010dc6:	e7ad      	b.n	8010d24 <__ssvfiscanf_r+0x1e8>
 8010dc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4630      	mov	r0, r6
 8010dce:	4798      	blx	r3
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d0a7      	beq.n	8010d24 <__ssvfiscanf_r+0x1e8>
 8010dd4:	e78a      	b.n	8010cec <__ssvfiscanf_r+0x1b0>
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	dc0e      	bgt.n	8010df8 <__ssvfiscanf_r+0x2bc>
 8010dda:	466b      	mov	r3, sp
 8010ddc:	4622      	mov	r2, r4
 8010dde:	a941      	add	r1, sp, #260	; 0x104
 8010de0:	4630      	mov	r0, r6
 8010de2:	f000 fa11 	bl	8011208 <_scanf_i>
 8010de6:	e7ab      	b.n	8010d40 <__ssvfiscanf_r+0x204>
 8010de8:	08010a89 	.word	0x08010a89
 8010dec:	08010b03 	.word	0x08010b03
 8010df0:	08012011 	.word	0x08012011
 8010df4:	080123da 	.word	0x080123da
 8010df8:	4b0b      	ldr	r3, [pc, #44]	; (8010e28 <__ssvfiscanf_r+0x2ec>)
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f43f aec5 	beq.w	8010b8a <__ssvfiscanf_r+0x4e>
 8010e00:	466b      	mov	r3, sp
 8010e02:	4622      	mov	r2, r4
 8010e04:	a941      	add	r1, sp, #260	; 0x104
 8010e06:	4630      	mov	r0, r6
 8010e08:	f3af 8000 	nop.w
 8010e0c:	e798      	b.n	8010d40 <__ssvfiscanf_r+0x204>
 8010e0e:	89a3      	ldrh	r3, [r4, #12]
 8010e10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010e14:	bf18      	it	ne
 8010e16:	f04f 30ff 	movne.w	r0, #4294967295
 8010e1a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010e24:	e7f9      	b.n	8010e1a <__ssvfiscanf_r+0x2de>
 8010e26:	bf00      	nop
 8010e28:	00000000 	.word	0x00000000

08010e2c <_printf_common>:
 8010e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e30:	4616      	mov	r6, r2
 8010e32:	4699      	mov	r9, r3
 8010e34:	688a      	ldr	r2, [r1, #8]
 8010e36:	690b      	ldr	r3, [r1, #16]
 8010e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	bfb8      	it	lt
 8010e40:	4613      	movlt	r3, r2
 8010e42:	6033      	str	r3, [r6, #0]
 8010e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e48:	4607      	mov	r7, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	b10a      	cbz	r2, 8010e52 <_printf_common+0x26>
 8010e4e:	3301      	adds	r3, #1
 8010e50:	6033      	str	r3, [r6, #0]
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	0699      	lsls	r1, r3, #26
 8010e56:	bf42      	ittt	mi
 8010e58:	6833      	ldrmi	r3, [r6, #0]
 8010e5a:	3302      	addmi	r3, #2
 8010e5c:	6033      	strmi	r3, [r6, #0]
 8010e5e:	6825      	ldr	r5, [r4, #0]
 8010e60:	f015 0506 	ands.w	r5, r5, #6
 8010e64:	d106      	bne.n	8010e74 <_printf_common+0x48>
 8010e66:	f104 0a19 	add.w	sl, r4, #25
 8010e6a:	68e3      	ldr	r3, [r4, #12]
 8010e6c:	6832      	ldr	r2, [r6, #0]
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	dc26      	bgt.n	8010ec2 <_printf_common+0x96>
 8010e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e78:	1e13      	subs	r3, r2, #0
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	bf18      	it	ne
 8010e7e:	2301      	movne	r3, #1
 8010e80:	0692      	lsls	r2, r2, #26
 8010e82:	d42b      	bmi.n	8010edc <_printf_common+0xb0>
 8010e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e88:	4649      	mov	r1, r9
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	47c0      	blx	r8
 8010e8e:	3001      	adds	r0, #1
 8010e90:	d01e      	beq.n	8010ed0 <_printf_common+0xa4>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	68e5      	ldr	r5, [r4, #12]
 8010e96:	6832      	ldr	r2, [r6, #0]
 8010e98:	f003 0306 	and.w	r3, r3, #6
 8010e9c:	2b04      	cmp	r3, #4
 8010e9e:	bf08      	it	eq
 8010ea0:	1aad      	subeq	r5, r5, r2
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	6922      	ldr	r2, [r4, #16]
 8010ea6:	bf0c      	ite	eq
 8010ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010eac:	2500      	movne	r5, #0
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	bfc4      	itt	gt
 8010eb2:	1a9b      	subgt	r3, r3, r2
 8010eb4:	18ed      	addgt	r5, r5, r3
 8010eb6:	2600      	movs	r6, #0
 8010eb8:	341a      	adds	r4, #26
 8010eba:	42b5      	cmp	r5, r6
 8010ebc:	d11a      	bne.n	8010ef4 <_printf_common+0xc8>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	e008      	b.n	8010ed4 <_printf_common+0xa8>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	4652      	mov	r2, sl
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	4638      	mov	r0, r7
 8010eca:	47c0      	blx	r8
 8010ecc:	3001      	adds	r0, #1
 8010ece:	d103      	bne.n	8010ed8 <_printf_common+0xac>
 8010ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed8:	3501      	adds	r5, #1
 8010eda:	e7c6      	b.n	8010e6a <_printf_common+0x3e>
 8010edc:	18e1      	adds	r1, r4, r3
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	2030      	movs	r0, #48	; 0x30
 8010ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ee6:	4422      	add	r2, r4
 8010ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ef0:	3302      	adds	r3, #2
 8010ef2:	e7c7      	b.n	8010e84 <_printf_common+0x58>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	4649      	mov	r1, r9
 8010efa:	4638      	mov	r0, r7
 8010efc:	47c0      	blx	r8
 8010efe:	3001      	adds	r0, #1
 8010f00:	d0e6      	beq.n	8010ed0 <_printf_common+0xa4>
 8010f02:	3601      	adds	r6, #1
 8010f04:	e7d9      	b.n	8010eba <_printf_common+0x8e>
	...

08010f08 <_printf_i>:
 8010f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f0c:	7e0f      	ldrb	r7, [r1, #24]
 8010f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f10:	2f78      	cmp	r7, #120	; 0x78
 8010f12:	4691      	mov	r9, r2
 8010f14:	4680      	mov	r8, r0
 8010f16:	460c      	mov	r4, r1
 8010f18:	469a      	mov	sl, r3
 8010f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f1e:	d807      	bhi.n	8010f30 <_printf_i+0x28>
 8010f20:	2f62      	cmp	r7, #98	; 0x62
 8010f22:	d80a      	bhi.n	8010f3a <_printf_i+0x32>
 8010f24:	2f00      	cmp	r7, #0
 8010f26:	f000 80d8 	beq.w	80110da <_printf_i+0x1d2>
 8010f2a:	2f58      	cmp	r7, #88	; 0x58
 8010f2c:	f000 80a3 	beq.w	8011076 <_printf_i+0x16e>
 8010f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f38:	e03a      	b.n	8010fb0 <_printf_i+0xa8>
 8010f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f3e:	2b15      	cmp	r3, #21
 8010f40:	d8f6      	bhi.n	8010f30 <_printf_i+0x28>
 8010f42:	a101      	add	r1, pc, #4	; (adr r1, 8010f48 <_printf_i+0x40>)
 8010f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f48:	08010fa1 	.word	0x08010fa1
 8010f4c:	08010fb5 	.word	0x08010fb5
 8010f50:	08010f31 	.word	0x08010f31
 8010f54:	08010f31 	.word	0x08010f31
 8010f58:	08010f31 	.word	0x08010f31
 8010f5c:	08010f31 	.word	0x08010f31
 8010f60:	08010fb5 	.word	0x08010fb5
 8010f64:	08010f31 	.word	0x08010f31
 8010f68:	08010f31 	.word	0x08010f31
 8010f6c:	08010f31 	.word	0x08010f31
 8010f70:	08010f31 	.word	0x08010f31
 8010f74:	080110c1 	.word	0x080110c1
 8010f78:	08010fe5 	.word	0x08010fe5
 8010f7c:	080110a3 	.word	0x080110a3
 8010f80:	08010f31 	.word	0x08010f31
 8010f84:	08010f31 	.word	0x08010f31
 8010f88:	080110e3 	.word	0x080110e3
 8010f8c:	08010f31 	.word	0x08010f31
 8010f90:	08010fe5 	.word	0x08010fe5
 8010f94:	08010f31 	.word	0x08010f31
 8010f98:	08010f31 	.word	0x08010f31
 8010f9c:	080110ab 	.word	0x080110ab
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	1d1a      	adds	r2, r3, #4
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	602a      	str	r2, [r5, #0]
 8010fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e0a3      	b.n	80110fc <_printf_i+0x1f4>
 8010fb4:	6820      	ldr	r0, [r4, #0]
 8010fb6:	6829      	ldr	r1, [r5, #0]
 8010fb8:	0606      	lsls	r6, r0, #24
 8010fba:	f101 0304 	add.w	r3, r1, #4
 8010fbe:	d50a      	bpl.n	8010fd6 <_printf_i+0xce>
 8010fc0:	680e      	ldr	r6, [r1, #0]
 8010fc2:	602b      	str	r3, [r5, #0]
 8010fc4:	2e00      	cmp	r6, #0
 8010fc6:	da03      	bge.n	8010fd0 <_printf_i+0xc8>
 8010fc8:	232d      	movs	r3, #45	; 0x2d
 8010fca:	4276      	negs	r6, r6
 8010fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fd0:	485e      	ldr	r0, [pc, #376]	; (801114c <_printf_i+0x244>)
 8010fd2:	230a      	movs	r3, #10
 8010fd4:	e019      	b.n	801100a <_printf_i+0x102>
 8010fd6:	680e      	ldr	r6, [r1, #0]
 8010fd8:	602b      	str	r3, [r5, #0]
 8010fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010fde:	bf18      	it	ne
 8010fe0:	b236      	sxthne	r6, r6
 8010fe2:	e7ef      	b.n	8010fc4 <_printf_i+0xbc>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	6820      	ldr	r0, [r4, #0]
 8010fe8:	1d19      	adds	r1, r3, #4
 8010fea:	6029      	str	r1, [r5, #0]
 8010fec:	0601      	lsls	r1, r0, #24
 8010fee:	d501      	bpl.n	8010ff4 <_printf_i+0xec>
 8010ff0:	681e      	ldr	r6, [r3, #0]
 8010ff2:	e002      	b.n	8010ffa <_printf_i+0xf2>
 8010ff4:	0646      	lsls	r6, r0, #25
 8010ff6:	d5fb      	bpl.n	8010ff0 <_printf_i+0xe8>
 8010ff8:	881e      	ldrh	r6, [r3, #0]
 8010ffa:	4854      	ldr	r0, [pc, #336]	; (801114c <_printf_i+0x244>)
 8010ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8010ffe:	bf0c      	ite	eq
 8011000:	2308      	moveq	r3, #8
 8011002:	230a      	movne	r3, #10
 8011004:	2100      	movs	r1, #0
 8011006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801100a:	6865      	ldr	r5, [r4, #4]
 801100c:	60a5      	str	r5, [r4, #8]
 801100e:	2d00      	cmp	r5, #0
 8011010:	bfa2      	ittt	ge
 8011012:	6821      	ldrge	r1, [r4, #0]
 8011014:	f021 0104 	bicge.w	r1, r1, #4
 8011018:	6021      	strge	r1, [r4, #0]
 801101a:	b90e      	cbnz	r6, 8011020 <_printf_i+0x118>
 801101c:	2d00      	cmp	r5, #0
 801101e:	d04d      	beq.n	80110bc <_printf_i+0x1b4>
 8011020:	4615      	mov	r5, r2
 8011022:	fbb6 f1f3 	udiv	r1, r6, r3
 8011026:	fb03 6711 	mls	r7, r3, r1, r6
 801102a:	5dc7      	ldrb	r7, [r0, r7]
 801102c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011030:	4637      	mov	r7, r6
 8011032:	42bb      	cmp	r3, r7
 8011034:	460e      	mov	r6, r1
 8011036:	d9f4      	bls.n	8011022 <_printf_i+0x11a>
 8011038:	2b08      	cmp	r3, #8
 801103a:	d10b      	bne.n	8011054 <_printf_i+0x14c>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	07de      	lsls	r6, r3, #31
 8011040:	d508      	bpl.n	8011054 <_printf_i+0x14c>
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	6861      	ldr	r1, [r4, #4]
 8011046:	4299      	cmp	r1, r3
 8011048:	bfde      	ittt	le
 801104a:	2330      	movle	r3, #48	; 0x30
 801104c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011054:	1b52      	subs	r2, r2, r5
 8011056:	6122      	str	r2, [r4, #16]
 8011058:	f8cd a000 	str.w	sl, [sp]
 801105c:	464b      	mov	r3, r9
 801105e:	aa03      	add	r2, sp, #12
 8011060:	4621      	mov	r1, r4
 8011062:	4640      	mov	r0, r8
 8011064:	f7ff fee2 	bl	8010e2c <_printf_common>
 8011068:	3001      	adds	r0, #1
 801106a:	d14c      	bne.n	8011106 <_printf_i+0x1fe>
 801106c:	f04f 30ff 	mov.w	r0, #4294967295
 8011070:	b004      	add	sp, #16
 8011072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011076:	4835      	ldr	r0, [pc, #212]	; (801114c <_printf_i+0x244>)
 8011078:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801107c:	6829      	ldr	r1, [r5, #0]
 801107e:	6823      	ldr	r3, [r4, #0]
 8011080:	f851 6b04 	ldr.w	r6, [r1], #4
 8011084:	6029      	str	r1, [r5, #0]
 8011086:	061d      	lsls	r5, r3, #24
 8011088:	d514      	bpl.n	80110b4 <_printf_i+0x1ac>
 801108a:	07df      	lsls	r7, r3, #31
 801108c:	bf44      	itt	mi
 801108e:	f043 0320 	orrmi.w	r3, r3, #32
 8011092:	6023      	strmi	r3, [r4, #0]
 8011094:	b91e      	cbnz	r6, 801109e <_printf_i+0x196>
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	f023 0320 	bic.w	r3, r3, #32
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	2310      	movs	r3, #16
 80110a0:	e7b0      	b.n	8011004 <_printf_i+0xfc>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	f043 0320 	orr.w	r3, r3, #32
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	2378      	movs	r3, #120	; 0x78
 80110ac:	4828      	ldr	r0, [pc, #160]	; (8011150 <_printf_i+0x248>)
 80110ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110b2:	e7e3      	b.n	801107c <_printf_i+0x174>
 80110b4:	0659      	lsls	r1, r3, #25
 80110b6:	bf48      	it	mi
 80110b8:	b2b6      	uxthmi	r6, r6
 80110ba:	e7e6      	b.n	801108a <_printf_i+0x182>
 80110bc:	4615      	mov	r5, r2
 80110be:	e7bb      	b.n	8011038 <_printf_i+0x130>
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	6826      	ldr	r6, [r4, #0]
 80110c4:	6961      	ldr	r1, [r4, #20]
 80110c6:	1d18      	adds	r0, r3, #4
 80110c8:	6028      	str	r0, [r5, #0]
 80110ca:	0635      	lsls	r5, r6, #24
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	d501      	bpl.n	80110d4 <_printf_i+0x1cc>
 80110d0:	6019      	str	r1, [r3, #0]
 80110d2:	e002      	b.n	80110da <_printf_i+0x1d2>
 80110d4:	0670      	lsls	r0, r6, #25
 80110d6:	d5fb      	bpl.n	80110d0 <_printf_i+0x1c8>
 80110d8:	8019      	strh	r1, [r3, #0]
 80110da:	2300      	movs	r3, #0
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	4615      	mov	r5, r2
 80110e0:	e7ba      	b.n	8011058 <_printf_i+0x150>
 80110e2:	682b      	ldr	r3, [r5, #0]
 80110e4:	1d1a      	adds	r2, r3, #4
 80110e6:	602a      	str	r2, [r5, #0]
 80110e8:	681d      	ldr	r5, [r3, #0]
 80110ea:	6862      	ldr	r2, [r4, #4]
 80110ec:	2100      	movs	r1, #0
 80110ee:	4628      	mov	r0, r5
 80110f0:	f7ef f88e 	bl	8000210 <memchr>
 80110f4:	b108      	cbz	r0, 80110fa <_printf_i+0x1f2>
 80110f6:	1b40      	subs	r0, r0, r5
 80110f8:	6060      	str	r0, [r4, #4]
 80110fa:	6863      	ldr	r3, [r4, #4]
 80110fc:	6123      	str	r3, [r4, #16]
 80110fe:	2300      	movs	r3, #0
 8011100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011104:	e7a8      	b.n	8011058 <_printf_i+0x150>
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	462a      	mov	r2, r5
 801110a:	4649      	mov	r1, r9
 801110c:	4640      	mov	r0, r8
 801110e:	47d0      	blx	sl
 8011110:	3001      	adds	r0, #1
 8011112:	d0ab      	beq.n	801106c <_printf_i+0x164>
 8011114:	6823      	ldr	r3, [r4, #0]
 8011116:	079b      	lsls	r3, r3, #30
 8011118:	d413      	bmi.n	8011142 <_printf_i+0x23a>
 801111a:	68e0      	ldr	r0, [r4, #12]
 801111c:	9b03      	ldr	r3, [sp, #12]
 801111e:	4298      	cmp	r0, r3
 8011120:	bfb8      	it	lt
 8011122:	4618      	movlt	r0, r3
 8011124:	e7a4      	b.n	8011070 <_printf_i+0x168>
 8011126:	2301      	movs	r3, #1
 8011128:	4632      	mov	r2, r6
 801112a:	4649      	mov	r1, r9
 801112c:	4640      	mov	r0, r8
 801112e:	47d0      	blx	sl
 8011130:	3001      	adds	r0, #1
 8011132:	d09b      	beq.n	801106c <_printf_i+0x164>
 8011134:	3501      	adds	r5, #1
 8011136:	68e3      	ldr	r3, [r4, #12]
 8011138:	9903      	ldr	r1, [sp, #12]
 801113a:	1a5b      	subs	r3, r3, r1
 801113c:	42ab      	cmp	r3, r5
 801113e:	dcf2      	bgt.n	8011126 <_printf_i+0x21e>
 8011140:	e7eb      	b.n	801111a <_printf_i+0x212>
 8011142:	2500      	movs	r5, #0
 8011144:	f104 0619 	add.w	r6, r4, #25
 8011148:	e7f5      	b.n	8011136 <_printf_i+0x22e>
 801114a:	bf00      	nop
 801114c:	080123e5 	.word	0x080123e5
 8011150:	080123f6 	.word	0x080123f6

08011154 <_scanf_chars>:
 8011154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011158:	4615      	mov	r5, r2
 801115a:	688a      	ldr	r2, [r1, #8]
 801115c:	4680      	mov	r8, r0
 801115e:	460c      	mov	r4, r1
 8011160:	b932      	cbnz	r2, 8011170 <_scanf_chars+0x1c>
 8011162:	698a      	ldr	r2, [r1, #24]
 8011164:	2a00      	cmp	r2, #0
 8011166:	bf0c      	ite	eq
 8011168:	2201      	moveq	r2, #1
 801116a:	f04f 32ff 	movne.w	r2, #4294967295
 801116e:	608a      	str	r2, [r1, #8]
 8011170:	6822      	ldr	r2, [r4, #0]
 8011172:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011204 <_scanf_chars+0xb0>
 8011176:	06d1      	lsls	r1, r2, #27
 8011178:	bf5f      	itttt	pl
 801117a:	681a      	ldrpl	r2, [r3, #0]
 801117c:	1d11      	addpl	r1, r2, #4
 801117e:	6019      	strpl	r1, [r3, #0]
 8011180:	6816      	ldrpl	r6, [r2, #0]
 8011182:	2700      	movs	r7, #0
 8011184:	69a0      	ldr	r0, [r4, #24]
 8011186:	b188      	cbz	r0, 80111ac <_scanf_chars+0x58>
 8011188:	2801      	cmp	r0, #1
 801118a:	d107      	bne.n	801119c <_scanf_chars+0x48>
 801118c:	682a      	ldr	r2, [r5, #0]
 801118e:	7811      	ldrb	r1, [r2, #0]
 8011190:	6962      	ldr	r2, [r4, #20]
 8011192:	5c52      	ldrb	r2, [r2, r1]
 8011194:	b952      	cbnz	r2, 80111ac <_scanf_chars+0x58>
 8011196:	2f00      	cmp	r7, #0
 8011198:	d031      	beq.n	80111fe <_scanf_chars+0xaa>
 801119a:	e022      	b.n	80111e2 <_scanf_chars+0x8e>
 801119c:	2802      	cmp	r0, #2
 801119e:	d120      	bne.n	80111e2 <_scanf_chars+0x8e>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80111a8:	071b      	lsls	r3, r3, #28
 80111aa:	d41a      	bmi.n	80111e2 <_scanf_chars+0x8e>
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	06da      	lsls	r2, r3, #27
 80111b0:	bf5e      	ittt	pl
 80111b2:	682b      	ldrpl	r3, [r5, #0]
 80111b4:	781b      	ldrbpl	r3, [r3, #0]
 80111b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80111ba:	682a      	ldr	r2, [r5, #0]
 80111bc:	686b      	ldr	r3, [r5, #4]
 80111be:	3201      	adds	r2, #1
 80111c0:	602a      	str	r2, [r5, #0]
 80111c2:	68a2      	ldr	r2, [r4, #8]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	3a01      	subs	r2, #1
 80111c8:	606b      	str	r3, [r5, #4]
 80111ca:	3701      	adds	r7, #1
 80111cc:	60a2      	str	r2, [r4, #8]
 80111ce:	b142      	cbz	r2, 80111e2 <_scanf_chars+0x8e>
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dcd7      	bgt.n	8011184 <_scanf_chars+0x30>
 80111d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80111d8:	4629      	mov	r1, r5
 80111da:	4640      	mov	r0, r8
 80111dc:	4798      	blx	r3
 80111de:	2800      	cmp	r0, #0
 80111e0:	d0d0      	beq.n	8011184 <_scanf_chars+0x30>
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	f013 0310 	ands.w	r3, r3, #16
 80111e8:	d105      	bne.n	80111f6 <_scanf_chars+0xa2>
 80111ea:	68e2      	ldr	r2, [r4, #12]
 80111ec:	3201      	adds	r2, #1
 80111ee:	60e2      	str	r2, [r4, #12]
 80111f0:	69a2      	ldr	r2, [r4, #24]
 80111f2:	b102      	cbz	r2, 80111f6 <_scanf_chars+0xa2>
 80111f4:	7033      	strb	r3, [r6, #0]
 80111f6:	6923      	ldr	r3, [r4, #16]
 80111f8:	443b      	add	r3, r7
 80111fa:	6123      	str	r3, [r4, #16]
 80111fc:	2000      	movs	r0, #0
 80111fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011202:	bf00      	nop
 8011204:	08012011 	.word	0x08012011

08011208 <_scanf_i>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	4698      	mov	r8, r3
 801120e:	4b76      	ldr	r3, [pc, #472]	; (80113e8 <_scanf_i+0x1e0>)
 8011210:	460c      	mov	r4, r1
 8011212:	4682      	mov	sl, r0
 8011214:	4616      	mov	r6, r2
 8011216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801121a:	b087      	sub	sp, #28
 801121c:	ab03      	add	r3, sp, #12
 801121e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011222:	4b72      	ldr	r3, [pc, #456]	; (80113ec <_scanf_i+0x1e4>)
 8011224:	69a1      	ldr	r1, [r4, #24]
 8011226:	4a72      	ldr	r2, [pc, #456]	; (80113f0 <_scanf_i+0x1e8>)
 8011228:	2903      	cmp	r1, #3
 801122a:	bf18      	it	ne
 801122c:	461a      	movne	r2, r3
 801122e:	68a3      	ldr	r3, [r4, #8]
 8011230:	9201      	str	r2, [sp, #4]
 8011232:	1e5a      	subs	r2, r3, #1
 8011234:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011238:	bf88      	it	hi
 801123a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801123e:	4627      	mov	r7, r4
 8011240:	bf82      	ittt	hi
 8011242:	eb03 0905 	addhi.w	r9, r3, r5
 8011246:	f240 135d 	movwhi	r3, #349	; 0x15d
 801124a:	60a3      	strhi	r3, [r4, #8]
 801124c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011250:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011254:	bf98      	it	ls
 8011256:	f04f 0900 	movls.w	r9, #0
 801125a:	6023      	str	r3, [r4, #0]
 801125c:	463d      	mov	r5, r7
 801125e:	f04f 0b00 	mov.w	fp, #0
 8011262:	6831      	ldr	r1, [r6, #0]
 8011264:	ab03      	add	r3, sp, #12
 8011266:	7809      	ldrb	r1, [r1, #0]
 8011268:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801126c:	2202      	movs	r2, #2
 801126e:	f7ee ffcf 	bl	8000210 <memchr>
 8011272:	b328      	cbz	r0, 80112c0 <_scanf_i+0xb8>
 8011274:	f1bb 0f01 	cmp.w	fp, #1
 8011278:	d159      	bne.n	801132e <_scanf_i+0x126>
 801127a:	6862      	ldr	r2, [r4, #4]
 801127c:	b92a      	cbnz	r2, 801128a <_scanf_i+0x82>
 801127e:	6822      	ldr	r2, [r4, #0]
 8011280:	2308      	movs	r3, #8
 8011282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011286:	6063      	str	r3, [r4, #4]
 8011288:	6022      	str	r2, [r4, #0]
 801128a:	6822      	ldr	r2, [r4, #0]
 801128c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011290:	6022      	str	r2, [r4, #0]
 8011292:	68a2      	ldr	r2, [r4, #8]
 8011294:	1e51      	subs	r1, r2, #1
 8011296:	60a1      	str	r1, [r4, #8]
 8011298:	b192      	cbz	r2, 80112c0 <_scanf_i+0xb8>
 801129a:	6832      	ldr	r2, [r6, #0]
 801129c:	1c51      	adds	r1, r2, #1
 801129e:	6031      	str	r1, [r6, #0]
 80112a0:	7812      	ldrb	r2, [r2, #0]
 80112a2:	f805 2b01 	strb.w	r2, [r5], #1
 80112a6:	6872      	ldr	r2, [r6, #4]
 80112a8:	3a01      	subs	r2, #1
 80112aa:	2a00      	cmp	r2, #0
 80112ac:	6072      	str	r2, [r6, #4]
 80112ae:	dc07      	bgt.n	80112c0 <_scanf_i+0xb8>
 80112b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80112b4:	4631      	mov	r1, r6
 80112b6:	4650      	mov	r0, sl
 80112b8:	4790      	blx	r2
 80112ba:	2800      	cmp	r0, #0
 80112bc:	f040 8085 	bne.w	80113ca <_scanf_i+0x1c2>
 80112c0:	f10b 0b01 	add.w	fp, fp, #1
 80112c4:	f1bb 0f03 	cmp.w	fp, #3
 80112c8:	d1cb      	bne.n	8011262 <_scanf_i+0x5a>
 80112ca:	6863      	ldr	r3, [r4, #4]
 80112cc:	b90b      	cbnz	r3, 80112d2 <_scanf_i+0xca>
 80112ce:	230a      	movs	r3, #10
 80112d0:	6063      	str	r3, [r4, #4]
 80112d2:	6863      	ldr	r3, [r4, #4]
 80112d4:	4947      	ldr	r1, [pc, #284]	; (80113f4 <_scanf_i+0x1ec>)
 80112d6:	6960      	ldr	r0, [r4, #20]
 80112d8:	1ac9      	subs	r1, r1, r3
 80112da:	f000 f8a9 	bl	8011430 <__sccl>
 80112de:	f04f 0b00 	mov.w	fp, #0
 80112e2:	68a3      	ldr	r3, [r4, #8]
 80112e4:	6822      	ldr	r2, [r4, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d03d      	beq.n	8011366 <_scanf_i+0x15e>
 80112ea:	6831      	ldr	r1, [r6, #0]
 80112ec:	6960      	ldr	r0, [r4, #20]
 80112ee:	f891 c000 	ldrb.w	ip, [r1]
 80112f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d035      	beq.n	8011366 <_scanf_i+0x15e>
 80112fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80112fe:	d124      	bne.n	801134a <_scanf_i+0x142>
 8011300:	0510      	lsls	r0, r2, #20
 8011302:	d522      	bpl.n	801134a <_scanf_i+0x142>
 8011304:	f10b 0b01 	add.w	fp, fp, #1
 8011308:	f1b9 0f00 	cmp.w	r9, #0
 801130c:	d003      	beq.n	8011316 <_scanf_i+0x10e>
 801130e:	3301      	adds	r3, #1
 8011310:	f109 39ff 	add.w	r9, r9, #4294967295
 8011314:	60a3      	str	r3, [r4, #8]
 8011316:	6873      	ldr	r3, [r6, #4]
 8011318:	3b01      	subs	r3, #1
 801131a:	2b00      	cmp	r3, #0
 801131c:	6073      	str	r3, [r6, #4]
 801131e:	dd1b      	ble.n	8011358 <_scanf_i+0x150>
 8011320:	6833      	ldr	r3, [r6, #0]
 8011322:	3301      	adds	r3, #1
 8011324:	6033      	str	r3, [r6, #0]
 8011326:	68a3      	ldr	r3, [r4, #8]
 8011328:	3b01      	subs	r3, #1
 801132a:	60a3      	str	r3, [r4, #8]
 801132c:	e7d9      	b.n	80112e2 <_scanf_i+0xda>
 801132e:	f1bb 0f02 	cmp.w	fp, #2
 8011332:	d1ae      	bne.n	8011292 <_scanf_i+0x8a>
 8011334:	6822      	ldr	r2, [r4, #0]
 8011336:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801133a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801133e:	d1bf      	bne.n	80112c0 <_scanf_i+0xb8>
 8011340:	2310      	movs	r3, #16
 8011342:	6063      	str	r3, [r4, #4]
 8011344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011348:	e7a2      	b.n	8011290 <_scanf_i+0x88>
 801134a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801134e:	6022      	str	r2, [r4, #0]
 8011350:	780b      	ldrb	r3, [r1, #0]
 8011352:	f805 3b01 	strb.w	r3, [r5], #1
 8011356:	e7de      	b.n	8011316 <_scanf_i+0x10e>
 8011358:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801135c:	4631      	mov	r1, r6
 801135e:	4650      	mov	r0, sl
 8011360:	4798      	blx	r3
 8011362:	2800      	cmp	r0, #0
 8011364:	d0df      	beq.n	8011326 <_scanf_i+0x11e>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	05db      	lsls	r3, r3, #23
 801136a:	d50d      	bpl.n	8011388 <_scanf_i+0x180>
 801136c:	42bd      	cmp	r5, r7
 801136e:	d909      	bls.n	8011384 <_scanf_i+0x17c>
 8011370:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011378:	4632      	mov	r2, r6
 801137a:	4650      	mov	r0, sl
 801137c:	4798      	blx	r3
 801137e:	f105 39ff 	add.w	r9, r5, #4294967295
 8011382:	464d      	mov	r5, r9
 8011384:	42bd      	cmp	r5, r7
 8011386:	d02d      	beq.n	80113e4 <_scanf_i+0x1dc>
 8011388:	6822      	ldr	r2, [r4, #0]
 801138a:	f012 0210 	ands.w	r2, r2, #16
 801138e:	d113      	bne.n	80113b8 <_scanf_i+0x1b0>
 8011390:	702a      	strb	r2, [r5, #0]
 8011392:	6863      	ldr	r3, [r4, #4]
 8011394:	9e01      	ldr	r6, [sp, #4]
 8011396:	4639      	mov	r1, r7
 8011398:	4650      	mov	r0, sl
 801139a:	47b0      	blx	r6
 801139c:	6821      	ldr	r1, [r4, #0]
 801139e:	f8d8 3000 	ldr.w	r3, [r8]
 80113a2:	f011 0f20 	tst.w	r1, #32
 80113a6:	d013      	beq.n	80113d0 <_scanf_i+0x1c8>
 80113a8:	1d1a      	adds	r2, r3, #4
 80113aa:	f8c8 2000 	str.w	r2, [r8]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6018      	str	r0, [r3, #0]
 80113b2:	68e3      	ldr	r3, [r4, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	60e3      	str	r3, [r4, #12]
 80113b8:	1bed      	subs	r5, r5, r7
 80113ba:	44ab      	add	fp, r5
 80113bc:	6925      	ldr	r5, [r4, #16]
 80113be:	445d      	add	r5, fp
 80113c0:	6125      	str	r5, [r4, #16]
 80113c2:	2000      	movs	r0, #0
 80113c4:	b007      	add	sp, #28
 80113c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ca:	f04f 0b00 	mov.w	fp, #0
 80113ce:	e7ca      	b.n	8011366 <_scanf_i+0x15e>
 80113d0:	1d1a      	adds	r2, r3, #4
 80113d2:	f8c8 2000 	str.w	r2, [r8]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f011 0f01 	tst.w	r1, #1
 80113dc:	bf14      	ite	ne
 80113de:	8018      	strhne	r0, [r3, #0]
 80113e0:	6018      	streq	r0, [r3, #0]
 80113e2:	e7e6      	b.n	80113b2 <_scanf_i+0x1aa>
 80113e4:	2001      	movs	r0, #1
 80113e6:	e7ed      	b.n	80113c4 <_scanf_i+0x1bc>
 80113e8:	08011ef4 	.word	0x08011ef4
 80113ec:	0801168d 	.word	0x0801168d
 80113f0:	080115a5 	.word	0x080115a5
 80113f4:	08012420 	.word	0x08012420

080113f8 <_read_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4d07      	ldr	r5, [pc, #28]	; (8011418 <_read_r+0x20>)
 80113fc:	4604      	mov	r4, r0
 80113fe:	4608      	mov	r0, r1
 8011400:	4611      	mov	r1, r2
 8011402:	2200      	movs	r2, #0
 8011404:	602a      	str	r2, [r5, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	f7f3 ff70 	bl	80052ec <_read>
 801140c:	1c43      	adds	r3, r0, #1
 801140e:	d102      	bne.n	8011416 <_read_r+0x1e>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	b103      	cbz	r3, 8011416 <_read_r+0x1e>
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	bd38      	pop	{r3, r4, r5, pc}
 8011418:	20002ce4 	.word	0x20002ce4
 801141c:	00000000 	.word	0x00000000

08011420 <nan>:
 8011420:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011428 <nan+0x8>
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	00000000 	.word	0x00000000
 801142c:	7ff80000 	.word	0x7ff80000

08011430 <__sccl>:
 8011430:	b570      	push	{r4, r5, r6, lr}
 8011432:	780b      	ldrb	r3, [r1, #0]
 8011434:	4604      	mov	r4, r0
 8011436:	2b5e      	cmp	r3, #94	; 0x5e
 8011438:	bf0b      	itete	eq
 801143a:	784b      	ldrbeq	r3, [r1, #1]
 801143c:	1c48      	addne	r0, r1, #1
 801143e:	1c88      	addeq	r0, r1, #2
 8011440:	2200      	movne	r2, #0
 8011442:	bf08      	it	eq
 8011444:	2201      	moveq	r2, #1
 8011446:	1e61      	subs	r1, r4, #1
 8011448:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801144c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011450:	42a9      	cmp	r1, r5
 8011452:	d1fb      	bne.n	801144c <__sccl+0x1c>
 8011454:	b90b      	cbnz	r3, 801145a <__sccl+0x2a>
 8011456:	3801      	subs	r0, #1
 8011458:	bd70      	pop	{r4, r5, r6, pc}
 801145a:	f082 0201 	eor.w	r2, r2, #1
 801145e:	54e2      	strb	r2, [r4, r3]
 8011460:	4605      	mov	r5, r0
 8011462:	4628      	mov	r0, r5
 8011464:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011468:	292d      	cmp	r1, #45	; 0x2d
 801146a:	d006      	beq.n	801147a <__sccl+0x4a>
 801146c:	295d      	cmp	r1, #93	; 0x5d
 801146e:	d0f3      	beq.n	8011458 <__sccl+0x28>
 8011470:	b909      	cbnz	r1, 8011476 <__sccl+0x46>
 8011472:	4628      	mov	r0, r5
 8011474:	e7f0      	b.n	8011458 <__sccl+0x28>
 8011476:	460b      	mov	r3, r1
 8011478:	e7f1      	b.n	801145e <__sccl+0x2e>
 801147a:	786e      	ldrb	r6, [r5, #1]
 801147c:	2e5d      	cmp	r6, #93	; 0x5d
 801147e:	d0fa      	beq.n	8011476 <__sccl+0x46>
 8011480:	42b3      	cmp	r3, r6
 8011482:	dcf8      	bgt.n	8011476 <__sccl+0x46>
 8011484:	3502      	adds	r5, #2
 8011486:	4619      	mov	r1, r3
 8011488:	3101      	adds	r1, #1
 801148a:	428e      	cmp	r6, r1
 801148c:	5462      	strb	r2, [r4, r1]
 801148e:	dcfb      	bgt.n	8011488 <__sccl+0x58>
 8011490:	1af1      	subs	r1, r6, r3
 8011492:	3901      	subs	r1, #1
 8011494:	1c58      	adds	r0, r3, #1
 8011496:	42b3      	cmp	r3, r6
 8011498:	bfa8      	it	ge
 801149a:	2100      	movge	r1, #0
 801149c:	1843      	adds	r3, r0, r1
 801149e:	e7e0      	b.n	8011462 <__sccl+0x32>

080114a0 <_strtol_l.constprop.0>:
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a6:	d001      	beq.n	80114ac <_strtol_l.constprop.0+0xc>
 80114a8:	2b24      	cmp	r3, #36	; 0x24
 80114aa:	d906      	bls.n	80114ba <_strtol_l.constprop.0+0x1a>
 80114ac:	f7fc fe7e 	bl	800e1ac <__errno>
 80114b0:	2316      	movs	r3, #22
 80114b2:	6003      	str	r3, [r0, #0]
 80114b4:	2000      	movs	r0, #0
 80114b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80115a0 <_strtol_l.constprop.0+0x100>
 80114be:	460d      	mov	r5, r1
 80114c0:	462e      	mov	r6, r5
 80114c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80114ca:	f017 0708 	ands.w	r7, r7, #8
 80114ce:	d1f7      	bne.n	80114c0 <_strtol_l.constprop.0+0x20>
 80114d0:	2c2d      	cmp	r4, #45	; 0x2d
 80114d2:	d132      	bne.n	801153a <_strtol_l.constprop.0+0x9a>
 80114d4:	782c      	ldrb	r4, [r5, #0]
 80114d6:	2701      	movs	r7, #1
 80114d8:	1cb5      	adds	r5, r6, #2
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d05b      	beq.n	8011596 <_strtol_l.constprop.0+0xf6>
 80114de:	2b10      	cmp	r3, #16
 80114e0:	d109      	bne.n	80114f6 <_strtol_l.constprop.0+0x56>
 80114e2:	2c30      	cmp	r4, #48	; 0x30
 80114e4:	d107      	bne.n	80114f6 <_strtol_l.constprop.0+0x56>
 80114e6:	782c      	ldrb	r4, [r5, #0]
 80114e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80114ec:	2c58      	cmp	r4, #88	; 0x58
 80114ee:	d14d      	bne.n	801158c <_strtol_l.constprop.0+0xec>
 80114f0:	786c      	ldrb	r4, [r5, #1]
 80114f2:	2310      	movs	r3, #16
 80114f4:	3502      	adds	r5, #2
 80114f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80114fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80114fe:	f04f 0c00 	mov.w	ip, #0
 8011502:	fbb8 f9f3 	udiv	r9, r8, r3
 8011506:	4666      	mov	r6, ip
 8011508:	fb03 8a19 	mls	sl, r3, r9, r8
 801150c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011510:	f1be 0f09 	cmp.w	lr, #9
 8011514:	d816      	bhi.n	8011544 <_strtol_l.constprop.0+0xa4>
 8011516:	4674      	mov	r4, lr
 8011518:	42a3      	cmp	r3, r4
 801151a:	dd24      	ble.n	8011566 <_strtol_l.constprop.0+0xc6>
 801151c:	f1bc 0f00 	cmp.w	ip, #0
 8011520:	db1e      	blt.n	8011560 <_strtol_l.constprop.0+0xc0>
 8011522:	45b1      	cmp	r9, r6
 8011524:	d31c      	bcc.n	8011560 <_strtol_l.constprop.0+0xc0>
 8011526:	d101      	bne.n	801152c <_strtol_l.constprop.0+0x8c>
 8011528:	45a2      	cmp	sl, r4
 801152a:	db19      	blt.n	8011560 <_strtol_l.constprop.0+0xc0>
 801152c:	fb06 4603 	mla	r6, r6, r3, r4
 8011530:	f04f 0c01 	mov.w	ip, #1
 8011534:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011538:	e7e8      	b.n	801150c <_strtol_l.constprop.0+0x6c>
 801153a:	2c2b      	cmp	r4, #43	; 0x2b
 801153c:	bf04      	itt	eq
 801153e:	782c      	ldrbeq	r4, [r5, #0]
 8011540:	1cb5      	addeq	r5, r6, #2
 8011542:	e7ca      	b.n	80114da <_strtol_l.constprop.0+0x3a>
 8011544:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011548:	f1be 0f19 	cmp.w	lr, #25
 801154c:	d801      	bhi.n	8011552 <_strtol_l.constprop.0+0xb2>
 801154e:	3c37      	subs	r4, #55	; 0x37
 8011550:	e7e2      	b.n	8011518 <_strtol_l.constprop.0+0x78>
 8011552:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011556:	f1be 0f19 	cmp.w	lr, #25
 801155a:	d804      	bhi.n	8011566 <_strtol_l.constprop.0+0xc6>
 801155c:	3c57      	subs	r4, #87	; 0x57
 801155e:	e7db      	b.n	8011518 <_strtol_l.constprop.0+0x78>
 8011560:	f04f 3cff 	mov.w	ip, #4294967295
 8011564:	e7e6      	b.n	8011534 <_strtol_l.constprop.0+0x94>
 8011566:	f1bc 0f00 	cmp.w	ip, #0
 801156a:	da05      	bge.n	8011578 <_strtol_l.constprop.0+0xd8>
 801156c:	2322      	movs	r3, #34	; 0x22
 801156e:	6003      	str	r3, [r0, #0]
 8011570:	4646      	mov	r6, r8
 8011572:	b942      	cbnz	r2, 8011586 <_strtol_l.constprop.0+0xe6>
 8011574:	4630      	mov	r0, r6
 8011576:	e79e      	b.n	80114b6 <_strtol_l.constprop.0+0x16>
 8011578:	b107      	cbz	r7, 801157c <_strtol_l.constprop.0+0xdc>
 801157a:	4276      	negs	r6, r6
 801157c:	2a00      	cmp	r2, #0
 801157e:	d0f9      	beq.n	8011574 <_strtol_l.constprop.0+0xd4>
 8011580:	f1bc 0f00 	cmp.w	ip, #0
 8011584:	d000      	beq.n	8011588 <_strtol_l.constprop.0+0xe8>
 8011586:	1e69      	subs	r1, r5, #1
 8011588:	6011      	str	r1, [r2, #0]
 801158a:	e7f3      	b.n	8011574 <_strtol_l.constprop.0+0xd4>
 801158c:	2430      	movs	r4, #48	; 0x30
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1b1      	bne.n	80114f6 <_strtol_l.constprop.0+0x56>
 8011592:	2308      	movs	r3, #8
 8011594:	e7af      	b.n	80114f6 <_strtol_l.constprop.0+0x56>
 8011596:	2c30      	cmp	r4, #48	; 0x30
 8011598:	d0a5      	beq.n	80114e6 <_strtol_l.constprop.0+0x46>
 801159a:	230a      	movs	r3, #10
 801159c:	e7ab      	b.n	80114f6 <_strtol_l.constprop.0+0x56>
 801159e:	bf00      	nop
 80115a0:	08012011 	.word	0x08012011

080115a4 <_strtol_r>:
 80115a4:	f7ff bf7c 	b.w	80114a0 <_strtol_l.constprop.0>

080115a8 <_strtoul_l.constprop.0>:
 80115a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115ac:	4f36      	ldr	r7, [pc, #216]	; (8011688 <_strtoul_l.constprop.0+0xe0>)
 80115ae:	4686      	mov	lr, r0
 80115b0:	460d      	mov	r5, r1
 80115b2:	4628      	mov	r0, r5
 80115b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115b8:	5de6      	ldrb	r6, [r4, r7]
 80115ba:	f016 0608 	ands.w	r6, r6, #8
 80115be:	d1f8      	bne.n	80115b2 <_strtoul_l.constprop.0+0xa>
 80115c0:	2c2d      	cmp	r4, #45	; 0x2d
 80115c2:	d12f      	bne.n	8011624 <_strtoul_l.constprop.0+0x7c>
 80115c4:	782c      	ldrb	r4, [r5, #0]
 80115c6:	2601      	movs	r6, #1
 80115c8:	1c85      	adds	r5, r0, #2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d057      	beq.n	801167e <_strtoul_l.constprop.0+0xd6>
 80115ce:	2b10      	cmp	r3, #16
 80115d0:	d109      	bne.n	80115e6 <_strtoul_l.constprop.0+0x3e>
 80115d2:	2c30      	cmp	r4, #48	; 0x30
 80115d4:	d107      	bne.n	80115e6 <_strtoul_l.constprop.0+0x3e>
 80115d6:	7828      	ldrb	r0, [r5, #0]
 80115d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80115dc:	2858      	cmp	r0, #88	; 0x58
 80115de:	d149      	bne.n	8011674 <_strtoul_l.constprop.0+0xcc>
 80115e0:	786c      	ldrb	r4, [r5, #1]
 80115e2:	2310      	movs	r3, #16
 80115e4:	3502      	adds	r5, #2
 80115e6:	f04f 38ff 	mov.w	r8, #4294967295
 80115ea:	2700      	movs	r7, #0
 80115ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80115f0:	fb03 f908 	mul.w	r9, r3, r8
 80115f4:	ea6f 0909 	mvn.w	r9, r9
 80115f8:	4638      	mov	r0, r7
 80115fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80115fe:	f1bc 0f09 	cmp.w	ip, #9
 8011602:	d814      	bhi.n	801162e <_strtoul_l.constprop.0+0x86>
 8011604:	4664      	mov	r4, ip
 8011606:	42a3      	cmp	r3, r4
 8011608:	dd22      	ble.n	8011650 <_strtoul_l.constprop.0+0xa8>
 801160a:	2f00      	cmp	r7, #0
 801160c:	db1d      	blt.n	801164a <_strtoul_l.constprop.0+0xa2>
 801160e:	4580      	cmp	r8, r0
 8011610:	d31b      	bcc.n	801164a <_strtoul_l.constprop.0+0xa2>
 8011612:	d101      	bne.n	8011618 <_strtoul_l.constprop.0+0x70>
 8011614:	45a1      	cmp	r9, r4
 8011616:	db18      	blt.n	801164a <_strtoul_l.constprop.0+0xa2>
 8011618:	fb00 4003 	mla	r0, r0, r3, r4
 801161c:	2701      	movs	r7, #1
 801161e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011622:	e7ea      	b.n	80115fa <_strtoul_l.constprop.0+0x52>
 8011624:	2c2b      	cmp	r4, #43	; 0x2b
 8011626:	bf04      	itt	eq
 8011628:	782c      	ldrbeq	r4, [r5, #0]
 801162a:	1c85      	addeq	r5, r0, #2
 801162c:	e7cd      	b.n	80115ca <_strtoul_l.constprop.0+0x22>
 801162e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011632:	f1bc 0f19 	cmp.w	ip, #25
 8011636:	d801      	bhi.n	801163c <_strtoul_l.constprop.0+0x94>
 8011638:	3c37      	subs	r4, #55	; 0x37
 801163a:	e7e4      	b.n	8011606 <_strtoul_l.constprop.0+0x5e>
 801163c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011640:	f1bc 0f19 	cmp.w	ip, #25
 8011644:	d804      	bhi.n	8011650 <_strtoul_l.constprop.0+0xa8>
 8011646:	3c57      	subs	r4, #87	; 0x57
 8011648:	e7dd      	b.n	8011606 <_strtoul_l.constprop.0+0x5e>
 801164a:	f04f 37ff 	mov.w	r7, #4294967295
 801164e:	e7e6      	b.n	801161e <_strtoul_l.constprop.0+0x76>
 8011650:	2f00      	cmp	r7, #0
 8011652:	da07      	bge.n	8011664 <_strtoul_l.constprop.0+0xbc>
 8011654:	2322      	movs	r3, #34	; 0x22
 8011656:	f8ce 3000 	str.w	r3, [lr]
 801165a:	f04f 30ff 	mov.w	r0, #4294967295
 801165e:	b932      	cbnz	r2, 801166e <_strtoul_l.constprop.0+0xc6>
 8011660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011664:	b106      	cbz	r6, 8011668 <_strtoul_l.constprop.0+0xc0>
 8011666:	4240      	negs	r0, r0
 8011668:	2a00      	cmp	r2, #0
 801166a:	d0f9      	beq.n	8011660 <_strtoul_l.constprop.0+0xb8>
 801166c:	b107      	cbz	r7, 8011670 <_strtoul_l.constprop.0+0xc8>
 801166e:	1e69      	subs	r1, r5, #1
 8011670:	6011      	str	r1, [r2, #0]
 8011672:	e7f5      	b.n	8011660 <_strtoul_l.constprop.0+0xb8>
 8011674:	2430      	movs	r4, #48	; 0x30
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1b5      	bne.n	80115e6 <_strtoul_l.constprop.0+0x3e>
 801167a:	2308      	movs	r3, #8
 801167c:	e7b3      	b.n	80115e6 <_strtoul_l.constprop.0+0x3e>
 801167e:	2c30      	cmp	r4, #48	; 0x30
 8011680:	d0a9      	beq.n	80115d6 <_strtoul_l.constprop.0+0x2e>
 8011682:	230a      	movs	r3, #10
 8011684:	e7af      	b.n	80115e6 <_strtoul_l.constprop.0+0x3e>
 8011686:	bf00      	nop
 8011688:	08012011 	.word	0x08012011

0801168c <_strtoul_r>:
 801168c:	f7ff bf8c 	b.w	80115a8 <_strtoul_l.constprop.0>

08011690 <__submore>:
 8011690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011694:	460c      	mov	r4, r1
 8011696:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801169c:	4299      	cmp	r1, r3
 801169e:	d11d      	bne.n	80116dc <__submore+0x4c>
 80116a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80116a4:	f7fc ff38 	bl	800e518 <_malloc_r>
 80116a8:	b918      	cbnz	r0, 80116b2 <__submore+0x22>
 80116aa:	f04f 30ff 	mov.w	r0, #4294967295
 80116ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80116b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80116bc:	6360      	str	r0, [r4, #52]	; 0x34
 80116be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80116c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80116c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80116ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80116ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80116d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80116d6:	6020      	str	r0, [r4, #0]
 80116d8:	2000      	movs	r0, #0
 80116da:	e7e8      	b.n	80116ae <__submore+0x1e>
 80116dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80116de:	0077      	lsls	r7, r6, #1
 80116e0:	463a      	mov	r2, r7
 80116e2:	f7ff f846 	bl	8010772 <_realloc_r>
 80116e6:	4605      	mov	r5, r0
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d0de      	beq.n	80116aa <__submore+0x1a>
 80116ec:	eb00 0806 	add.w	r8, r0, r6
 80116f0:	4601      	mov	r1, r0
 80116f2:	4632      	mov	r2, r6
 80116f4:	4640      	mov	r0, r8
 80116f6:	f7fc fe8d 	bl	800e414 <memcpy>
 80116fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80116fe:	f8c4 8000 	str.w	r8, [r4]
 8011702:	e7e9      	b.n	80116d8 <__submore+0x48>

08011704 <__ascii_wctomb>:
 8011704:	b149      	cbz	r1, 801171a <__ascii_wctomb+0x16>
 8011706:	2aff      	cmp	r2, #255	; 0xff
 8011708:	bf85      	ittet	hi
 801170a:	238a      	movhi	r3, #138	; 0x8a
 801170c:	6003      	strhi	r3, [r0, #0]
 801170e:	700a      	strbls	r2, [r1, #0]
 8011710:	f04f 30ff 	movhi.w	r0, #4294967295
 8011714:	bf98      	it	ls
 8011716:	2001      	movls	r0, #1
 8011718:	4770      	bx	lr
 801171a:	4608      	mov	r0, r1
 801171c:	4770      	bx	lr
	...

08011720 <__assert_func>:
 8011720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011722:	4614      	mov	r4, r2
 8011724:	461a      	mov	r2, r3
 8011726:	4b09      	ldr	r3, [pc, #36]	; (801174c <__assert_func+0x2c>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	4605      	mov	r5, r0
 801172c:	68d8      	ldr	r0, [r3, #12]
 801172e:	b14c      	cbz	r4, 8011744 <__assert_func+0x24>
 8011730:	4b07      	ldr	r3, [pc, #28]	; (8011750 <__assert_func+0x30>)
 8011732:	9100      	str	r1, [sp, #0]
 8011734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011738:	4906      	ldr	r1, [pc, #24]	; (8011754 <__assert_func+0x34>)
 801173a:	462b      	mov	r3, r5
 801173c:	f000 f80e 	bl	801175c <fiprintf>
 8011740:	f000 fa5a 	bl	8011bf8 <abort>
 8011744:	4b04      	ldr	r3, [pc, #16]	; (8011758 <__assert_func+0x38>)
 8011746:	461c      	mov	r4, r3
 8011748:	e7f3      	b.n	8011732 <__assert_func+0x12>
 801174a:	bf00      	nop
 801174c:	20000184 	.word	0x20000184
 8011750:	08012422 	.word	0x08012422
 8011754:	0801242f 	.word	0x0801242f
 8011758:	0801245d 	.word	0x0801245d

0801175c <fiprintf>:
 801175c:	b40e      	push	{r1, r2, r3}
 801175e:	b503      	push	{r0, r1, lr}
 8011760:	4601      	mov	r1, r0
 8011762:	ab03      	add	r3, sp, #12
 8011764:	4805      	ldr	r0, [pc, #20]	; (801177c <fiprintf+0x20>)
 8011766:	f853 2b04 	ldr.w	r2, [r3], #4
 801176a:	6800      	ldr	r0, [r0, #0]
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	f000 f853 	bl	8011818 <_vfiprintf_r>
 8011772:	b002      	add	sp, #8
 8011774:	f85d eb04 	ldr.w	lr, [sp], #4
 8011778:	b003      	add	sp, #12
 801177a:	4770      	bx	lr
 801177c:	20000184 	.word	0x20000184

08011780 <memmove>:
 8011780:	4288      	cmp	r0, r1
 8011782:	b510      	push	{r4, lr}
 8011784:	eb01 0402 	add.w	r4, r1, r2
 8011788:	d902      	bls.n	8011790 <memmove+0x10>
 801178a:	4284      	cmp	r4, r0
 801178c:	4623      	mov	r3, r4
 801178e:	d807      	bhi.n	80117a0 <memmove+0x20>
 8011790:	1e43      	subs	r3, r0, #1
 8011792:	42a1      	cmp	r1, r4
 8011794:	d008      	beq.n	80117a8 <memmove+0x28>
 8011796:	f811 2b01 	ldrb.w	r2, [r1], #1
 801179a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801179e:	e7f8      	b.n	8011792 <memmove+0x12>
 80117a0:	4402      	add	r2, r0
 80117a2:	4601      	mov	r1, r0
 80117a4:	428a      	cmp	r2, r1
 80117a6:	d100      	bne.n	80117aa <memmove+0x2a>
 80117a8:	bd10      	pop	{r4, pc}
 80117aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117b2:	e7f7      	b.n	80117a4 <memmove+0x24>

080117b4 <_malloc_usable_size_r>:
 80117b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117b8:	1f18      	subs	r0, r3, #4
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	bfbc      	itt	lt
 80117be:	580b      	ldrlt	r3, [r1, r0]
 80117c0:	18c0      	addlt	r0, r0, r3
 80117c2:	4770      	bx	lr

080117c4 <__sfputc_r>:
 80117c4:	6893      	ldr	r3, [r2, #8]
 80117c6:	3b01      	subs	r3, #1
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	b410      	push	{r4}
 80117cc:	6093      	str	r3, [r2, #8]
 80117ce:	da08      	bge.n	80117e2 <__sfputc_r+0x1e>
 80117d0:	6994      	ldr	r4, [r2, #24]
 80117d2:	42a3      	cmp	r3, r4
 80117d4:	db01      	blt.n	80117da <__sfputc_r+0x16>
 80117d6:	290a      	cmp	r1, #10
 80117d8:	d103      	bne.n	80117e2 <__sfputc_r+0x1e>
 80117da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117de:	f000 b94b 	b.w	8011a78 <__swbuf_r>
 80117e2:	6813      	ldr	r3, [r2, #0]
 80117e4:	1c58      	adds	r0, r3, #1
 80117e6:	6010      	str	r0, [r2, #0]
 80117e8:	7019      	strb	r1, [r3, #0]
 80117ea:	4608      	mov	r0, r1
 80117ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <__sfputs_r>:
 80117f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f4:	4606      	mov	r6, r0
 80117f6:	460f      	mov	r7, r1
 80117f8:	4614      	mov	r4, r2
 80117fa:	18d5      	adds	r5, r2, r3
 80117fc:	42ac      	cmp	r4, r5
 80117fe:	d101      	bne.n	8011804 <__sfputs_r+0x12>
 8011800:	2000      	movs	r0, #0
 8011802:	e007      	b.n	8011814 <__sfputs_r+0x22>
 8011804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011808:	463a      	mov	r2, r7
 801180a:	4630      	mov	r0, r6
 801180c:	f7ff ffda 	bl	80117c4 <__sfputc_r>
 8011810:	1c43      	adds	r3, r0, #1
 8011812:	d1f3      	bne.n	80117fc <__sfputs_r+0xa>
 8011814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011818 <_vfiprintf_r>:
 8011818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801181c:	460d      	mov	r5, r1
 801181e:	b09d      	sub	sp, #116	; 0x74
 8011820:	4614      	mov	r4, r2
 8011822:	4698      	mov	r8, r3
 8011824:	4606      	mov	r6, r0
 8011826:	b118      	cbz	r0, 8011830 <_vfiprintf_r+0x18>
 8011828:	6983      	ldr	r3, [r0, #24]
 801182a:	b90b      	cbnz	r3, 8011830 <_vfiprintf_r+0x18>
 801182c:	f7fc fd1c 	bl	800e268 <__sinit>
 8011830:	4b89      	ldr	r3, [pc, #548]	; (8011a58 <_vfiprintf_r+0x240>)
 8011832:	429d      	cmp	r5, r3
 8011834:	d11b      	bne.n	801186e <_vfiprintf_r+0x56>
 8011836:	6875      	ldr	r5, [r6, #4]
 8011838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801183a:	07d9      	lsls	r1, r3, #31
 801183c:	d405      	bmi.n	801184a <_vfiprintf_r+0x32>
 801183e:	89ab      	ldrh	r3, [r5, #12]
 8011840:	059a      	lsls	r2, r3, #22
 8011842:	d402      	bmi.n	801184a <_vfiprintf_r+0x32>
 8011844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011846:	f7fc fdd2 	bl	800e3ee <__retarget_lock_acquire_recursive>
 801184a:	89ab      	ldrh	r3, [r5, #12]
 801184c:	071b      	lsls	r3, r3, #28
 801184e:	d501      	bpl.n	8011854 <_vfiprintf_r+0x3c>
 8011850:	692b      	ldr	r3, [r5, #16]
 8011852:	b9eb      	cbnz	r3, 8011890 <_vfiprintf_r+0x78>
 8011854:	4629      	mov	r1, r5
 8011856:	4630      	mov	r0, r6
 8011858:	f000 f960 	bl	8011b1c <__swsetup_r>
 801185c:	b1c0      	cbz	r0, 8011890 <_vfiprintf_r+0x78>
 801185e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011860:	07dc      	lsls	r4, r3, #31
 8011862:	d50e      	bpl.n	8011882 <_vfiprintf_r+0x6a>
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	b01d      	add	sp, #116	; 0x74
 801186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186e:	4b7b      	ldr	r3, [pc, #492]	; (8011a5c <_vfiprintf_r+0x244>)
 8011870:	429d      	cmp	r5, r3
 8011872:	d101      	bne.n	8011878 <_vfiprintf_r+0x60>
 8011874:	68b5      	ldr	r5, [r6, #8]
 8011876:	e7df      	b.n	8011838 <_vfiprintf_r+0x20>
 8011878:	4b79      	ldr	r3, [pc, #484]	; (8011a60 <_vfiprintf_r+0x248>)
 801187a:	429d      	cmp	r5, r3
 801187c:	bf08      	it	eq
 801187e:	68f5      	ldreq	r5, [r6, #12]
 8011880:	e7da      	b.n	8011838 <_vfiprintf_r+0x20>
 8011882:	89ab      	ldrh	r3, [r5, #12]
 8011884:	0598      	lsls	r0, r3, #22
 8011886:	d4ed      	bmi.n	8011864 <_vfiprintf_r+0x4c>
 8011888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801188a:	f7fc fdb1 	bl	800e3f0 <__retarget_lock_release_recursive>
 801188e:	e7e9      	b.n	8011864 <_vfiprintf_r+0x4c>
 8011890:	2300      	movs	r3, #0
 8011892:	9309      	str	r3, [sp, #36]	; 0x24
 8011894:	2320      	movs	r3, #32
 8011896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801189a:	f8cd 800c 	str.w	r8, [sp, #12]
 801189e:	2330      	movs	r3, #48	; 0x30
 80118a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a64 <_vfiprintf_r+0x24c>
 80118a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118a8:	f04f 0901 	mov.w	r9, #1
 80118ac:	4623      	mov	r3, r4
 80118ae:	469a      	mov	sl, r3
 80118b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118b4:	b10a      	cbz	r2, 80118ba <_vfiprintf_r+0xa2>
 80118b6:	2a25      	cmp	r2, #37	; 0x25
 80118b8:	d1f9      	bne.n	80118ae <_vfiprintf_r+0x96>
 80118ba:	ebba 0b04 	subs.w	fp, sl, r4
 80118be:	d00b      	beq.n	80118d8 <_vfiprintf_r+0xc0>
 80118c0:	465b      	mov	r3, fp
 80118c2:	4622      	mov	r2, r4
 80118c4:	4629      	mov	r1, r5
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7ff ff93 	bl	80117f2 <__sfputs_r>
 80118cc:	3001      	adds	r0, #1
 80118ce:	f000 80aa 	beq.w	8011a26 <_vfiprintf_r+0x20e>
 80118d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118d4:	445a      	add	r2, fp
 80118d6:	9209      	str	r2, [sp, #36]	; 0x24
 80118d8:	f89a 3000 	ldrb.w	r3, [sl]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 80a2 	beq.w	8011a26 <_vfiprintf_r+0x20e>
 80118e2:	2300      	movs	r3, #0
 80118e4:	f04f 32ff 	mov.w	r2, #4294967295
 80118e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118ec:	f10a 0a01 	add.w	sl, sl, #1
 80118f0:	9304      	str	r3, [sp, #16]
 80118f2:	9307      	str	r3, [sp, #28]
 80118f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118f8:	931a      	str	r3, [sp, #104]	; 0x68
 80118fa:	4654      	mov	r4, sl
 80118fc:	2205      	movs	r2, #5
 80118fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011902:	4858      	ldr	r0, [pc, #352]	; (8011a64 <_vfiprintf_r+0x24c>)
 8011904:	f7ee fc84 	bl	8000210 <memchr>
 8011908:	9a04      	ldr	r2, [sp, #16]
 801190a:	b9d8      	cbnz	r0, 8011944 <_vfiprintf_r+0x12c>
 801190c:	06d1      	lsls	r1, r2, #27
 801190e:	bf44      	itt	mi
 8011910:	2320      	movmi	r3, #32
 8011912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011916:	0713      	lsls	r3, r2, #28
 8011918:	bf44      	itt	mi
 801191a:	232b      	movmi	r3, #43	; 0x2b
 801191c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011920:	f89a 3000 	ldrb.w	r3, [sl]
 8011924:	2b2a      	cmp	r3, #42	; 0x2a
 8011926:	d015      	beq.n	8011954 <_vfiprintf_r+0x13c>
 8011928:	9a07      	ldr	r2, [sp, #28]
 801192a:	4654      	mov	r4, sl
 801192c:	2000      	movs	r0, #0
 801192e:	f04f 0c0a 	mov.w	ip, #10
 8011932:	4621      	mov	r1, r4
 8011934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011938:	3b30      	subs	r3, #48	; 0x30
 801193a:	2b09      	cmp	r3, #9
 801193c:	d94e      	bls.n	80119dc <_vfiprintf_r+0x1c4>
 801193e:	b1b0      	cbz	r0, 801196e <_vfiprintf_r+0x156>
 8011940:	9207      	str	r2, [sp, #28]
 8011942:	e014      	b.n	801196e <_vfiprintf_r+0x156>
 8011944:	eba0 0308 	sub.w	r3, r0, r8
 8011948:	fa09 f303 	lsl.w	r3, r9, r3
 801194c:	4313      	orrs	r3, r2
 801194e:	9304      	str	r3, [sp, #16]
 8011950:	46a2      	mov	sl, r4
 8011952:	e7d2      	b.n	80118fa <_vfiprintf_r+0xe2>
 8011954:	9b03      	ldr	r3, [sp, #12]
 8011956:	1d19      	adds	r1, r3, #4
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	9103      	str	r1, [sp, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	bfbb      	ittet	lt
 8011960:	425b      	neglt	r3, r3
 8011962:	f042 0202 	orrlt.w	r2, r2, #2
 8011966:	9307      	strge	r3, [sp, #28]
 8011968:	9307      	strlt	r3, [sp, #28]
 801196a:	bfb8      	it	lt
 801196c:	9204      	strlt	r2, [sp, #16]
 801196e:	7823      	ldrb	r3, [r4, #0]
 8011970:	2b2e      	cmp	r3, #46	; 0x2e
 8011972:	d10c      	bne.n	801198e <_vfiprintf_r+0x176>
 8011974:	7863      	ldrb	r3, [r4, #1]
 8011976:	2b2a      	cmp	r3, #42	; 0x2a
 8011978:	d135      	bne.n	80119e6 <_vfiprintf_r+0x1ce>
 801197a:	9b03      	ldr	r3, [sp, #12]
 801197c:	1d1a      	adds	r2, r3, #4
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	9203      	str	r2, [sp, #12]
 8011982:	2b00      	cmp	r3, #0
 8011984:	bfb8      	it	lt
 8011986:	f04f 33ff 	movlt.w	r3, #4294967295
 801198a:	3402      	adds	r4, #2
 801198c:	9305      	str	r3, [sp, #20]
 801198e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a74 <_vfiprintf_r+0x25c>
 8011992:	7821      	ldrb	r1, [r4, #0]
 8011994:	2203      	movs	r2, #3
 8011996:	4650      	mov	r0, sl
 8011998:	f7ee fc3a 	bl	8000210 <memchr>
 801199c:	b140      	cbz	r0, 80119b0 <_vfiprintf_r+0x198>
 801199e:	2340      	movs	r3, #64	; 0x40
 80119a0:	eba0 000a 	sub.w	r0, r0, sl
 80119a4:	fa03 f000 	lsl.w	r0, r3, r0
 80119a8:	9b04      	ldr	r3, [sp, #16]
 80119aa:	4303      	orrs	r3, r0
 80119ac:	3401      	adds	r4, #1
 80119ae:	9304      	str	r3, [sp, #16]
 80119b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119b4:	482c      	ldr	r0, [pc, #176]	; (8011a68 <_vfiprintf_r+0x250>)
 80119b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119ba:	2206      	movs	r2, #6
 80119bc:	f7ee fc28 	bl	8000210 <memchr>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d03f      	beq.n	8011a44 <_vfiprintf_r+0x22c>
 80119c4:	4b29      	ldr	r3, [pc, #164]	; (8011a6c <_vfiprintf_r+0x254>)
 80119c6:	bb1b      	cbnz	r3, 8011a10 <_vfiprintf_r+0x1f8>
 80119c8:	9b03      	ldr	r3, [sp, #12]
 80119ca:	3307      	adds	r3, #7
 80119cc:	f023 0307 	bic.w	r3, r3, #7
 80119d0:	3308      	adds	r3, #8
 80119d2:	9303      	str	r3, [sp, #12]
 80119d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d6:	443b      	add	r3, r7
 80119d8:	9309      	str	r3, [sp, #36]	; 0x24
 80119da:	e767      	b.n	80118ac <_vfiprintf_r+0x94>
 80119dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80119e0:	460c      	mov	r4, r1
 80119e2:	2001      	movs	r0, #1
 80119e4:	e7a5      	b.n	8011932 <_vfiprintf_r+0x11a>
 80119e6:	2300      	movs	r3, #0
 80119e8:	3401      	adds	r4, #1
 80119ea:	9305      	str	r3, [sp, #20]
 80119ec:	4619      	mov	r1, r3
 80119ee:	f04f 0c0a 	mov.w	ip, #10
 80119f2:	4620      	mov	r0, r4
 80119f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119f8:	3a30      	subs	r2, #48	; 0x30
 80119fa:	2a09      	cmp	r2, #9
 80119fc:	d903      	bls.n	8011a06 <_vfiprintf_r+0x1ee>
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d0c5      	beq.n	801198e <_vfiprintf_r+0x176>
 8011a02:	9105      	str	r1, [sp, #20]
 8011a04:	e7c3      	b.n	801198e <_vfiprintf_r+0x176>
 8011a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e7f0      	b.n	80119f2 <_vfiprintf_r+0x1da>
 8011a10:	ab03      	add	r3, sp, #12
 8011a12:	9300      	str	r3, [sp, #0]
 8011a14:	462a      	mov	r2, r5
 8011a16:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <_vfiprintf_r+0x258>)
 8011a18:	a904      	add	r1, sp, #16
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f3af 8000 	nop.w
 8011a20:	4607      	mov	r7, r0
 8011a22:	1c78      	adds	r0, r7, #1
 8011a24:	d1d6      	bne.n	80119d4 <_vfiprintf_r+0x1bc>
 8011a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a28:	07d9      	lsls	r1, r3, #31
 8011a2a:	d405      	bmi.n	8011a38 <_vfiprintf_r+0x220>
 8011a2c:	89ab      	ldrh	r3, [r5, #12]
 8011a2e:	059a      	lsls	r2, r3, #22
 8011a30:	d402      	bmi.n	8011a38 <_vfiprintf_r+0x220>
 8011a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a34:	f7fc fcdc 	bl	800e3f0 <__retarget_lock_release_recursive>
 8011a38:	89ab      	ldrh	r3, [r5, #12]
 8011a3a:	065b      	lsls	r3, r3, #25
 8011a3c:	f53f af12 	bmi.w	8011864 <_vfiprintf_r+0x4c>
 8011a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a42:	e711      	b.n	8011868 <_vfiprintf_r+0x50>
 8011a44:	ab03      	add	r3, sp, #12
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	462a      	mov	r2, r5
 8011a4a:	4b09      	ldr	r3, [pc, #36]	; (8011a70 <_vfiprintf_r+0x258>)
 8011a4c:	a904      	add	r1, sp, #16
 8011a4e:	4630      	mov	r0, r6
 8011a50:	f7ff fa5a 	bl	8010f08 <_printf_i>
 8011a54:	e7e4      	b.n	8011a20 <_vfiprintf_r+0x208>
 8011a56:	bf00      	nop
 8011a58:	08012134 	.word	0x08012134
 8011a5c:	08012154 	.word	0x08012154
 8011a60:	08012114 	.word	0x08012114
 8011a64:	080123d4 	.word	0x080123d4
 8011a68:	080123de 	.word	0x080123de
 8011a6c:	00000000 	.word	0x00000000
 8011a70:	080117f3 	.word	0x080117f3
 8011a74:	080123da 	.word	0x080123da

08011a78 <__swbuf_r>:
 8011a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a7a:	460e      	mov	r6, r1
 8011a7c:	4614      	mov	r4, r2
 8011a7e:	4605      	mov	r5, r0
 8011a80:	b118      	cbz	r0, 8011a8a <__swbuf_r+0x12>
 8011a82:	6983      	ldr	r3, [r0, #24]
 8011a84:	b90b      	cbnz	r3, 8011a8a <__swbuf_r+0x12>
 8011a86:	f7fc fbef 	bl	800e268 <__sinit>
 8011a8a:	4b21      	ldr	r3, [pc, #132]	; (8011b10 <__swbuf_r+0x98>)
 8011a8c:	429c      	cmp	r4, r3
 8011a8e:	d12b      	bne.n	8011ae8 <__swbuf_r+0x70>
 8011a90:	686c      	ldr	r4, [r5, #4]
 8011a92:	69a3      	ldr	r3, [r4, #24]
 8011a94:	60a3      	str	r3, [r4, #8]
 8011a96:	89a3      	ldrh	r3, [r4, #12]
 8011a98:	071a      	lsls	r2, r3, #28
 8011a9a:	d52f      	bpl.n	8011afc <__swbuf_r+0x84>
 8011a9c:	6923      	ldr	r3, [r4, #16]
 8011a9e:	b36b      	cbz	r3, 8011afc <__swbuf_r+0x84>
 8011aa0:	6923      	ldr	r3, [r4, #16]
 8011aa2:	6820      	ldr	r0, [r4, #0]
 8011aa4:	1ac0      	subs	r0, r0, r3
 8011aa6:	6963      	ldr	r3, [r4, #20]
 8011aa8:	b2f6      	uxtb	r6, r6
 8011aaa:	4283      	cmp	r3, r0
 8011aac:	4637      	mov	r7, r6
 8011aae:	dc04      	bgt.n	8011aba <__swbuf_r+0x42>
 8011ab0:	4621      	mov	r1, r4
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	f7fd fdaa 	bl	800f60c <_fflush_r>
 8011ab8:	bb30      	cbnz	r0, 8011b08 <__swbuf_r+0x90>
 8011aba:	68a3      	ldr	r3, [r4, #8]
 8011abc:	3b01      	subs	r3, #1
 8011abe:	60a3      	str	r3, [r4, #8]
 8011ac0:	6823      	ldr	r3, [r4, #0]
 8011ac2:	1c5a      	adds	r2, r3, #1
 8011ac4:	6022      	str	r2, [r4, #0]
 8011ac6:	701e      	strb	r6, [r3, #0]
 8011ac8:	6963      	ldr	r3, [r4, #20]
 8011aca:	3001      	adds	r0, #1
 8011acc:	4283      	cmp	r3, r0
 8011ace:	d004      	beq.n	8011ada <__swbuf_r+0x62>
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	07db      	lsls	r3, r3, #31
 8011ad4:	d506      	bpl.n	8011ae4 <__swbuf_r+0x6c>
 8011ad6:	2e0a      	cmp	r6, #10
 8011ad8:	d104      	bne.n	8011ae4 <__swbuf_r+0x6c>
 8011ada:	4621      	mov	r1, r4
 8011adc:	4628      	mov	r0, r5
 8011ade:	f7fd fd95 	bl	800f60c <_fflush_r>
 8011ae2:	b988      	cbnz	r0, 8011b08 <__swbuf_r+0x90>
 8011ae4:	4638      	mov	r0, r7
 8011ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ae8:	4b0a      	ldr	r3, [pc, #40]	; (8011b14 <__swbuf_r+0x9c>)
 8011aea:	429c      	cmp	r4, r3
 8011aec:	d101      	bne.n	8011af2 <__swbuf_r+0x7a>
 8011aee:	68ac      	ldr	r4, [r5, #8]
 8011af0:	e7cf      	b.n	8011a92 <__swbuf_r+0x1a>
 8011af2:	4b09      	ldr	r3, [pc, #36]	; (8011b18 <__swbuf_r+0xa0>)
 8011af4:	429c      	cmp	r4, r3
 8011af6:	bf08      	it	eq
 8011af8:	68ec      	ldreq	r4, [r5, #12]
 8011afa:	e7ca      	b.n	8011a92 <__swbuf_r+0x1a>
 8011afc:	4621      	mov	r1, r4
 8011afe:	4628      	mov	r0, r5
 8011b00:	f000 f80c 	bl	8011b1c <__swsetup_r>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d0cb      	beq.n	8011aa0 <__swbuf_r+0x28>
 8011b08:	f04f 37ff 	mov.w	r7, #4294967295
 8011b0c:	e7ea      	b.n	8011ae4 <__swbuf_r+0x6c>
 8011b0e:	bf00      	nop
 8011b10:	08012134 	.word	0x08012134
 8011b14:	08012154 	.word	0x08012154
 8011b18:	08012114 	.word	0x08012114

08011b1c <__swsetup_r>:
 8011b1c:	4b32      	ldr	r3, [pc, #200]	; (8011be8 <__swsetup_r+0xcc>)
 8011b1e:	b570      	push	{r4, r5, r6, lr}
 8011b20:	681d      	ldr	r5, [r3, #0]
 8011b22:	4606      	mov	r6, r0
 8011b24:	460c      	mov	r4, r1
 8011b26:	b125      	cbz	r5, 8011b32 <__swsetup_r+0x16>
 8011b28:	69ab      	ldr	r3, [r5, #24]
 8011b2a:	b913      	cbnz	r3, 8011b32 <__swsetup_r+0x16>
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	f7fc fb9b 	bl	800e268 <__sinit>
 8011b32:	4b2e      	ldr	r3, [pc, #184]	; (8011bec <__swsetup_r+0xd0>)
 8011b34:	429c      	cmp	r4, r3
 8011b36:	d10f      	bne.n	8011b58 <__swsetup_r+0x3c>
 8011b38:	686c      	ldr	r4, [r5, #4]
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b40:	0719      	lsls	r1, r3, #28
 8011b42:	d42c      	bmi.n	8011b9e <__swsetup_r+0x82>
 8011b44:	06dd      	lsls	r5, r3, #27
 8011b46:	d411      	bmi.n	8011b6c <__swsetup_r+0x50>
 8011b48:	2309      	movs	r3, #9
 8011b4a:	6033      	str	r3, [r6, #0]
 8011b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b50:	81a3      	strh	r3, [r4, #12]
 8011b52:	f04f 30ff 	mov.w	r0, #4294967295
 8011b56:	e03e      	b.n	8011bd6 <__swsetup_r+0xba>
 8011b58:	4b25      	ldr	r3, [pc, #148]	; (8011bf0 <__swsetup_r+0xd4>)
 8011b5a:	429c      	cmp	r4, r3
 8011b5c:	d101      	bne.n	8011b62 <__swsetup_r+0x46>
 8011b5e:	68ac      	ldr	r4, [r5, #8]
 8011b60:	e7eb      	b.n	8011b3a <__swsetup_r+0x1e>
 8011b62:	4b24      	ldr	r3, [pc, #144]	; (8011bf4 <__swsetup_r+0xd8>)
 8011b64:	429c      	cmp	r4, r3
 8011b66:	bf08      	it	eq
 8011b68:	68ec      	ldreq	r4, [r5, #12]
 8011b6a:	e7e6      	b.n	8011b3a <__swsetup_r+0x1e>
 8011b6c:	0758      	lsls	r0, r3, #29
 8011b6e:	d512      	bpl.n	8011b96 <__swsetup_r+0x7a>
 8011b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b72:	b141      	cbz	r1, 8011b86 <__swsetup_r+0x6a>
 8011b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b78:	4299      	cmp	r1, r3
 8011b7a:	d002      	beq.n	8011b82 <__swsetup_r+0x66>
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	f7fc fc5f 	bl	800e440 <_free_r>
 8011b82:	2300      	movs	r3, #0
 8011b84:	6363      	str	r3, [r4, #52]	; 0x34
 8011b86:	89a3      	ldrh	r3, [r4, #12]
 8011b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b8c:	81a3      	strh	r3, [r4, #12]
 8011b8e:	2300      	movs	r3, #0
 8011b90:	6063      	str	r3, [r4, #4]
 8011b92:	6923      	ldr	r3, [r4, #16]
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	f043 0308 	orr.w	r3, r3, #8
 8011b9c:	81a3      	strh	r3, [r4, #12]
 8011b9e:	6923      	ldr	r3, [r4, #16]
 8011ba0:	b94b      	cbnz	r3, 8011bb6 <__swsetup_r+0x9a>
 8011ba2:	89a3      	ldrh	r3, [r4, #12]
 8011ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bac:	d003      	beq.n	8011bb6 <__swsetup_r+0x9a>
 8011bae:	4621      	mov	r1, r4
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	f000 f84d 	bl	8011c50 <__smakebuf_r>
 8011bb6:	89a0      	ldrh	r0, [r4, #12]
 8011bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bbc:	f010 0301 	ands.w	r3, r0, #1
 8011bc0:	d00a      	beq.n	8011bd8 <__swsetup_r+0xbc>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	60a3      	str	r3, [r4, #8]
 8011bc6:	6963      	ldr	r3, [r4, #20]
 8011bc8:	425b      	negs	r3, r3
 8011bca:	61a3      	str	r3, [r4, #24]
 8011bcc:	6923      	ldr	r3, [r4, #16]
 8011bce:	b943      	cbnz	r3, 8011be2 <__swsetup_r+0xc6>
 8011bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011bd4:	d1ba      	bne.n	8011b4c <__swsetup_r+0x30>
 8011bd6:	bd70      	pop	{r4, r5, r6, pc}
 8011bd8:	0781      	lsls	r1, r0, #30
 8011bda:	bf58      	it	pl
 8011bdc:	6963      	ldrpl	r3, [r4, #20]
 8011bde:	60a3      	str	r3, [r4, #8]
 8011be0:	e7f4      	b.n	8011bcc <__swsetup_r+0xb0>
 8011be2:	2000      	movs	r0, #0
 8011be4:	e7f7      	b.n	8011bd6 <__swsetup_r+0xba>
 8011be6:	bf00      	nop
 8011be8:	20000184 	.word	0x20000184
 8011bec:	08012134 	.word	0x08012134
 8011bf0:	08012154 	.word	0x08012154
 8011bf4:	08012114 	.word	0x08012114

08011bf8 <abort>:
 8011bf8:	b508      	push	{r3, lr}
 8011bfa:	2006      	movs	r0, #6
 8011bfc:	f000 f890 	bl	8011d20 <raise>
 8011c00:	2001      	movs	r0, #1
 8011c02:	f7f3 fb69 	bl	80052d8 <_exit>

08011c06 <__swhatbuf_r>:
 8011c06:	b570      	push	{r4, r5, r6, lr}
 8011c08:	460e      	mov	r6, r1
 8011c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0e:	2900      	cmp	r1, #0
 8011c10:	b096      	sub	sp, #88	; 0x58
 8011c12:	4614      	mov	r4, r2
 8011c14:	461d      	mov	r5, r3
 8011c16:	da08      	bge.n	8011c2a <__swhatbuf_r+0x24>
 8011c18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	602a      	str	r2, [r5, #0]
 8011c20:	061a      	lsls	r2, r3, #24
 8011c22:	d410      	bmi.n	8011c46 <__swhatbuf_r+0x40>
 8011c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c28:	e00e      	b.n	8011c48 <__swhatbuf_r+0x42>
 8011c2a:	466a      	mov	r2, sp
 8011c2c:	f000 f894 	bl	8011d58 <_fstat_r>
 8011c30:	2800      	cmp	r0, #0
 8011c32:	dbf1      	blt.n	8011c18 <__swhatbuf_r+0x12>
 8011c34:	9a01      	ldr	r2, [sp, #4]
 8011c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c3e:	425a      	negs	r2, r3
 8011c40:	415a      	adcs	r2, r3
 8011c42:	602a      	str	r2, [r5, #0]
 8011c44:	e7ee      	b.n	8011c24 <__swhatbuf_r+0x1e>
 8011c46:	2340      	movs	r3, #64	; 0x40
 8011c48:	2000      	movs	r0, #0
 8011c4a:	6023      	str	r3, [r4, #0]
 8011c4c:	b016      	add	sp, #88	; 0x58
 8011c4e:	bd70      	pop	{r4, r5, r6, pc}

08011c50 <__smakebuf_r>:
 8011c50:	898b      	ldrh	r3, [r1, #12]
 8011c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c54:	079d      	lsls	r5, r3, #30
 8011c56:	4606      	mov	r6, r0
 8011c58:	460c      	mov	r4, r1
 8011c5a:	d507      	bpl.n	8011c6c <__smakebuf_r+0x1c>
 8011c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	6123      	str	r3, [r4, #16]
 8011c64:	2301      	movs	r3, #1
 8011c66:	6163      	str	r3, [r4, #20]
 8011c68:	b002      	add	sp, #8
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	ab01      	add	r3, sp, #4
 8011c6e:	466a      	mov	r2, sp
 8011c70:	f7ff ffc9 	bl	8011c06 <__swhatbuf_r>
 8011c74:	9900      	ldr	r1, [sp, #0]
 8011c76:	4605      	mov	r5, r0
 8011c78:	4630      	mov	r0, r6
 8011c7a:	f7fc fc4d 	bl	800e518 <_malloc_r>
 8011c7e:	b948      	cbnz	r0, 8011c94 <__smakebuf_r+0x44>
 8011c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c84:	059a      	lsls	r2, r3, #22
 8011c86:	d4ef      	bmi.n	8011c68 <__smakebuf_r+0x18>
 8011c88:	f023 0303 	bic.w	r3, r3, #3
 8011c8c:	f043 0302 	orr.w	r3, r3, #2
 8011c90:	81a3      	strh	r3, [r4, #12]
 8011c92:	e7e3      	b.n	8011c5c <__smakebuf_r+0xc>
 8011c94:	4b0d      	ldr	r3, [pc, #52]	; (8011ccc <__smakebuf_r+0x7c>)
 8011c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	6020      	str	r0, [r4, #0]
 8011c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	9b00      	ldr	r3, [sp, #0]
 8011ca4:	6163      	str	r3, [r4, #20]
 8011ca6:	9b01      	ldr	r3, [sp, #4]
 8011ca8:	6120      	str	r0, [r4, #16]
 8011caa:	b15b      	cbz	r3, 8011cc4 <__smakebuf_r+0x74>
 8011cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f000 f863 	bl	8011d7c <_isatty_r>
 8011cb6:	b128      	cbz	r0, 8011cc4 <__smakebuf_r+0x74>
 8011cb8:	89a3      	ldrh	r3, [r4, #12]
 8011cba:	f023 0303 	bic.w	r3, r3, #3
 8011cbe:	f043 0301 	orr.w	r3, r3, #1
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	89a0      	ldrh	r0, [r4, #12]
 8011cc6:	4305      	orrs	r5, r0
 8011cc8:	81a5      	strh	r5, [r4, #12]
 8011cca:	e7cd      	b.n	8011c68 <__smakebuf_r+0x18>
 8011ccc:	0800e201 	.word	0x0800e201

08011cd0 <_raise_r>:
 8011cd0:	291f      	cmp	r1, #31
 8011cd2:	b538      	push	{r3, r4, r5, lr}
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	460d      	mov	r5, r1
 8011cd8:	d904      	bls.n	8011ce4 <_raise_r+0x14>
 8011cda:	2316      	movs	r3, #22
 8011cdc:	6003      	str	r3, [r0, #0]
 8011cde:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ce6:	b112      	cbz	r2, 8011cee <_raise_r+0x1e>
 8011ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cec:	b94b      	cbnz	r3, 8011d02 <_raise_r+0x32>
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f000 f830 	bl	8011d54 <_getpid_r>
 8011cf4:	462a      	mov	r2, r5
 8011cf6:	4601      	mov	r1, r0
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cfe:	f000 b817 	b.w	8011d30 <_kill_r>
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d00a      	beq.n	8011d1c <_raise_r+0x4c>
 8011d06:	1c59      	adds	r1, r3, #1
 8011d08:	d103      	bne.n	8011d12 <_raise_r+0x42>
 8011d0a:	2316      	movs	r3, #22
 8011d0c:	6003      	str	r3, [r0, #0]
 8011d0e:	2001      	movs	r0, #1
 8011d10:	e7e7      	b.n	8011ce2 <_raise_r+0x12>
 8011d12:	2400      	movs	r4, #0
 8011d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d18:	4628      	mov	r0, r5
 8011d1a:	4798      	blx	r3
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	e7e0      	b.n	8011ce2 <_raise_r+0x12>

08011d20 <raise>:
 8011d20:	4b02      	ldr	r3, [pc, #8]	; (8011d2c <raise+0xc>)
 8011d22:	4601      	mov	r1, r0
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	f7ff bfd3 	b.w	8011cd0 <_raise_r>
 8011d2a:	bf00      	nop
 8011d2c:	20000184 	.word	0x20000184

08011d30 <_kill_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4d07      	ldr	r5, [pc, #28]	; (8011d50 <_kill_r+0x20>)
 8011d34:	2300      	movs	r3, #0
 8011d36:	4604      	mov	r4, r0
 8011d38:	4608      	mov	r0, r1
 8011d3a:	4611      	mov	r1, r2
 8011d3c:	602b      	str	r3, [r5, #0]
 8011d3e:	f7f3 fabb 	bl	80052b8 <_kill>
 8011d42:	1c43      	adds	r3, r0, #1
 8011d44:	d102      	bne.n	8011d4c <_kill_r+0x1c>
 8011d46:	682b      	ldr	r3, [r5, #0]
 8011d48:	b103      	cbz	r3, 8011d4c <_kill_r+0x1c>
 8011d4a:	6023      	str	r3, [r4, #0]
 8011d4c:	bd38      	pop	{r3, r4, r5, pc}
 8011d4e:	bf00      	nop
 8011d50:	20002ce4 	.word	0x20002ce4

08011d54 <_getpid_r>:
 8011d54:	f7f3 baa8 	b.w	80052a8 <_getpid>

08011d58 <_fstat_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d07      	ldr	r5, [pc, #28]	; (8011d78 <_fstat_r+0x20>)
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	4604      	mov	r4, r0
 8011d60:	4608      	mov	r0, r1
 8011d62:	4611      	mov	r1, r2
 8011d64:	602b      	str	r3, [r5, #0]
 8011d66:	f7f3 fb06 	bl	8005376 <_fstat>
 8011d6a:	1c43      	adds	r3, r0, #1
 8011d6c:	d102      	bne.n	8011d74 <_fstat_r+0x1c>
 8011d6e:	682b      	ldr	r3, [r5, #0]
 8011d70:	b103      	cbz	r3, 8011d74 <_fstat_r+0x1c>
 8011d72:	6023      	str	r3, [r4, #0]
 8011d74:	bd38      	pop	{r3, r4, r5, pc}
 8011d76:	bf00      	nop
 8011d78:	20002ce4 	.word	0x20002ce4

08011d7c <_isatty_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	4d06      	ldr	r5, [pc, #24]	; (8011d98 <_isatty_r+0x1c>)
 8011d80:	2300      	movs	r3, #0
 8011d82:	4604      	mov	r4, r0
 8011d84:	4608      	mov	r0, r1
 8011d86:	602b      	str	r3, [r5, #0]
 8011d88:	f7f3 fb05 	bl	8005396 <_isatty>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d102      	bne.n	8011d96 <_isatty_r+0x1a>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	b103      	cbz	r3, 8011d96 <_isatty_r+0x1a>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	20002ce4 	.word	0x20002ce4

08011d9c <_init>:
 8011d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9e:	bf00      	nop
 8011da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011da2:	bc08      	pop	{r3}
 8011da4:	469e      	mov	lr, r3
 8011da6:	4770      	bx	lr

08011da8 <_fini>:
 8011da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011daa:	bf00      	nop
 8011dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dae:	bc08      	pop	{r3}
 8011db0:	469e      	mov	lr, r3
 8011db2:	4770      	bx	lr
