
rfid-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000340c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080035e4  080035e4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e4  080035e4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000020  0800360c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800360c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000805a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e4  00000000  00000000  000280aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00029790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c5c  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bc3  00000000  00000000  0004c404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc879  00000000  00000000  00054fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002128  00000000  00000000  00121890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003588 	.word	0x08003588

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08003588 	.word	0x08003588

080001d4 <select_switch_port>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_switch_port(uint8_t channel_index) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	// lol I originally wrote this to be 1 indexed, so I added
		// channel_index++ to make it 0 indexed, the rest of the
		// logic is 1 indexed though

		if (channel_index < 1 || channel_index > 12) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	f000 80d6 	beq.w	8000392 <select_switch_port+0x1be>
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b0c      	cmp	r3, #12
 80001ea:	f200 80d2 	bhi.w	8000392 <select_switch_port+0x1be>
			return 1;  // Invalid switch index
		}

		// Set U2.4
		uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
		if (channel_index <= 4) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b04      	cmp	r3, #4
 80001f6:	d80e      	bhi.n	8000216 <select_switch_port+0x42>
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fe:	4867      	ldr	r0, [pc, #412]	; (800039c <select_switch_port+0x1c8>)
 8000200:	f001 fbe4 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020a:	4864      	ldr	r0, [pc, #400]	; (800039c <select_switch_port+0x1c8>)
 800020c:	f001 fbde 	bl	80019cc <HAL_GPIO_WritePin>
			switch_refdes = 1;
 8000210:	2301      	movs	r3, #1
 8000212:	73fb      	strb	r3, [r7, #15]
 8000214:	e01f      	b.n	8000256 <select_switch_port+0x82>
		}
		else if (channel_index <= 8) {
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b08      	cmp	r3, #8
 800021a:	d80e      	bhi.n	800023a <select_switch_port+0x66>
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	485e      	ldr	r0, [pc, #376]	; (800039c <select_switch_port+0x1c8>)
 8000224:	f001 fbd2 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022e:	485b      	ldr	r0, [pc, #364]	; (800039c <select_switch_port+0x1c8>)
 8000230:	f001 fbcc 	bl	80019cc <HAL_GPIO_WritePin>
			switch_refdes = 2;
 8000234:	2302      	movs	r3, #2
 8000236:	73fb      	strb	r3, [r7, #15]
 8000238:	e00d      	b.n	8000256 <select_switch_port+0x82>
		}
		else { // if channel_index <= 12
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	4856      	ldr	r0, [pc, #344]	; (800039c <select_switch_port+0x1c8>)
 8000242:	f001 fbc3 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024c:	4853      	ldr	r0, [pc, #332]	; (800039c <select_switch_port+0x1c8>)
 800024e:	f001 fbbd 	bl	80019cc <HAL_GPIO_WritePin>
			switch_refdes = 3;
 8000252:	2303      	movs	r3, #3
 8000254:	73fb      	strb	r3, [r7, #15]
		}

		// The pattern on each 2nd layer switch is the same, use multiplexing
		uint8_t V0 = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	73bb      	strb	r3, [r7, #14]
		uint8_t V1 = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	737b      	strb	r3, [r7, #13]
		if (channel_index % 4 == 0) {  // 4, 8, 12
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 0303 	and.w	r3, r3, #3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d104      	bne.n	8000274 <select_switch_port+0xa0>
			V0 = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	73bb      	strb	r3, [r7, #14]
			V1 = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	737b      	strb	r3, [r7, #13]
 8000272:	e019      	b.n	80002a8 <select_switch_port+0xd4>
		}
		else if (channel_index % 4 == 1) {  // 1, 5, 9
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 0303 	and.w	r3, r3, #3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2b01      	cmp	r3, #1
 800027e:	d104      	bne.n	800028a <select_switch_port+0xb6>
			V0 = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	73bb      	strb	r3, [r7, #14]
			V1 = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	737b      	strb	r3, [r7, #13]
 8000288:	e00e      	b.n	80002a8 <select_switch_port+0xd4>
		}
		else if (channel_index % 4 == 2) {  // 2, 6, 10
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 0303 	and.w	r3, r3, #3
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b02      	cmp	r3, #2
 8000294:	d104      	bne.n	80002a0 <select_switch_port+0xcc>
			V0 = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	73bb      	strb	r3, [r7, #14]
			V1 = 1;
 800029a:	2301      	movs	r3, #1
 800029c:	737b      	strb	r3, [r7, #13]
 800029e:	e003      	b.n	80002a8 <select_switch_port+0xd4>
		}
		else {  // if channel_index % 4 == 3  // 3, 7, 11
			V0 = 1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	73bb      	strb	r3, [r7, #14]
			V1 = 1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	737b      	strb	r3, [r7, #13]
		}

		// The other switches' V0/V1 are don't care, but set them to 0 anyways
		switch(switch_refdes) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d04c      	beq.n	8000348 <select_switch_port+0x174>
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	dc6d      	bgt.n	800038e <select_switch_port+0x1ba>
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d002      	beq.n	80002bc <select_switch_port+0xe8>
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d023      	beq.n	8000302 <select_switch_port+0x12e>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
			break;
		default:
			break;
 80002ba:	e068      	b.n	800038e <select_switch_port+0x1ba>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 80002bc:	7bbb      	ldrb	r3, [r7, #14]
 80002be:	461a      	mov	r2, r3
 80002c0:	2104      	movs	r1, #4
 80002c2:	4837      	ldr	r0, [pc, #220]	; (80003a0 <select_switch_port+0x1cc>)
 80002c4:	f001 fb82 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 80002c8:	7b7b      	ldrb	r3, [r7, #13]
 80002ca:	461a      	mov	r2, r3
 80002cc:	2102      	movs	r1, #2
 80002ce:	4834      	ldr	r0, [pc, #208]	; (80003a0 <select_switch_port+0x1cc>)
 80002d0:	f001 fb7c 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002da:	4830      	ldr	r0, [pc, #192]	; (800039c <select_switch_port+0x1c8>)
 80002dc:	f001 fb76 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002e6:	482d      	ldr	r0, [pc, #180]	; (800039c <select_switch_port+0x1c8>)
 80002e8:	f001 fb70 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	482b      	ldr	r0, [pc, #172]	; (80003a0 <select_switch_port+0x1cc>)
 80002f2:	f001 fb6b 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2140      	movs	r1, #64	; 0x40
 80002fa:	4829      	ldr	r0, [pc, #164]	; (80003a0 <select_switch_port+0x1cc>)
 80002fc:	f001 fb66 	bl	80019cc <HAL_GPIO_WritePin>
			break;
 8000300:	e046      	b.n	8000390 <select_switch_port+0x1bc>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2104      	movs	r1, #4
 8000306:	4826      	ldr	r0, [pc, #152]	; (80003a0 <select_switch_port+0x1cc>)
 8000308:	f001 fb60 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2102      	movs	r1, #2
 8000310:	4823      	ldr	r0, [pc, #140]	; (80003a0 <select_switch_port+0x1cc>)
 8000312:	f001 fb5b 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	461a      	mov	r2, r3
 800031a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031e:	481f      	ldr	r0, [pc, #124]	; (800039c <select_switch_port+0x1c8>)
 8000320:	f001 fb54 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 8000324:	7b7b      	ldrb	r3, [r7, #13]
 8000326:	461a      	mov	r2, r3
 8000328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800032c:	481b      	ldr	r0, [pc, #108]	; (800039c <select_switch_port+0x1c8>)
 800032e:	f001 fb4d 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	481a      	ldr	r0, [pc, #104]	; (80003a0 <select_switch_port+0x1cc>)
 8000338:	f001 fb48 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	4817      	ldr	r0, [pc, #92]	; (80003a0 <select_switch_port+0x1cc>)
 8000342:	f001 fb43 	bl	80019cc <HAL_GPIO_WritePin>
			break;
 8000346:	e023      	b.n	8000390 <select_switch_port+0x1bc>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	2104      	movs	r1, #4
 800034c:	4814      	ldr	r0, [pc, #80]	; (80003a0 <select_switch_port+0x1cc>)
 800034e:	f001 fb3d 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4812      	ldr	r0, [pc, #72]	; (80003a0 <select_switch_port+0x1cc>)
 8000358:	f001 fb38 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <select_switch_port+0x1c8>)
 8000364:	f001 fb32 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <select_switch_port+0x1c8>)
 8000370:	f001 fb2c 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 8000374:	7bbb      	ldrb	r3, [r7, #14]
 8000376:	461a      	mov	r2, r3
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	4809      	ldr	r0, [pc, #36]	; (80003a0 <select_switch_port+0x1cc>)
 800037c:	f001 fb26 	bl	80019cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8000380:	7b7b      	ldrb	r3, [r7, #13]
 8000382:	461a      	mov	r2, r3
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <select_switch_port+0x1cc>)
 8000388:	f001 fb20 	bl	80019cc <HAL_GPIO_WritePin>
			break;
 800038c:	e000      	b.n	8000390 <select_switch_port+0x1bc>
			break;
 800038e:	bf00      	nop
		}

		return 0;
 8000390:	e000      	b.n	8000394 <select_switch_port+0x1c0>
			return 1;  // Invalid switch index
 8000392:	bf00      	nop
}
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000800 	.word	0x48000800

080003a4 <reader_irq_pulse>:

volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <reader_irq_pulse+0x28>)
 80003ae:	f001 fb0d 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80003b2:	2001      	movs	r0, #1
 80003b4:	f001 f85a 	bl	800146c <HAL_Delay>
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2110      	movs	r1, #16
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <reader_irq_pulse+0x28>)
 80003be:	f001 fb05 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_Delay(8);
 80003c2:	2008      	movs	r0, #8
 80003c4:	f001 f852 	bl	800146c <HAL_Delay>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	48000800 	.word	0x48000800

080003d0 <reader_nss>:

void reader_nss(uint8_t enable) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	bf0c      	ite	eq
 80003e0:	2301      	moveq	r3, #1
 80003e2:	2300      	movne	r3, #0
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	461a      	mov	r2, r3
 80003e8:	2110      	movs	r1, #16
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f001 faed 	bl	80019cc <HAL_GPIO_WritePin>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b29a      	uxth	r2, r3
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	6879      	ldr	r1, [r7, #4]
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <reader_tx+0x28>)
 8000412:	f002 fa12 	bl	800283a <HAL_SPI_Transmit>
 8000416:	4603      	mov	r3, r0
 8000418:	60fb      	str	r3, [r7, #12]
  return ret;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000003c 	.word	0x2000003c

08000428 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	b29a      	uxth	r2, r3
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <reader_rx+0x28>)
 800043e:	f002 fb6a 	bl	8002b16 <HAL_SPI_Receive>
 8000442:	4603      	mov	r3, r0
 8000444:	60fb      	str	r3, [r7, #12]
  return ret;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000003c 	.word	0x2000003c

08000454 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	80fb      	strh	r3, [r7, #6]
  if (pin == RFID_NIRQ_OUT_PIN) {
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000464:	d102      	bne.n	800046c <HAL_GPIO_EXTI_Callback+0x18>
    reader_handler.irq_flag = 1;
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <HAL_GPIO_EXTI_Callback+0x24>)
 8000468:	2201      	movs	r2, #1
 800046a:	745a      	strb	r2, [r3, #17]
  }
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	200000a0 	.word	0x200000a0

0800047c <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  HAL_Delay(uid[0]);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 ffef 	bl	800146c <HAL_Delay>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 ff71 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f842 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f8c4 	bl	8000630 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004a8:	f000 f884 	bl	80005b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_15693;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <main+0x78>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <main+0x78>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <main+0x78>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <main+0x78>)
 80004c0:	2258      	movs	r2, #88	; 0x58
 80004c2:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <main+0x78>)
 80004c6:	22d1      	movs	r2, #209	; 0xd1
 80004c8:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <main+0x78>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <main+0x78>)
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <main+0x7c>)
 80004d4:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <main+0x78>)
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <main+0x80>)
 80004da:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <main+0x78>)
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <main+0x84>)
 80004e0:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x78>)
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <main+0x88>)
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x78>)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <main+0x8c>)
 80004ec:	615a      	str	r2, [r3, #20]

  select_switch_port(7);
 80004ee:	2007      	movs	r0, #7
 80004f0:	f7ff fe70 	bl	80001d4 <select_switch_port>
  st25r95_init(&reader_handler);
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x78>)
 80004f6:	f000 fa17 	bl	8000928 <st25r95_init>
  st25r95_calibrate(&reader_handler);
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x78>)
 80004fc:	f000 fd92 	bl	8001024 <st25r95_calibrate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  st25r95_idle(&reader_handler);
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <main+0x78>)
 8000502:	f000 fd39 	bl	8000f78 <st25r95_idle>
  while (1) {
    st25r95_service(&reader_handler);
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x78>)
 8000508:	f000 f960 	bl	80007cc <st25r95_service>
 800050c:	e7fb      	b.n	8000506 <main+0x6e>
 800050e:	bf00      	nop
 8000510:	200000a0 	.word	0x200000a0
 8000514:	080003d1 	.word	0x080003d1
 8000518:	080003fd 	.word	0x080003fd
 800051c:	08000429 	.word	0x08000429
 8000520:	080003a5 	.word	0x080003a5
 8000524:	0800047d 	.word	0x0800047d

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 f81e 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f001 fa7b 	bl	8001a48 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f904 	bl	8000764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fabd 	bl	8001af4 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000580:	f000 f8f0 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f001 febd 	bl	800231c <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f8dc 	bl	8000764 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_SPI1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_SPI1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_SPI1_Init+0x74>)
 80005e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SPI1_Init+0x74>)
 8000602:	2207      	movs	r2, #7
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SPI1_Init+0x74>)
 800060e:	2208      	movs	r2, #8
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_SPI1_Init+0x74>)
 8000614:	f002 f86e 	bl	80026f4 <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8a1 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000003c 	.word	0x2000003c
 800062c:	40013000 	.word	0x40013000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <MX_GPIO_Init+0x128>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a43      	ldr	r2, [pc, #268]	; (8000758 <MX_GPIO_Init+0x128>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <MX_GPIO_Init+0x128>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <MX_GPIO_Init+0x128>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a3d      	ldr	r2, [pc, #244]	; (8000758 <MX_GPIO_Init+0x128>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <MX_GPIO_Init+0x128>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <MX_GPIO_Init+0x128>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a37      	ldr	r2, [pc, #220]	; (8000758 <MX_GPIO_Init+0x128>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <MX_GPIO_Init+0x128>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 800068e:	2200      	movs	r2, #0
 8000690:	21d6      	movs	r1, #214	; 0xd6
 8000692:	4832      	ldr	r0, [pc, #200]	; (800075c <MX_GPIO_Init+0x12c>)
 8000694:	f001 f99a 	bl	80019cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 f994 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80006a4:	2200      	movs	r2, #0
 80006a6:	f24f 0130 	movw	r1, #61488	; 0xf030
 80006aa:	482d      	ldr	r0, [pc, #180]	; (8000760 <MX_GPIO_Init+0x130>)
 80006ac:	f001 f98e 	bl	80019cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 80006b0:	23c6      	movs	r3, #198	; 0xc6
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <MX_GPIO_Init+0x12c>)
 80006c8:	f001 f806 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 80006cc:	2310      	movs	r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f000 fff7 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 80006ea:	2310      	movs	r3, #16
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4816      	ldr	r0, [pc, #88]	; (800075c <MX_GPIO_Init+0x12c>)
 8000702:	f000 ffe9 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8000706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <MX_GPIO_Init+0x130>)
 800071e:	f000 ffdb 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000722:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000726:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_GPIO_Init+0x130>)
 800073c:	f000 ffcc 	bl	80016d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 ff90 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f000 ffa9 	bl	80016a2 <HAL_NVIC_EnableIRQ>

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800
 8000760:	48000400 	.word	0x48000400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <st25r95_spi_tx+0x24>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4611      	mov	r1, r2
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <st25r95_spi_tx+0x28>)
 8000784:	4798      	blx	r3
  tx_len = 0;
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <st25r95_spi_tx+0x24>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001c8 	.word	0x200001c8
 8000798:	200000c8 	.word	0x200000c8

0800079c <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <st25r95_spi_byte+0x28>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <st25r95_spi_byte+0x2c>)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ffdb 	bl	8000770 <st25r95_spi_tx>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001c8 	.word	0x200001c8
 80007c8:	200000c8 	.word	0x200000c8

080007cc <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7c5b      	ldrb	r3, [r3, #17]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d15d      	bne.n	800089a <st25r95_service+0xce>
    handler->irq_flag = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	745a      	strb	r2, [r3, #17]
    if (handler->state == ST25_STATE_IDLE) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d156      	bne.n	800089a <st25r95_service+0xce>
      st25r95_init(handler);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f89b 	bl	8000928 <st25r95_init>
      if (handler->protocol == ST25_PROTOCOL_14443A
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461c      	mov	r4, r3
    		  & st25r95_14443A_detect(handler)) {
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f9f4 	bl	8000bf0 <st25r95_14443A_detect>
 8000808:	4603      	mov	r3, r0
 800080a:	4023      	ands	r3, r4
      if (handler->protocol == ST25_PROTOCOL_14443A
 800080c:	2b00      	cmp	r3, #0
 800080e:	d016      	beq.n	800083e <st25r95_service+0x72>
        handler->callback(handler->uid);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	3207      	adds	r2, #7
 8000818:	4610      	mov	r0, r2
 800081a:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <st25r95_service+0xd8>)
 8000822:	f001 f8d3 	bl	80019cc <HAL_GPIO_WritePin>
        for(volatile i=0;i<10000; ++i);
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e002      	b.n	8000832 <st25r95_service+0x66>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f242 720f 	movw	r2, #9999	; 0x270f
 8000838:	4293      	cmp	r3, r2
 800083a:	ddf7      	ble.n	800082c <st25r95_service+0x60>
 800083c:	e02a      	b.n	8000894 <st25r95_service+0xc8>
      }
      else if (handler->protocol == ST25_PROTOCOL_15693
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	2b01      	cmp	r3, #1
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461c      	mov	r4, r3
    		  & st25r95_15693_inventory1(handler)) {
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 fb4a 	bl	8000ee8 <st25r95_15693_inventory1>
 8000854:	4603      	mov	r3, r0
 8000856:	4023      	ands	r3, r4
      else if (handler->protocol == ST25_PROTOCOL_15693
 8000858:	2b00      	cmp	r3, #0
 800085a:	d016      	beq.n	800088a <st25r95_service+0xbe>
        handler->callback(handler->uid);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	3207      	adds	r2, #7
 8000864:	4610      	mov	r0, r2
 8000866:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <st25r95_service+0xd8>)
 800086e:	f001 f8ad 	bl	80019cc <HAL_GPIO_WritePin>
        for(volatile i=0;i<10000; ++i);
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	e002      	b.n	800087e <st25r95_service+0xb2>
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f242 720f 	movw	r2, #9999	; 0x270f
 8000884:	4293      	cmp	r3, r2
 8000886:	ddf7      	ble.n	8000878 <st25r95_service+0xac>
 8000888:	e004      	b.n	8000894 <st25r95_service+0xc8>
      } else {
    	HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <st25r95_service+0xd8>)
 8000890:	f001 f89c 	bl	80019cc <HAL_GPIO_WritePin>
      }
      st25r95_idle(handler);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 fb6f 	bl	8000f78 <st25r95_idle>
    }
  }
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	bf00      	nop
 80008a4:	48000400 	.word	0x48000400

080008a8 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 80008b0:	bf00      	nop
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7c5b      	ldrb	r3, [r3, #17]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0fa      	beq.n	80008b2 <st25r95_response+0xa>
  handler->irq_flag = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	2001      	movs	r0, #1
 80008c8:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 80008ca:	2102      	movs	r1, #2
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff65 	bl	800079c <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	2101      	movs	r1, #1
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <st25r95_response+0x74>)
 80008da:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <st25r95_response+0x74>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b55      	cmp	r3, #85	; 0x55
 80008e2:	d105      	bne.n	80008f0 <st25r95_response+0x48>
    handler->nss(0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	2000      	movs	r0, #0
 80008ea:	4798      	blx	r3
    return rx_data;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <st25r95_response+0x74>)
 80008ee:	e011      	b.n	8000914 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <st25r95_response+0x78>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	4610      	mov	r0, r2
 80008fa:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a1b      	ldr	r3, [r3, #32]
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <st25r95_response+0x7c>)
 8000902:	4a06      	ldr	r2, [pc, #24]	; (800091c <st25r95_response+0x74>)
 8000904:	7852      	ldrb	r2, [r2, #1]
 8000906:	4611      	mov	r1, r2
 8000908:	4798      	blx	r3
  handler->nss(0);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	2000      	movs	r0, #0
 8000910:	4798      	blx	r3
  return rx_data;
 8000912:	4b02      	ldr	r3, [pc, #8]	; (800091c <st25r95_response+0x74>)
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200001cc 	.word	0x200001cc
 8000920:	200001cd 	.word	0x200001cd
 8000924:	200001ce 	.word	0x200001ce

08000928 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f830 	bl	8000996 <st25r95_reset>
  handler->irq_pulse();
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d012      	beq.n	8000970 <st25r95_init+0x48>
 800094a:	2b02      	cmp	r3, #2
 800094c:	d11b      	bne.n	8000986 <st25r95_init+0x5e>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f866 	bl	8000a20 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	795b      	ldrb	r3, [r3, #5]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f8d6 	bl	8000b0c <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	799b      	ldrb	r3, [r3, #6]
 8000964:	461a      	mov	r2, r3
 8000966:	2101      	movs	r1, #1
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f907 	bl	8000b7c <st25r95_write_ARC>
      break;
 800096e:	e00e      	b.n	800098e <st25r95_init+0x66>
    case ST25_PROTOCOL_15693:
      st25r95_15693(handler);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f891 	bl	8000a98 <st25r95_15693>
	  st25r95_write_ARC(handler, 1, handler->ARC);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	799b      	ldrb	r3, [r3, #6]
 800097a:	461a      	mov	r2, r3
 800097c:	2101      	movs	r1, #1
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f8fc 	bl	8000b7c <st25r95_write_ARC>
	  break;
 8000984:	e003      	b.n	800098e <st25r95_init+0x66>
    default:
      st25r95_off(handler);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f81a 	bl	80009c0 <st25r95_off>
      break;
 800098c:	bf00      	nop
  }
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	2001      	movs	r0, #1
 80009a4:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 80009a6:	2101      	movs	r1, #1
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fef7 	bl	800079c <st25r95_spi_byte>
  handler->nss(0);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	2000      	movs	r0, #0
 80009b4:	4798      	blx	r3
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <st25r95_off+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <st25r95_off+0x58>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <st25r95_off+0x58>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <st25r95_off+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <st25r95_off+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <st25r95_off+0x5c>)
 80009e8:	2205      	movs	r2, #5
 80009ea:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	2001      	movs	r0, #1
 80009f2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff febb 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	2000      	movs	r0, #0
 8000a00:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ff50 	bl	80008a8 <st25r95_response>
 8000a08:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c8 	.word	0x200000c8
 8000a1c:	200001c8 	.word	0x200001c8

08000a20 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <st25r95_14443A+0x70>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <st25r95_14443A+0x70>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <st25r95_14443A+0x70>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <st25r95_14443A+0x70>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	78db      	ldrb	r3, [r3, #3]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	b25a      	sxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	011b      	lsls	r3, r3, #4
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <st25r95_14443A+0x70>)
 8000a58:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <st25r95_14443A+0x74>)
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	2001      	movs	r0, #1
 8000a66:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe81 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	2000      	movs	r0, #0
 8000a74:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff13 	bl	80008a8 <st25r95_response>
 8000a82:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	781b      	ldrb	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000c8 	.word	0x200000c8
 8000a94:	200001c8 	.word	0x200001c8

08000a98 <st25r95_15693>:

st25r95_status_t st25r95_15693(st25r95_handle *handler) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <st25r95_15693+0x6c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <st25r95_15693+0x6c>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <st25r95_15693+0x6c>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_15693;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <st25r95_15693+0x6c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	78db      	ldrb	r3, [r3, #3]
  	  	  	  	  | 0 << 2 | 0 << 1 | 1 << 0;
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	b2da      	uxtb	r2, r3
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <st25r95_15693+0x6c>)
 8000aca:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <st25r95_15693+0x70>)
 8000ace:	2205      	movs	r2, #5
 8000ad0:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe48 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_15693;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff feda 	bl	80008a8 <st25r95_response>
 8000af4:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000c8 	.word	0x200000c8
 8000b08:	200001c8 	.word	0x200001c8

08000b0c <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b20:	2209      	movs	r2, #9
 8000b22:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b26:	2204      	movs	r2, #4
 8000b28:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b2c:	223a      	movs	r2, #58	; 0x3a
 8000b2e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <st25r95_write_timerw+0x68>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <st25r95_write_timerw+0x6c>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fe0d 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fea2 	bl	80008a8 <st25r95_response>
 8000b64:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	781b      	ldrb	r3, [r3, #0]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c8 	.word	0x200000c8
 8000b78:	200001c8 	.word	0x200001c8

08000b7c <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000b94:	2209      	movs	r2, #9
 8000b96:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000ba0:	2268      	movs	r2, #104	; 0x68
 8000ba2:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <st25r95_write_ARC+0x6c>)
 8000bb2:	78bb      	ldrb	r3, [r7, #2]
 8000bb4:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <st25r95_write_ARC+0x70>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fdd3 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	2000      	movs	r0, #0
 8000bd0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fe68 	bl	80008a8 <st25r95_response>
 8000bd8:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000c8 	.word	0x200000c8
 8000bec:	200001c8 	.word	0x200001c8

08000bf0 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af04      	add	r7, sp, #16
 8000bf6:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f883 	bl	8000d18 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 8000c12:	7d3b      	ldrb	r3, [r7, #20]
 8000c14:	2bff      	cmp	r3, #255	; 0xff
 8000c16:	d101      	bne.n	8000c1c <st25r95_14443A_detect+0x2c>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e078      	b.n	8000d0e <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 8000c1c:	7d3b      	ldrb	r3, [r7, #20]
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <st25r95_14443A_detect+0x3a>
    return 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e071      	b.n	8000d0e <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8000c2a:	7d3b      	ldrb	r3, [r7, #20]
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
 8000c34:	e053      	b.n	8000cde <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8000c3a:	f107 0214 	add.w	r2, r7, #20
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f8a4 	bl	8000d90 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8000c48:	7d3b      	ldrb	r3, [r7, #20]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d101      	bne.n	8000c52 <st25r95_14443A_detect+0x62>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e05d      	b.n	8000d0e <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 8000c52:	7d3a      	ldrb	r2, [r7, #20]
 8000c54:	7d7b      	ldrb	r3, [r7, #21]
 8000c56:	4053      	eors	r3, r2
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	7dbb      	ldrb	r3, [r7, #22]
 8000c5c:	4053      	eors	r3, r2
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	4053      	eors	r3, r2
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	7e3b      	ldrb	r3, [r7, #24]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d001      	beq.n	8000c70 <st25r95_14443A_detect+0x80>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e04e      	b.n	8000d0e <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	7d3a      	ldrb	r2, [r7, #20]
 8000c76:	3320      	adds	r3, #32
 8000c78:	443b      	add	r3, r7
 8000c7a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8000c7e:	7ffb      	ldrb	r3, [r7, #31]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	3301      	adds	r3, #1
 8000c84:	7d7a      	ldrb	r2, [r7, #21]
 8000c86:	3320      	adds	r3, #32
 8000c88:	443b      	add	r3, r7
 8000c8a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	7dba      	ldrb	r2, [r7, #22]
 8000c96:	3320      	adds	r3, #32
 8000c98:	443b      	add	r3, r7
 8000c9a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	7dfa      	ldrb	r2, [r7, #23]
 8000ca6:	3320      	adds	r3, #32
 8000ca8:	443b      	add	r3, r7
 8000caa:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 8000cae:	7d3d      	ldrb	r5, [r7, #20]
 8000cb0:	7d7b      	ldrb	r3, [r7, #21]
 8000cb2:	7dba      	ldrb	r2, [r7, #22]
 8000cb4:	7df9      	ldrb	r1, [r7, #23]
 8000cb6:	f107 0414 	add.w	r4, r7, #20
 8000cba:	7ff8      	ldrb	r0, [r7, #31]
 8000cbc:	9102      	str	r1, [sp, #8]
 8000cbe:	9201      	str	r2, [sp, #4]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	462b      	mov	r3, r5
 8000cc4:	4622      	mov	r2, r4
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f8a7 	bl	8000e1c <st25r95_14443A_select>
    if (data[0] & 0x4)
 8000cce:	7d3b      	ldrb	r3, [r7, #20]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d007      	beq.n	8000ce8 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000cd8:	7ffb      	ldrb	r3, [r7, #31]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	77fb      	strb	r3, [r7, #31]
 8000cde:	7fba      	ldrb	r2, [r7, #30]
 8000ce0:	7ffb      	ldrb	r3, [r7, #31]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d2a7      	bcs.n	8000c36 <st25r95_14443A_detect+0x46>
 8000ce6:	e000      	b.n	8000cea <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 8000ce8:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3307      	adds	r3, #7
 8000cee:	220a      	movs	r2, #10
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fc40 	bl	8003578 <memset>
  memcpy(handler->uid, UID, 10);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3307      	adds	r3, #7
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	cb03      	ldmia	r3!, {r0, r1}
 8000d04:	6010      	str	r0, [r2, #0]
 8000d06:	6051      	str	r1, [r2, #4]
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	8113      	strh	r3, [r2, #8]
  return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d18 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <st25r95_14443A_REQA+0x70>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <st25r95_14443A_REQA+0x70>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <st25r95_14443A_REQA+0x70>)
 8000d30:	2202      	movs	r2, #2
 8000d32:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <st25r95_14443A_REQA+0x70>)
 8000d36:	2226      	movs	r2, #38	; 0x26
 8000d38:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <st25r95_14443A_REQA+0x70>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <st25r95_14443A_REQA+0x74>)
 8000d42:	2205      	movs	r2, #5
 8000d44:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fd0e 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	2000      	movs	r0, #0
 8000d5a:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fda3 	bl	80008a8 <st25r95_response>
 8000d62:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b80      	cmp	r3, #128	; 0x80
 8000d6a:	d109      	bne.n	8000d80 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1c99      	adds	r1, r3, #2
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f002 fbef 	bl	800355c <memcpy>
 8000d7e:	e000      	b.n	8000d82 <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000d80:	bf00      	nop

}
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000c8 	.word	0x200000c8
 8000d8c:	200001c8 	.word	0x200001c8

08000d90 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000dac:	2203      	movs	r2, #3
 8000dae:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <st25r95_14443A_ANTICOLLISION+0x84>)
 8000db4:	5cd2      	ldrb	r2, [r2, r3]
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000db8:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <st25r95_14443A_ANTICOLLISION+0x88>)
 8000dc8:	2206      	movs	r2, #6
 8000dca:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff fccb 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2000      	movs	r0, #0
 8000de0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fd60 	bl	80008a8 <st25r95_response>
 8000de8:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b80      	cmp	r3, #128	; 0x80
 8000df0:	d109      	bne.n	8000e06 <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	1c99      	adds	r1, r3, #2
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f002 fbac 	bl	800355c <memcpy>
 8000e04:	e000      	b.n	8000e08 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000e06:	bf00      	nop
}
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000c8 	.word	0x200000c8
 8000e14:	080035a0 	.word	0x080035a0
 8000e18:	200001c8 	.word	0x200001c8

08000e1c <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	461a      	mov	r2, r3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	72fb      	strb	r3, [r7, #11]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <st25r95_14443A_select+0xc4>)
 8000e46:	5cd2      	ldrb	r2, [r2, r3]
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e4a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e4e:	2270      	movs	r2, #112	; 0x70
 8000e50:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e5e:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8000e60:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e66:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e6e:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8000e70:	7aba      	ldrb	r2, [r7, #10]
 8000e72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e76:	4053      	eors	r3, r2
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e7e:	4053      	eors	r3, r2
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e86:	4053      	eors	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e8c:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <st25r95_14443A_select+0xc0>)
 8000e90:	2228      	movs	r2, #40	; 0x28
 8000e92:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <st25r95_14443A_select+0xc8>)
 8000e96:	220b      	movs	r2, #11
 8000e98:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fc64 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	2000      	movs	r0, #0
 8000eae:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff fcf9 	bl	80008a8 <st25r95_response>
 8000eb6:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b80      	cmp	r3, #128	; 0x80
 8000ebe:	d109      	bne.n	8000ed4 <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	1c99      	adds	r1, r3, #2
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f002 fb45 	bl	800355c <memcpy>
 8000ed2:	e000      	b.n	8000ed6 <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000ed4:	bf00      	nop
}
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000c8 	.word	0x200000c8
 8000ee0:	080035a0 	.word	0x080035a0
 8000ee4:	200001c8 	.word	0x200001c8

08000ee8 <st25r95_15693_inventory1>:

uint8_t st25r95_15693_inventory1(st25r95_handle *handler)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x3; // length of 15693 command frame
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x01; // flags
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // command code
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x00; // non-addressed & no mask
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <st25r95_15693_inventory1+0x88>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	715a      	strb	r2, [r3, #5]
  // CRC automatically appended by 15693 protocol select
  tx_len = 6;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <st25r95_15693_inventory1+0x8c>)
 8000f16:	2206      	movs	r2, #6
 8000f18:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	2001      	movs	r0, #1
 8000f20:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fc24 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fcb9 	bl	80008a8 <st25r95_response>
 8000f36:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return 0;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b80      	cmp	r3, #128	; 0x80
 8000f3e:	d001      	beq.n	8000f44 <st25r95_15693_inventory1+0x5c>
 8000f40:	2300      	movs	r3, #0
 8000f42:	e010      	b.n	8000f66 <st25r95_15693_inventory1+0x7e>

  memset(handler->uid, 0, 8);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3307      	adds	r3, #7
 8000f48:	2208      	movs	r2, #8
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fb13 	bl	8003578 <memset>
  memcpy(handler->uid, res[4], 8);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	1dd8      	adds	r0, r3, #7
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f002 fafc 	bl	800355c <memcpy>
  return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	200001c8 	.word	0x200001c8

08000f78 <st25r95_idle>:
  memset(handler->uid, 0, 8);
  memcpy(handler->uid, res[4], 8);
  return 1;
}

void st25r95_idle(st25r95_handle *handler) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <st25r95_idle+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <st25r95_idle+0xa4>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <st25r95_idle+0xa4>)
 8000f8e:	220e      	movs	r2, #14
 8000f90:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_WU_SRC_TagDetection;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <st25r95_idle+0xa4>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <st25r95_idle+0xa4>)
 8000f9a:	2221      	movs	r2, #33	; 0x21
 8000f9c:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <st25r95_idle+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <st25r95_idle+0xa4>)
 8000fa6:	2279      	movs	r2, #121	; 0x79
 8000fa8:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <st25r95_idle+0xa4>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <st25r95_idle+0xa4>)
 8000fb2:	2218      	movs	r2, #24
 8000fb4:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <st25r95_idle+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <st25r95_idle+0xa4>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <st25r95_idle+0xa4>)
 8000fc4:	2260      	movs	r2, #96	; 0x60
 8000fc6:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <st25r95_idle+0xa4>)
 8000fca:	2260      	movs	r2, #96	; 0x60
 8000fcc:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <st25r95_idle+0xa4>)
 8000fd8:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <st25r95_idle+0xa4>)
 8000fe4:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <st25r95_idle+0xa4>)
 8000fe8:	223f      	movs	r2, #63	; 0x3f
 8000fea:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <st25r95_idle+0xa4>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <st25r95_idle+0xa8>)
 8000ff4:	2211      	movs	r2, #17
 8000ff6:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fbb5 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	2000      	movs	r0, #0
 800100c:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000c8 	.word	0x200000c8
 8001020:	200001c8 	.word	0x200001c8

08001024 <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e0bf      	b.n	80011b2 <st25r95_calibrate+0x18e>
    tx_len = 17;
 8001032:	4b66      	ldr	r3, [pc, #408]	; (80011cc <st25r95_calibrate+0x1a8>)
 8001034:	2211      	movs	r2, #17
 8001036:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8001038:	4a65      	ldr	r2, [pc, #404]	; (80011d0 <st25r95_calibrate+0x1ac>)
 800103a:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800103c:	4614      	mov	r4, r2
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2001      	movs	r0, #1
 800104e:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fb8d 	bl	8000770 <st25r95_spi_tx>
    handler->nss(0);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2000      	movs	r0, #0
 800105c:	4798      	blx	r3

    res = st25r95_response(handler);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fc22 	bl	80008a8 <st25r95_response>
 8001064:	4603      	mov	r3, r0
 8001066:	4a5c      	ldr	r2, [pc, #368]	; (80011d8 <st25r95_calibrate+0x1b4>)
 8001068:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <st25r95_calibrate+0x1b4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 809a 	bne.w	80011aa <st25r95_calibrate+0x186>
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <st25r95_calibrate+0x1b4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	f040 8093 	bne.w	80011aa <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 8001084:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <st25r95_calibrate+0x1b4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3302      	adds	r3, #2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d13e      	bne.n	800110e <st25r95_calibrate+0xea>
        switch (i - 1) {
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3b01      	subs	r3, #1
 8001094:	2b07      	cmp	r3, #7
 8001096:	f200 8089 	bhi.w	80011ac <st25r95_calibrate+0x188>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <st25r95_calibrate+0x7c>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010c1 	.word	0x080010c1
 80010a4:	080011ad 	.word	0x080011ad
 80010a8:	080010c9 	.word	0x080010c9
 80010ac:	080010d7 	.word	0x080010d7
 80010b0:	080010e5 	.word	0x080010e5
 80010b4:	080010f3 	.word	0x080010f3
 80010b8:	08001101 	.word	0x08001101
 80010bc:	080011ad 	.word	0x080011ad
          case 0:
            calibrate_data[14] = 0xFC;
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010c2:	22fc      	movs	r2, #252	; 0xfc
 80010c4:	739a      	strb	r2, [r3, #14]
            break;
 80010c6:	e071      	b.n	80011ac <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010ca:	7b9b      	ldrb	r3, [r3, #14]
 80010cc:	3340      	adds	r3, #64	; 0x40
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010d2:	739a      	strb	r2, [r3, #14]
            break;
 80010d4:	e06a      	b.n	80011ac <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	3320      	adds	r3, #32
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010e0:	739a      	strb	r2, [r3, #14]
            break;
 80010e2:	e063      	b.n	80011ac <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010e6:	7b9b      	ldrb	r3, [r3, #14]
 80010e8:	3310      	adds	r3, #16
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010ee:	739a      	strb	r2, [r3, #14]
            break;
 80010f0:	e05c      	b.n	80011ac <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	3308      	adds	r3, #8
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80010fc:	739a      	strb	r2, [r3, #14]
            break;
 80010fe:	e055      	b.n	80011ac <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001102:	7b9b      	ldrb	r3, [r3, #14]
 8001104:	3304      	adds	r3, #4
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800110a:	739a      	strb	r2, [r3, #14]
            break;
 800110c:	e04e      	b.n	80011ac <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <st25r95_calibrate+0x1b4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3302      	adds	r3, #2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d147      	bne.n	80011aa <st25r95_calibrate+0x186>
        switch (i - 1) {
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	3b01      	subs	r3, #1
 800111e:	2b07      	cmp	r3, #7
 8001120:	d844      	bhi.n	80011ac <st25r95_calibrate+0x188>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <st25r95_calibrate+0x104>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	080011ad 	.word	0x080011ad
 800112c:	08001149 	.word	0x08001149
 8001130:	08001157 	.word	0x08001157
 8001134:	08001165 	.word	0x08001165
 8001138:	08001173 	.word	0x08001173
 800113c:	08001181 	.word	0x08001181
 8001140:	0800118f 	.word	0x0800118f
 8001144:	0800119d 	.word	0x0800119d
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800114a:	7b9b      	ldrb	r3, [r3, #14]
 800114c:	3b80      	subs	r3, #128	; 0x80
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001152:	739a      	strb	r2, [r3, #14]
            break;
 8001154:	e02a      	b.n	80011ac <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001158:	7b9b      	ldrb	r3, [r3, #14]
 800115a:	3b40      	subs	r3, #64	; 0x40
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001160:	739a      	strb	r2, [r3, #14]
            break;
 8001162:	e023      	b.n	80011ac <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001166:	7b9b      	ldrb	r3, [r3, #14]
 8001168:	3b20      	subs	r3, #32
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800116e:	739a      	strb	r2, [r3, #14]
            break;
 8001170:	e01c      	b.n	80011ac <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001174:	7b9b      	ldrb	r3, [r3, #14]
 8001176:	3b10      	subs	r3, #16
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800117c:	739a      	strb	r2, [r3, #14]
            break;
 800117e:	e015      	b.n	80011ac <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001182:	7b9b      	ldrb	r3, [r3, #14]
 8001184:	3b08      	subs	r3, #8
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800118a:	739a      	strb	r2, [r3, #14]
            break;
 800118c:	e00e      	b.n	80011ac <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	3b04      	subs	r3, #4
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <st25r95_calibrate+0x1b0>)
 8001198:	739a      	strb	r2, [r3, #14]
            break;
 800119a:	e007      	b.n	80011ac <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <st25r95_calibrate+0x1b0>)
 800119e:	7b9b      	ldrb	r3, [r3, #14]
 80011a0:	3b04      	subs	r3, #4
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80011a6:	739a      	strb	r2, [r3, #14]
            break;
 80011a8:	e000      	b.n	80011ac <st25r95_calibrate+0x188>
        }
      }
 80011aa:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	f67f af3c 	bls.w	8001032 <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <st25r95_calibrate+0x1b0>)
 80011bc:	7b9a      	ldrb	r2, [r3, #14]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	709a      	strb	r2, [r3, #2]
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001c8 	.word	0x200001c8
 80011d0:	200000c8 	.word	0x200000c8
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200002cc 	.word	0x200002cc

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_MspInit+0x44>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_MspInit+0x44>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_MspInit+0x44>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x44>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_SPI_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d128      	bne.n	8001298 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23c2      	movs	r3, #194	; 0xc2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001286:	2305      	movs	r3, #5
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 fa20 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f89a 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8001300:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001304:	f000 fb7a 	bl	80019fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 f8d9 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff f899 	bl	8000498 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001374:	080035ec 	.word	0x080035ec
  ldr r2, =_sbss
 8001378:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800137c:	200002d4 	.word	0x200002d4

08001380 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f961 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff ff1a 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_InitTick+0x6c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d023      	beq.n	8001410 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_InitTick+0x70>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f96d 	bl	80016be <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d809      	bhi.n	8001404 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f937 	bl	800166a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e007      	b.n	8001414 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e004      	b.n	8001414 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e001      	b.n	8001414 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000001c 	.word	0x2000001c
 8001424:	20000014 	.word	0x20000014
 8001428:	20000018 	.word	0x20000018

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000001c 	.word	0x2000001c
 8001450:	200002d0 	.word	0x200002d0

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200002d0 	.word	0x200002d0

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000001c 	.word	0x2000001c

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff29 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff3e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff8e 	bl	80015a8 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5d 	bl	8001554 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff31 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e154      	b.n	8001992 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8146 	beq.w	800198c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d005      	beq.n	8001718 <HAL_GPIO_Init+0x40>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d130      	bne.n	800177a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 0201 	and.w	r2, r3, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b03      	cmp	r3, #3
 8001784:	d017      	beq.n	80017b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a0 	beq.w	800198c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 800184e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6613      	str	r3, [r2, #96]	; 0x60
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001864:	4a53      	ldr	r2, [pc, #332]	; (80019b4 <HAL_GPIO_Init+0x2dc>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1dc>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e008      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b4:	2307      	movs	r3, #7
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c4:	2300      	movs	r3, #0
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d6:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_GPIO_Init+0x2dc>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	f47f aea3 	bne.w	80016e8 <HAL_GPIO_Init+0x10>
  }
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	48000400 	.word	0x48000400
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	48001000 	.word	0x48001000
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd1a 	bl	8000454 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a56:	d130      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d038      	beq.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2232      	movs	r2, #50	; 0x32
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8c:	e002      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa0:	d102      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f2      	bne.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab4:	d110      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e00f      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d007      	beq.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad0:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	20000014 	.word	0x20000014
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f000 bc02 	b.w	800230c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b08:	4b96      	ldr	r3, [pc, #600]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b12:	4b94      	ldr	r3, [pc, #592]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80e4 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4c>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	f040 808b 	bne.w	8001c4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	f040 8087 	bne.w	8001c4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b40:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x64>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e3d9      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <HAL_RCC_OscConfig+0x7e>
 8001b68:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b70:	e005      	b.n	8001b7e <HAL_RCC_OscConfig+0x8a>
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d223      	bcs.n	8001bca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fd54 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e3ba      	b.n	800230c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b96:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a72      	ldr	r2, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	496d      	ldr	r1, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	4968      	ldr	r1, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	e025      	b.n	8001c16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4960      	ldr	r1, [pc, #384]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	495b      	ldr	r1, [pc, #364]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fd14 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e37a      	b.n	800230c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c16:	f000 fc81 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	4950      	ldr	r1, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a4e      	ldr	r2, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fbba 	bl	80013b4 <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d052      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	e35e      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d032      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a42      	ldr	r2, [pc, #264]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fbf7 	bl	8001454 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fbf3 	bl	8001454 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e347      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4930      	ldr	r1, [pc, #192]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	492b      	ldr	r1, [pc, #172]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbc4 	bl	8001454 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fbc0 	bl	8001454 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e314      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1dc>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d073      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x21c>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d10e      	bne.n	8001d28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d10b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d063      	beq.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d15f      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e2f1      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d106      	bne.n	8001d40 <HAL_RCC_OscConfig+0x24c>
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e025      	b.n	8001d8c <HAL_RCC_OscConfig+0x298>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d114      	bne.n	8001d74 <HAL_RCC_OscConfig+0x280>
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a02      	ldr	r2, [pc, #8]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x298>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	080035a4 	.word	0x080035a4
 8001d6c:	20000014 	.word	0x20000014
 8001d70:	20000018 	.word	0x20000018
 8001d74:	4ba0      	ldr	r3, [pc, #640]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a9f      	ldr	r2, [pc, #636]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b9d      	ldr	r3, [pc, #628]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a9c      	ldr	r2, [pc, #624]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fb5e 	bl	8001454 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fb5a 	bl	8001454 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e2ae      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2a8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb4a 	bl	8001454 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fb46 	bl	8001454 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e29a      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2d0>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d060      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x310>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d119      	bne.n	8001e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d116      	bne.n	8001e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e04:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_OscConfig+0x328>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e277      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	4973      	ldr	r1, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e30:	e040      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d023      	beq.n	8001e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff fb05 	bl	8001454 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fb01 	bl	8001454 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e255      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e60:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	495f      	ldr	r1, [pc, #380]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e018      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5c      	ldr	r2, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fae1 	bl	8001454 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fadd 	bl	8001454 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e231      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	4a4a      	ldr	r2, [pc, #296]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fabc 	bl	8001454 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fab8 	bl	8001454 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e20c      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x3ec>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f08:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff fa9f 	bl	8001454 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fa9b 	bl	8001454 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1ef      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f2c:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80a6 	beq.w	8002094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	; 0x58
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d118      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fa62 	bl	8001454 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7ff fa5e 	bl	8001454 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1b2      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4d8>
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fca:	e029      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d115      	bne.n	8002000 <HAL_RCC_OscConfig+0x50c>
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	4b9a      	ldr	r3, [pc, #616]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a99      	ldr	r2, [pc, #612]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002010:	4b96      	ldr	r3, [pc, #600]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a95      	ldr	r2, [pc, #596]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d016      	beq.n	8002056 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff fa14 	bl	8001454 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff fa10 	bl	8001454 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e162      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ed      	beq.n	8002030 <HAL_RCC_OscConfig+0x53c>
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff f9fd 	bl	8001454 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff f9f9 	bl	8001454 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e14b      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002074:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ed      	bne.n	800205e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b78      	ldr	r3, [pc, #480]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a77      	ldr	r2, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80020aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ae:	4a6f      	ldr	r2, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f9cc 	bl	8001454 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c0:	f7ff f9c8 	bl	8001454 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e11c      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80020d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x5cc>
 80020e0:	e01b      	b.n	800211a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020e2:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f9af 	bl	8001454 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fa:	f7ff f9ab 	bl	8001454 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0ff      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800210e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80f3 	beq.w	800230a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	2b02      	cmp	r3, #2
 800212a:	f040 80c9 	bne.w	80022c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800212e:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0203 	and.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	429a      	cmp	r2, r3
 8002140:	d12c      	bne.n	800219c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	3b01      	subs	r3, #1
 800214e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d123      	bne.n	800219c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d11b      	bne.n	800219c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d113      	bne.n	800219c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	3b01      	subs	r3, #1
 8002182:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d109      	bne.n	800219c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	3b01      	subs	r3, #1
 8002196:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d06b      	beq.n	8002274 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d062      	beq.n	8002268 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0ac      	b.n	800230c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80021b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021be:	f7ff f949 	bl	8001454 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff f945 	bl	8001454 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e099      	b.n	800230c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x778>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCC_OscConfig+0x77c>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f4:	3a01      	subs	r2, #1
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021fe:	0212      	lsls	r2, r2, #8
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002206:	0852      	lsrs	r2, r2, #1
 8002208:	3a01      	subs	r2, #1
 800220a:	0552      	lsls	r2, r2, #21
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	3a01      	subs	r2, #1
 8002216:	0652      	lsls	r2, r2, #25
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800221e:	06d2      	lsls	r2, r2, #27
 8002220:	430a      	orrs	r2, r1
 8002222:	4912      	ldr	r1, [pc, #72]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002224:	4313      	orrs	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_OscConfig+0x778>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002240:	f7ff f908 	bl	8001454 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff f904 	bl	8001454 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e058      	b.n	800230c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_RCC_OscConfig+0x778>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002266:	e050      	b.n	800230a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04f      	b.n	800230c <HAL_RCC_OscConfig+0x818>
 800226c:	40021000 	.word	0x40021000
 8002270:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d144      	bne.n	800230a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002298:	f7ff f8dc 	bl	8001454 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f8d8 	bl	8001454 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e02c      	b.n	800230c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x7ac>
 80022be:	e024      	b.n	800230a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d01f      	beq.n	8002306 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff f8bf 	bl	8001454 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff f8bb 	bl	8001454 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <HAL_RCC_OscConfig+0x820>)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x824>)
 8002300:	4013      	ands	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e001      	b.n	800230a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	feeefffc 	.word	0xfeeefffc

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0e7      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4970      	ldr	r1, [pc, #448]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b6e      	ldr	r3, [pc, #440]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0cf      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	429a      	cmp	r2, r3
 800237a:	d908      	bls.n	800238e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4960      	ldr	r1, [pc, #384]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d04c      	beq.n	8002434 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b5a      	ldr	r3, [pc, #360]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d121      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0a6      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d115      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e09a      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e08e      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e086      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4943      	ldr	r1, [pc, #268]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7ff f826 	bl	8001454 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7ff f822 	bl	8001454 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e06e      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	429a      	cmp	r2, r3
 800244e:	d208      	bcs.n	8002462 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	492b      	ldr	r1, [pc, #172]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d210      	bcs.n	8002492 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 0207 	bic.w	r2, r3, #7
 8002478:	4923      	ldr	r1, [pc, #140]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCC_ClockConfig+0x1ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e036      	b.n	8002500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4910      	ldr	r1, [pc, #64]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d0:	f000 f824 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	490b      	ldr	r1, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1f4>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1fc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ff5d 	bl	80013b4 <HAL_InitTick>
 80024fa:	4603      	mov	r3, r0
 80024fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	080035a4 	.word	0x080035a4
 8002514:	20000014 	.word	0x20000014
 8002518:	20000018 	.word	0x20000018

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d121      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11e      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d102      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e004      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d134      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xac>
 80025c0:	e005      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 80025c4:	617b      	str	r3, [r7, #20]
      break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	fb03 f202 	mul.w	r2, r3, r2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0e5b      	lsrs	r3, r3, #25
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	3301      	adds	r3, #1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002614:	69bb      	ldr	r3, [r7, #24]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	080035b4 	.word	0x080035b4
 800262c:	00f42400 	.word	0x00f42400
 8002630:	007a1200 	.word	0x007a1200

08002634 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800264c:	f7ff f9ee 	bl	8001a2c <HAL_PWREx_GetVoltageRange>
 8002650:	6178      	str	r0, [r7, #20]
 8002652:	e014      	b.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	; 0x58
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800266c:	f7ff f9de 	bl	8001a2c <HAL_PWREx_GetVoltageRange>
 8002670:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002684:	d10b      	bne.n	800269e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d919      	bls.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2ba0      	cmp	r3, #160	; 0xa0
 8002690:	d902      	bls.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e013      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e010      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d902      	bls.n	80026aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a4:	2303      	movs	r3, #3
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e00a      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d102      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b0:	2302      	movs	r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e004      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d101      	bne.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 0207 	bic.w	r2, r3, #7
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e095      	b.n	8002832 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002716:	d009      	beq.n	800272c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
 800271e:	e005      	b.n	800272c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fd6c 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800276c:	d902      	bls.n	8002774 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e002      	b.n	800277a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002778:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002782:	d007      	beq.n	8002794 <HAL_SPI_Init+0xa0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800278c:	d002      	beq.n	8002794 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	ea42 0103 	orr.w	r1, r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	f003 0204 	and.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_SPI_Transmit+0x22>
 8002858:	2302      	movs	r3, #2
 800285a:	e158      	b.n	8002b0e <HAL_SPI_Transmit+0x2d4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002864:	f7fe fdf6 	bl	8001454 <HAL_GetTick>
 8002868:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800287e:	e13d      	b.n	8002afc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0x52>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002890:	e134      	b.n	8002afc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2203      	movs	r2, #3
 8002896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028dc:	d10f      	bne.n	80028fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b40      	cmp	r3, #64	; 0x40
 800290a:	d007      	beq.n	800291c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002924:	d94b      	bls.n	80029be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0xfa>
 800292e:	8afb      	ldrh	r3, [r7, #22]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13e      	bne.n	80029b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002958:	e02b      	b.n	80029b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d112      	bne.n	800298e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800298c:	e011      	b.n	80029b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298e:	f7fe fd61 	bl	8001454 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d803      	bhi.n	80029a6 <HAL_SPI_Transmit+0x16c>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d102      	bne.n	80029ac <HAL_SPI_Transmit+0x172>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b0:	e0a4      	b.n	8002afc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ce      	bne.n	800295a <HAL_SPI_Transmit+0x120>
 80029bc:	e07c      	b.n	8002ab8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Transmit+0x192>
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d170      	bne.n	8002aae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d912      	bls.n	80029fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b02      	subs	r3, #2
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029fa:	e058      	b.n	8002aae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a22:	e044      	b.n	8002aae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d12b      	bne.n	8002a8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d912      	bls.n	8002a62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b02      	subs	r3, #2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a60:	e025      	b.n	8002aae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a88:	e011      	b.n	8002aae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a8a:	f7fe fce3 	bl	8001454 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d803      	bhi.n	8002aa2 <HAL_SPI_Transmit+0x268>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d102      	bne.n	8002aa8 <HAL_SPI_Transmit+0x26e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aac:	e026      	b.n	8002afc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1b5      	bne.n	8002a24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fce3 	bl	8003488 <SPI_EndRxTxTransaction>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e000      	b.n	8002afc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af02      	add	r7, sp, #8
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b32:	d112      	bne.n	8002b5a <HAL_SPI_Receive+0x44>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f910 	bl	8002d76 <HAL_SPI_TransmitReceive>
 8002b56:	4603      	mov	r3, r0
 8002b58:	e109      	b.n	8002d6e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_SPI_Receive+0x52>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e102      	b.n	8002d6e <HAL_SPI_Receive+0x258>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b70:	f7fe fc70 	bl	8001454 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b86:	e0e9      	b.n	8002d5c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_Receive+0x7e>
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b98:	e0e0      	b.n	8002d5c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be4:	d908      	bls.n	8002bf8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	e007      	b.n	8002c08 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d10f      	bne.n	8002c32 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d007      	beq.n	8002c50 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c58:	d867      	bhi.n	8002d2a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c5a:	e030      	b.n	8002cbe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d117      	bne.n	8002c9a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f103 020c 	add.w	r2, r3, #12
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	7812      	ldrb	r2, [r2, #0]
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c98:	e011      	b.n	8002cbe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9a:	f7fe fbdb 	bl	8001454 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d803      	bhi.n	8002cb2 <HAL_SPI_Receive+0x19c>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d102      	bne.n	8002cb8 <HAL_SPI_Receive+0x1a2>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cbc:	e04e      	b.n	8002d5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1c8      	bne.n	8002c5c <HAL_SPI_Receive+0x146>
 8002cca:	e034      	b.n	8002d36 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d115      	bne.n	8002d06 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002d04:	e011      	b.n	8002d2a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d06:	f7fe fba5 	bl	8001454 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d803      	bhi.n	8002d1e <HAL_SPI_Receive+0x208>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_Receive+0x20e>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d28:	e018      	b.n	8002d5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ca      	bne.n	8002ccc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fb4c 	bl	80033d8 <SPI_EndRxTransaction>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
 8002d58:	e000      	b.n	8002d5c <HAL_SPI_Receive+0x246>
  }

error :
 8002d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	; 0x28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x26>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e1fb      	b.n	8003194 <HAL_SPI_TransmitReceive+0x41e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da4:	f7fe fb56 	bl	8001454 <HAL_GetTick>
 8002da8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002db0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dc0:	7efb      	ldrb	r3, [r7, #27]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d00e      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x6e>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x66>
 8002dd6:	7efb      	ldrb	r3, [r7, #27]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d003      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002de2:	e1cd      	b.n	8003180 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x80>
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dfc:	e1c0      	b.n	8003180 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	887a      	ldrh	r2, [r7, #2]
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e54:	d802      	bhi.n	8002e5c <HAL_SPI_TransmitReceive+0xe6>
 8002e56:	8a3b      	ldrh	r3, [r7, #16]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d908      	bls.n	8002e6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	e007      	b.n	8002e7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d007      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ea4:	d97c      	bls.n	8002fa0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x13e>
 8002eae:	8a7b      	ldrh	r3, [r7, #18]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d169      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	881a      	ldrh	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed8:	e056      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d11b      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x1aa>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0x1aa>
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d113      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d11c      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x1f2>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	b292      	uxth	r2, r2
 8002f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f68:	f7fe fa74 	bl	8001454 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d807      	bhi.n	8002f88 <HAL_SPI_TransmitReceive+0x212>
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d003      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f86:	e0fb      	b.n	8003180 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1a3      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x164>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d19d      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x164>
 8002f9e:	e0df      	b.n	8003160 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_SPI_TransmitReceive+0x23a>
 8002fa8:	8a7b      	ldrh	r3, [r7, #18]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 80cb 	bne.w	8003146 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d912      	bls.n	8002fe0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b02      	subs	r3, #2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e0b2      	b.n	8003146 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003006:	e09e      	b.n	8003146 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d134      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x30a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x30a>
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	2b01      	cmp	r3, #1
 8003024:	d12c      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d912      	bls.n	8003056 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b02      	subs	r3, #2
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003054:	e012      	b.n	800307c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d148      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x3aa>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d042      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d923      	bls.n	80030ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	b292      	uxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b02      	subs	r3, #2
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d81f      	bhi.n	800311c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e016      	b.n	800311c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f103 020c 	add.w	r2, r3, #12
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003120:	f7fe f998 	bl	8001454 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312c:	429a      	cmp	r2, r3
 800312e:	d803      	bhi.n	8003138 <HAL_SPI_TransmitReceive+0x3c2>
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d102      	bne.n	800313e <HAL_SPI_TransmitReceive+0x3c8>
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003144:	e01c      	b.n	8003180 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f af5b 	bne.w	8003008 <HAL_SPI_TransmitReceive+0x292>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f47f af54 	bne.w	8003008 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f98f 	bl	8003488 <SPI_EndRxTxTransaction>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	661a      	str	r2, [r3, #96]	; 0x60
 800317c:	e000      	b.n	8003180 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800317e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003194:	4618      	mov	r0, r3
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031ac:	f7fe f952 	bl	8001454 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031bc:	f7fe f94a 	bl	8001454 <HAL_GetTick>
 80031c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	015b      	lsls	r3, r3, #5
 80031c8:	0d1b      	lsrs	r3, r3, #20
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d2:	e054      	b.n	800327e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d050      	beq.n	800327e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031dc:	f7fe f93a 	bl	8001454 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d902      	bls.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13d      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320a:	d111      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d004      	beq.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d107      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003238:	d10f      	bne.n	800325a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e017      	b.n	800329e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d19b      	bne.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000014 	.word	0x20000014

080032ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032be:	f7fe f8c9 	bl	8001454 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032ce:	f7fe f8c1 	bl	8001454 <HAL_GetTick>
 80032d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	0d1b      	lsrs	r3, r3, #20
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f4:	e060      	b.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032fc:	d107      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800330c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d050      	beq.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003316:	f7fe f89d 	bl	8001454 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	d902      	bls.n	800332c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d13d      	bne.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800333a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003344:	d111      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334e:	d004      	beq.n	800335a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d107      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d10f      	bne.n	8003394 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003392:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e010      	b.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d196      	bne.n	80032f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000014 	.word	0x20000014

080033d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ec:	d111      	bne.n	8003412 <SPI_EndRxTransaction+0x3a>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d004      	beq.n	8003402 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003400:	d107      	bne.n	8003412 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2200      	movs	r2, #0
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff febd 	bl	800319c <SPI_WaitFlagStateUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e023      	b.n	8003480 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003440:	d11d      	bne.n	800347e <SPI_EndRxTransaction+0xa6>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344a:	d004      	beq.n	8003456 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d113      	bne.n	800347e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ff22 	bl	80032ac <SPI_WaitFifoStateUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e000      	b.n	8003480 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff03 	bl	80032ac <SPI_WaitFifoStateUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e027      	b.n	800350c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fe68 	bl	800319c <SPI_WaitFlagStateUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e014      	b.n	800350c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fedc 	bl	80032ac <SPI_WaitFifoStateUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e000      	b.n	800350c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4d0d      	ldr	r5, [pc, #52]	; (800354c <__libc_init_array+0x38>)
 8003518:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	2600      	movs	r6, #0
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	4d0b      	ldr	r5, [pc, #44]	; (8003554 <__libc_init_array+0x40>)
 8003526:	4c0c      	ldr	r4, [pc, #48]	; (8003558 <__libc_init_array+0x44>)
 8003528:	f000 f82e 	bl	8003588 <_init>
 800352c:	1b64      	subs	r4, r4, r5
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	2600      	movs	r6, #0
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	080035e4 	.word	0x080035e4
 8003550:	080035e4 	.word	0x080035e4
 8003554:	080035e4 	.word	0x080035e4
 8003558:	080035e8 	.word	0x080035e8

0800355c <memcpy>:
 800355c:	440a      	add	r2, r1
 800355e:	4291      	cmp	r1, r2
 8003560:	f100 33ff 	add.w	r3, r0, #4294967295
 8003564:	d100      	bne.n	8003568 <memcpy+0xc>
 8003566:	4770      	bx	lr
 8003568:	b510      	push	{r4, lr}
 800356a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800356e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003572:	4291      	cmp	r1, r2
 8003574:	d1f9      	bne.n	800356a <memcpy+0xe>
 8003576:	bd10      	pop	{r4, pc}

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
