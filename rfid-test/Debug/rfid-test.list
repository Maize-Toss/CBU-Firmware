
rfid-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003064  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800323c  0800323c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800323c  0800323c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000020  08003264  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003264  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d9f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001637  00000000  00000000  00027def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00029428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00029c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b9c  00000000  00000000  0002a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088e0  00000000  00000000  0004bf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc6a1  00000000  00000000  0005486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120f0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002070  00000000  00000000  00120f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031e0 	.word	0x080031e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080031e0 	.word	0x080031e0

080001d4 <reader_irq_pulse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2110      	movs	r1, #16
 80001dc:	4807      	ldr	r0, [pc, #28]	; (80001fc <reader_irq_pulse+0x28>)
 80001de:	f001 fa21 	bl	8001624 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 ff6e 	bl	80010c4 <HAL_Delay>
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <reader_irq_pulse+0x28>)
 80001ee:	f001 fa19 	bl	8001624 <HAL_GPIO_WritePin>
  HAL_Delay(8);
 80001f2:	2008      	movs	r0, #8
 80001f4:	f000 ff66 	bl	80010c4 <HAL_Delay>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	48000800 	.word	0x48000800

08000200 <reader_nss>:

void reader_nss(uint8_t enable) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	bf0c      	ite	eq
 8000210:	2301      	moveq	r3, #1
 8000212:	2300      	movne	r3, #0
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f001 fa01 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	b29a      	uxth	r2, r3
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	6879      	ldr	r1, [r7, #4]
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <reader_tx+0x28>)
 8000242:	f002 f926 	bl	8002492 <HAL_SPI_Transmit>
 8000246:	4603      	mov	r3, r0
 8000248:	60fb      	str	r3, [r7, #12]
  return ret;
 800024a:	68fb      	ldr	r3, [r7, #12]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000003c 	.word	0x2000003c

08000258 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b29a      	uxth	r2, r3
 8000266:	f04f 33ff 	mov.w	r3, #4294967295
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <reader_rx+0x28>)
 800026e:	f002 fa7e 	bl	800276e <HAL_SPI_Receive>
 8000272:	4603      	mov	r3, r0
 8000274:	60fb      	str	r3, [r7, #12]
  return ret;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000003c 	.word	0x2000003c

08000284 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
  if (pin == RFID_NIRQ_OUT_PIN) {
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000294:	d102      	bne.n	800029c <HAL_GPIO_EXTI_Callback+0x18>
    reader_handler.irq_flag = 1;
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000298:	2201      	movs	r2, #1
 800029a:	745a      	strb	r2, [r3, #17]
  }
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	200000a0 	.word	0x200000a0

080002ac <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(uid[0]);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 ff03 	bl	80010c4 <HAL_Delay>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 fe85 	bl	8000fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f000 f83e 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d4:	f000 f8c0 	bl	8000458 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d8:	f000 f880 	bl	80003dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_14443A;
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <main+0x70>)
 80002de:	2202      	movs	r2, #2
 80002e0:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <main+0x70>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <main+0x70>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <main+0x70>)
 80002f0:	2258      	movs	r2, #88	; 0x58
 80002f2:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <main+0x70>)
 80002f6:	22d1      	movs	r2, #209	; 0xd1
 80002f8:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0x70>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <main+0x70>)
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <main+0x74>)
 8000304:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <main+0x70>)
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <main+0x78>)
 800030a:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <main+0x70>)
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <main+0x7c>)
 8000310:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <main+0x70>)
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <main+0x80>)
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <main+0x70>)
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <main+0x84>)
 800031c:	615a      	str	r2, [r3, #20]

  st25r95_init(&reader_handler);
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <main+0x70>)
 8000320:	f000 f9be 	bl	80006a0 <st25r95_init>
  st25r95_calibrate(&reader_handler);
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <main+0x70>)
 8000326:	f000 fca9 	bl	8000c7c <st25r95_calibrate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  st25r95_idle(&reader_handler);
 800032a:	4803      	ldr	r0, [pc, #12]	; (8000338 <main+0x70>)
 800032c:	f000 fc50 	bl	8000bd0 <st25r95_idle>
  while (1) {
    st25r95_service(&reader_handler);
 8000330:	4801      	ldr	r0, [pc, #4]	; (8000338 <main+0x70>)
 8000332:	f000 f94f 	bl	80005d4 <st25r95_service>
 8000336:	e7fb      	b.n	8000330 <main+0x68>
 8000338:	200000a0 	.word	0x200000a0
 800033c:	08000201 	.word	0x08000201
 8000340:	0800022d 	.word	0x0800022d
 8000344:	08000259 	.word	0x08000259
 8000348:	080001d5 	.word	0x080001d5
 800034c:	080002ad 	.word	0x080002ad

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2244      	movs	r2, #68	; 0x44
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 ff36 	bl	80031d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000376:	f001 f993 	bl	80016a0 <HAL_PWREx_ControlVoltageScaling>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000380:	f000 f8f4 	bl	800056c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000384:	2310      	movs	r3, #16
 8000386:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000390:	2360      	movs	r3, #96	; 0x60
 8000392:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4618      	mov	r0, r3
 800039e:	f001 f9d5 	bl	800174c <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003a8:	f000 f8e0 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 fdd5 	bl	8001f74 <HAL_RCC_ClockConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003d0:	f000 f8cc 	bl	800056c <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3758      	adds	r7, #88	; 0x58
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_SPI1_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <MX_SPI1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_SPI1_Init+0x74>)
 80003e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_SPI1_Init+0x74>)
 80003f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_SPI1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_SPI1_Init+0x74>)
 800040a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_SPI1_Init+0x74>)
 8000412:	2210      	movs	r2, #16
 8000414:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_SPI1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_SPI1_Init+0x74>)
 800042a:	2207      	movs	r2, #7
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_SPI1_Init+0x74>)
 8000436:	2208      	movs	r2, #8
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_SPI1_Init+0x74>)
 800043c:	f001 ff86 	bl	800234c <HAL_SPI_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f891 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000003c 	.word	0x2000003c
 8000454:	40013000 	.word	0x40013000

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <MX_GPIO_Init+0x108>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a3b      	ldr	r2, [pc, #236]	; (8000560 <MX_GPIO_Init+0x108>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b39      	ldr	r3, [pc, #228]	; (8000560 <MX_GPIO_Init+0x108>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b36      	ldr	r3, [pc, #216]	; (8000560 <MX_GPIO_Init+0x108>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a35      	ldr	r2, [pc, #212]	; (8000560 <MX_GPIO_Init+0x108>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b33      	ldr	r3, [pc, #204]	; (8000560 <MX_GPIO_Init+0x108>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b30      	ldr	r3, [pc, #192]	; (8000560 <MX_GPIO_Init+0x108>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <MX_GPIO_Init+0x108>)
 80004a4:	f043 0302 	orr.w	r3, r3, #2
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b2d      	ldr	r3, [pc, #180]	; (8000560 <MX_GPIO_Init+0x108>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0302 	and.w	r3, r3, #2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2110      	movs	r1, #16
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004be:	f001 f8b1 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NIRQ_IN_GPIO_Port, NIRQ_IN_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2110      	movs	r1, #16
 80004c6:	4827      	ldr	r0, [pc, #156]	; (8000564 <MX_GPIO_Init+0x10c>)
 80004c8:	f001 f8ac 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2130      	movs	r1, #48	; 0x30
 80004d0:	4825      	ldr	r0, [pc, #148]	; (8000568 <MX_GPIO_Init+0x110>)
 80004d2:	f001 f8a7 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 80004d6:	2310      	movs	r3, #16
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f000 ff1e 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 80004f4:	2310      	movs	r3, #16
 80004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	4816      	ldr	r0, [pc, #88]	; (8000564 <MX_GPIO_Init+0x10c>)
 800050c:	f000 ff10 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8000510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000516:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4810      	ldr	r0, [pc, #64]	; (8000568 <MX_GPIO_Init+0x110>)
 8000528:	f000 ff02 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800052c:	2330      	movs	r3, #48	; 0x30
 800052e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <MX_GPIO_Init+0x110>)
 8000544:	f000 fef4 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2028      	movs	r0, #40	; 0x28
 800054e:	f000 feb8 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000552:	2028      	movs	r0, #40	; 0x28
 8000554:	f000 fed1 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800
 8000568:	48000400 	.word	0x48000400

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <st25r95_spi_tx+0x24>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <st25r95_spi_tx+0x28>)
 800058c:	4798      	blx	r3
  tx_len = 0;
 800058e:	4b03      	ldr	r3, [pc, #12]	; (800059c <st25r95_spi_tx+0x24>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001c8 	.word	0x200001c8
 80005a0:	200000c8 	.word	0x200000c8

080005a4 <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <st25r95_spi_byte+0x28>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80005b6:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <st25r95_spi_byte+0x2c>)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffdb 	bl	8000578 <st25r95_spi_tx>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001c8 	.word	0x200001c8
 80005d0:	200000c8 	.word	0x200000c8

080005d4 <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7c5b      	ldrb	r3, [r3, #17]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d118      	bne.n	8000618 <st25r95_service+0x44>
    handler->irq_flag = 0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	745a      	strb	r2, [r3, #17]
    if (handler->state == ST25_STATE_IDLE) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d111      	bne.n	8000618 <st25r95_service+0x44>
      st25r95_init(handler);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f853 	bl	80006a0 <st25r95_init>
      if (st25r95_14443A_detect(handler)) {
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f96c 	bl	80008d8 <st25r95_14443A_detect>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <st25r95_service+0x3e>
        handler->callback(handler->uid);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	3207      	adds	r2, #7
 800060e:	4610      	mov	r0, r2
 8000610:	4798      	blx	r3
      }
      st25r95_idle(handler);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 fadc 	bl	8000bd0 <st25r95_idle>
    }
  }
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8000628:	bf00      	nop
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7c5b      	ldrb	r3, [r3, #17]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0fa      	beq.n	800062a <st25r95_response+0xa>
  handler->irq_flag = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	2001      	movs	r0, #1
 8000640:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 8000642:	2102      	movs	r1, #2
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff ffad 	bl	80005a4 <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	2101      	movs	r1, #1
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <st25r95_response+0x74>)
 8000652:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <st25r95_response+0x74>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b55      	cmp	r3, #85	; 0x55
 800065a:	d105      	bne.n	8000668 <st25r95_response+0x48>
    handler->nss(0);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	2000      	movs	r0, #0
 8000662:	4798      	blx	r3
    return rx_data;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <st25r95_response+0x74>)
 8000666:	e011      	b.n	800068c <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <st25r95_response+0x78>)
 800066e:	2101      	movs	r1, #1
 8000670:	4610      	mov	r0, r2
 8000672:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6a1b      	ldr	r3, [r3, #32]
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <st25r95_response+0x7c>)
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <st25r95_response+0x74>)
 800067c:	7852      	ldrb	r2, [r2, #1]
 800067e:	4611      	mov	r1, r2
 8000680:	4798      	blx	r3
  handler->nss(0);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	2000      	movs	r0, #0
 8000688:	4798      	blx	r3
  return rx_data;
 800068a:	4b02      	ldr	r3, [pc, #8]	; (8000694 <st25r95_response+0x74>)
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001cc 	.word	0x200001cc
 8000698:	200001cd 	.word	0x200001cd
 800069c:	200001ce 	.word	0x200001ce

080006a0 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f823 	bl	80006f4 <st25r95_reset>
  handler->irq_pulse();
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d110      	bne.n	80006e4 <st25r95_init+0x44>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f85a 	bl	800077c <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f890 	bl	80007f4 <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	461a      	mov	r2, r3
 80006da:	2101      	movs	r1, #1
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f8c1 	bl	8000864 <st25r95_write_ARC>
      break;
 80006e2:	e003      	b.n	80006ec <st25r95_init+0x4c>
    default:
      st25r95_off(handler);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f819 	bl	800071c <st25r95_off>
      break;
 80006ea:	bf00      	nop
  }
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	2001      	movs	r0, #1
 8000702:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8000704:	2101      	movs	r1, #1
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff4c 	bl	80005a4 <st25r95_spi_byte>
  handler->nss(0);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	2000      	movs	r0, #0
 8000712:	4798      	blx	r3
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <st25r95_off+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <st25r95_off+0x58>)
 800072c:	2202      	movs	r2, #2
 800072e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <st25r95_off+0x58>)
 8000732:	2202      	movs	r2, #2
 8000734:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <st25r95_off+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <st25r95_off+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <st25r95_off+0x5c>)
 8000744:	2205      	movs	r2, #5
 8000746:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	2001      	movs	r0, #1
 800074e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff11 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	2000      	movs	r0, #0
 800075c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff5e 	bl	8000620 <st25r95_response>
 8000764:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	781b      	ldrb	r3, [r3, #0]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000c8 	.word	0x200000c8
 8000778:	200001c8 	.word	0x200001c8

0800077c <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <st25r95_14443A+0x70>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <st25r95_14443A+0x70>)
 800078c:	2202      	movs	r2, #2
 800078e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <st25r95_14443A+0x70>)
 8000792:	2202      	movs	r2, #2
 8000794:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <st25r95_14443A+0x70>)
 8000798:	2202      	movs	r2, #2
 800079a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	78db      	ldrb	r3, [r3, #3]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	b25a      	sxtb	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <st25r95_14443A+0x70>)
 80007b4:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <st25r95_14443A+0x74>)
 80007b8:	2205      	movs	r2, #5
 80007ba:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	2001      	movs	r0, #1
 80007c2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fed7 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	2000      	movs	r0, #0
 80007d0:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2202      	movs	r2, #2
 80007d6:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff21 	bl	8000620 <st25r95_response>
 80007de:	60f8      	str	r0, [r7, #12]
  return res[0];
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	781b      	ldrb	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000c8 	.word	0x200000c8
 80007f0:	200001c8 	.word	0x200001c8

080007f4 <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <st25r95_write_timerw+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <st25r95_write_timerw+0x68>)
 8000808:	2209      	movs	r2, #9
 800080a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <st25r95_write_timerw+0x68>)
 800080e:	2204      	movs	r2, #4
 8000810:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <st25r95_write_timerw+0x68>)
 8000814:	223a      	movs	r2, #58	; 0x3a
 8000816:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <st25r95_write_timerw+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <st25r95_write_timerw+0x68>)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <st25r95_write_timerw+0x68>)
 8000826:	2204      	movs	r2, #4
 8000828:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <st25r95_write_timerw+0x6c>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	2001      	movs	r0, #1
 8000836:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fe9d 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	2000      	movs	r0, #0
 8000844:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff feea 	bl	8000620 <st25r95_response>
 800084c:	60f8      	str	r0, [r7, #12]
  return res[0];
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	781b      	ldrb	r3, [r3, #0]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000c8 	.word	0x200000c8
 8000860:	200001c8 	.word	0x200001c8

08000864 <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
 8000870:	4613      	mov	r3, r2
 8000872:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <st25r95_write_ARC+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <st25r95_write_ARC+0x6c>)
 800087c:	2209      	movs	r2, #9
 800087e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <st25r95_write_ARC+0x6c>)
 8000882:	2204      	movs	r2, #4
 8000884:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <st25r95_write_ARC+0x6c>)
 8000888:	2268      	movs	r2, #104	; 0x68
 800088a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <st25r95_write_ARC+0x6c>)
 800088e:	2201      	movs	r2, #1
 8000890:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <st25r95_write_ARC+0x6c>)
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <st25r95_write_ARC+0x6c>)
 800089a:	78bb      	ldrb	r3, [r7, #2]
 800089c:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <st25r95_write_ARC+0x70>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	2001      	movs	r0, #1
 80008aa:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fe63 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	2000      	movs	r0, #0
 80008b8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff feb0 	bl	8000620 <st25r95_response>
 80008c0:	60f8      	str	r0, [r7, #12]
  return res[0];
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	781b      	ldrb	r3, [r3, #0]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200001c8 	.word	0x200001c8

080008d8 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af04      	add	r7, sp, #16
 80008de:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 80008e0:	23ff      	movs	r3, #255	; 0xff
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f883 	bl	8000a00 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 80008fa:	7d3b      	ldrb	r3, [r7, #20]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d101      	bne.n	8000904 <st25r95_14443A_detect+0x2c>
 8000900:	2300      	movs	r3, #0
 8000902:	e078      	b.n	80009f6 <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 8000904:	7d3b      	ldrb	r3, [r7, #20]
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <st25r95_14443A_detect+0x3a>
    return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e071      	b.n	80009f6 <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8000912:	7d3b      	ldrb	r3, [r7, #20]
 8000914:	099b      	lsrs	r3, r3, #6
 8000916:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	77fb      	strb	r3, [r7, #31]
 800091c:	e053      	b.n	80009c6 <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 800091e:	23ff      	movs	r3, #255	; 0xff
 8000920:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8000922:	f107 0214 	add.w	r2, r7, #20
 8000926:	7ffb      	ldrb	r3, [r7, #31]
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f8a4 	bl	8000a78 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8000930:	7d3b      	ldrb	r3, [r7, #20]
 8000932:	2bff      	cmp	r3, #255	; 0xff
 8000934:	d101      	bne.n	800093a <st25r95_14443A_detect+0x62>
 8000936:	2300      	movs	r3, #0
 8000938:	e05d      	b.n	80009f6 <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 800093a:	7d3a      	ldrb	r2, [r7, #20]
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	4053      	eors	r3, r2
 8000940:	b2da      	uxtb	r2, r3
 8000942:	7dbb      	ldrb	r3, [r7, #22]
 8000944:	4053      	eors	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7e3b      	ldrb	r3, [r7, #24]
 8000950:	429a      	cmp	r2, r3
 8000952:	d001      	beq.n	8000958 <st25r95_14443A_detect+0x80>
 8000954:	2300      	movs	r3, #0
 8000956:	e04e      	b.n	80009f6 <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	7d3a      	ldrb	r2, [r7, #20]
 800095e:	3320      	adds	r3, #32
 8000960:	443b      	add	r3, r7
 8000962:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	3301      	adds	r3, #1
 800096c:	7d7a      	ldrb	r2, [r7, #21]
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	7dba      	ldrb	r2, [r7, #22]
 800097e:	3320      	adds	r3, #32
 8000980:	443b      	add	r3, r7
 8000982:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 8000986:	7ffb      	ldrb	r3, [r7, #31]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	3303      	adds	r3, #3
 800098c:	7dfa      	ldrb	r2, [r7, #23]
 800098e:	3320      	adds	r3, #32
 8000990:	443b      	add	r3, r7
 8000992:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 8000996:	7d3d      	ldrb	r5, [r7, #20]
 8000998:	7d7b      	ldrb	r3, [r7, #21]
 800099a:	7dba      	ldrb	r2, [r7, #22]
 800099c:	7df9      	ldrb	r1, [r7, #23]
 800099e:	f107 0414 	add.w	r4, r7, #20
 80009a2:	7ff8      	ldrb	r0, [r7, #31]
 80009a4:	9102      	str	r1, [sp, #8]
 80009a6:	9201      	str	r2, [sp, #4]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	462b      	mov	r3, r5
 80009ac:	4622      	mov	r2, r4
 80009ae:	4601      	mov	r1, r0
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f8a7 	bl	8000b04 <st25r95_14443A_select>
    if (data[0] & 0x4)
 80009b6:	7d3b      	ldrb	r3, [r7, #20]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	3301      	adds	r3, #1
 80009c4:	77fb      	strb	r3, [r7, #31]
 80009c6:	7fba      	ldrb	r2, [r7, #30]
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d2a7      	bcs.n	800091e <st25r95_14443A_detect+0x46>
 80009ce:	e000      	b.n	80009d2 <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 80009d0:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3307      	adds	r3, #7
 80009d6:	220a      	movs	r2, #10
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fbf8 	bl	80031d0 <memset>
  memcpy(handler->uid, UID, 10);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3307      	adds	r3, #7
 80009e4:	461a      	mov	r2, r3
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	cb03      	ldmia	r3!, {r0, r1}
 80009ec:	6010      	str	r0, [r2, #0]
 80009ee:	6051      	str	r1, [r2, #4]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	8113      	strh	r3, [r2, #8]
  return 1;
 80009f4:	2301      	movs	r3, #1
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a00 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <st25r95_14443A_REQA+0x70>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <st25r95_14443A_REQA+0x70>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <st25r95_14443A_REQA+0x70>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <st25r95_14443A_REQA+0x70>)
 8000a1e:	2226      	movs	r2, #38	; 0x26
 8000a20:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <st25r95_14443A_REQA+0x70>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <st25r95_14443A_REQA+0x74>)
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	2001      	movs	r0, #1
 8000a34:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fd9e 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	2000      	movs	r0, #0
 8000a42:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fdeb 	bl	8000620 <st25r95_response>
 8000a4a:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b80      	cmp	r3, #128	; 0x80
 8000a52:	d109      	bne.n	8000a68 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	1c99      	adds	r1, r3, #2
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	f002 fba7 	bl	80031b4 <memcpy>
 8000a66:	e000      	b.n	8000a6a <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000a68:	bf00      	nop

}
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000c8 	.word	0x200000c8
 8000a74:	200001c8 	.word	0x200001c8

08000a78 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	460b      	mov	r3, r1
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000a94:	2203      	movs	r2, #3
 8000a96:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <st25r95_14443A_ANTICOLLISION+0x84>)
 8000a9c:	5cd2      	ldrb	r2, [r2, r3]
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000aa0:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <st25r95_14443A_ANTICOLLISION+0x88>)
 8000ab0:	2206      	movs	r2, #6
 8000ab2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fd5b 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f7ff fda8 	bl	8000620 <st25r95_response>
 8000ad0:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b80      	cmp	r3, #128	; 0x80
 8000ad8:	d109      	bne.n	8000aee <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	1c99      	adds	r1, r3, #2
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 fb64 	bl	80031b4 <memcpy>
 8000aec:	e000      	b.n	8000af0 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000aee:	bf00      	nop
}
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000c8 	.word	0x200000c8
 8000afc:	080031f8 	.word	0x080031f8
 8000b00:	200001c8 	.word	0x200001c8

08000b04 <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	460b      	mov	r3, r1
 8000b12:	72fb      	strb	r3, [r7, #11]
 8000b14:	4613      	mov	r3, r2
 8000b16:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b26:	2208      	movs	r2, #8
 8000b28:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <st25r95_14443A_select+0xc4>)
 8000b2e:	5cd2      	ldrb	r2, [r2, r3]
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b32:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b36:	2270      	movs	r2, #112	; 0x70
 8000b38:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 8000b3a:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b3c:	7abb      	ldrb	r3, [r7, #10]
 8000b3e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8000b40:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b46:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8000b48:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b4e:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b56:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8000b58:	7aba      	ldrb	r2, [r7, #10]
 8000b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b5e:	4053      	eors	r3, r2
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b66:	4053      	eors	r3, r2
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b6e:	4053      	eors	r3, r2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b74:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <st25r95_14443A_select+0xc0>)
 8000b78:	2228      	movs	r2, #40	; 0x28
 8000b7a:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <st25r95_14443A_select+0xc8>)
 8000b7e:	220b      	movs	r2, #11
 8000b80:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	2001      	movs	r0, #1
 8000b88:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fcf4 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	2000      	movs	r0, #0
 8000b96:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fd41 	bl	8000620 <st25r95_response>
 8000b9e:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b80      	cmp	r3, #128	; 0x80
 8000ba6:	d109      	bne.n	8000bbc <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	1c99      	adds	r1, r3, #2
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f002 fafd 	bl	80031b4 <memcpy>
 8000bba:	e000      	b.n	8000bbe <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000bbc:	bf00      	nop
}
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000c8 	.word	0x200000c8
 8000bc8:	080031f8 	.word	0x080031f8
 8000bcc:	200001c8 	.word	0x200001c8

08000bd0 <st25r95_idle>:

void st25r95_idle(st25r95_handle *handler) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <st25r95_idle+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <st25r95_idle+0xa4>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <st25r95_idle+0xa4>)
 8000be6:	220e      	movs	r2, #14
 8000be8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_WU_SRC_TagDetection;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <st25r95_idle+0xa4>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <st25r95_idle+0xa4>)
 8000bf2:	2221      	movs	r2, #33	; 0x21
 8000bf4:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <st25r95_idle+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <st25r95_idle+0xa4>)
 8000bfe:	2279      	movs	r2, #121	; 0x79
 8000c00:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <st25r95_idle+0xa4>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <st25r95_idle+0xa4>)
 8000c0a:	2218      	movs	r2, #24
 8000c0c:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <st25r95_idle+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <st25r95_idle+0xa4>)
 8000c16:	2220      	movs	r2, #32
 8000c18:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <st25r95_idle+0xa4>)
 8000c1c:	2260      	movs	r2, #96	; 0x60
 8000c1e:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <st25r95_idle+0xa4>)
 8000c22:	2260      	movs	r2, #96	; 0x60
 8000c24:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	3b08      	subs	r3, #8
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <st25r95_idle+0xa4>)
 8000c30:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	789b      	ldrb	r3, [r3, #2]
 8000c36:	3308      	adds	r3, #8
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <st25r95_idle+0xa4>)
 8000c3c:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <st25r95_idle+0xa4>)
 8000c40:	223f      	movs	r2, #63	; 0x3f
 8000c42:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <st25r95_idle+0xa4>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <st25r95_idle+0xa8>)
 8000c4c:	2211      	movs	r2, #17
 8000c4e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	2001      	movs	r0, #1
 8000c56:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fc8d 	bl	8000578 <st25r95_spi_tx>
  handler->nss(0);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	2000      	movs	r0, #0
 8000c64:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	200001c8 	.word	0x200001c8

08000c7c <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e0bf      	b.n	8000e0a <st25r95_calibrate+0x18e>
    tx_len = 17;
 8000c8a:	4b66      	ldr	r3, [pc, #408]	; (8000e24 <st25r95_calibrate+0x1a8>)
 8000c8c:	2211      	movs	r2, #17
 8000c8e:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8000c90:	4a65      	ldr	r2, [pc, #404]	; (8000e28 <st25r95_calibrate+0x1ac>)
 8000c92:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000c94:	4614      	mov	r4, r2
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fc65 	bl	8000578 <st25r95_spi_tx>
    handler->nss(0);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	4798      	blx	r3

    res = st25r95_response(handler);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fcb2 	bl	8000620 <st25r95_response>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a5c      	ldr	r2, [pc, #368]	; (8000e30 <st25r95_calibrate+0x1b4>)
 8000cc0:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <st25r95_calibrate+0x1b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 809a 	bne.w	8000e02 <st25r95_calibrate+0x186>
 8000cce:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <st25r95_calibrate+0x1b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f040 8093 	bne.w	8000e02 <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <st25r95_calibrate+0x1b4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d13e      	bne.n	8000d66 <st25r95_calibrate+0xea>
        switch (i - 1) {
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	f200 8089 	bhi.w	8000e04 <st25r95_calibrate+0x188>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <st25r95_calibrate+0x7c>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d19 	.word	0x08000d19
 8000cfc:	08000e05 	.word	0x08000e05
 8000d00:	08000d21 	.word	0x08000d21
 8000d04:	08000d2f 	.word	0x08000d2f
 8000d08:	08000d3d 	.word	0x08000d3d
 8000d0c:	08000d4b 	.word	0x08000d4b
 8000d10:	08000d59 	.word	0x08000d59
 8000d14:	08000e05 	.word	0x08000e05
          case 0:
            calibrate_data[14] = 0xFC;
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d1a:	22fc      	movs	r2, #252	; 0xfc
 8000d1c:	739a      	strb	r2, [r3, #14]
            break;
 8000d1e:	e071      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 8000d20:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d22:	7b9b      	ldrb	r3, [r3, #14]
 8000d24:	3340      	adds	r3, #64	; 0x40
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d2a:	739a      	strb	r2, [r3, #14]
            break;
 8000d2c:	e06a      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d30:	7b9b      	ldrb	r3, [r3, #14]
 8000d32:	3320      	adds	r3, #32
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d38:	739a      	strb	r2, [r3, #14]
            break;
 8000d3a:	e063      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d3e:	7b9b      	ldrb	r3, [r3, #14]
 8000d40:	3310      	adds	r3, #16
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d46:	739a      	strb	r2, [r3, #14]
            break;
 8000d48:	e05c      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d4c:	7b9b      	ldrb	r3, [r3, #14]
 8000d4e:	3308      	adds	r3, #8
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d54:	739a      	strb	r2, [r3, #14]
            break;
 8000d56:	e055      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d5a:	7b9b      	ldrb	r3, [r3, #14]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000d62:	739a      	strb	r2, [r3, #14]
            break;
 8000d64:	e04e      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <st25r95_calibrate+0x1b4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d147      	bne.n	8000e02 <st25r95_calibrate+0x186>
        switch (i - 1) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d844      	bhi.n	8000e04 <st25r95_calibrate+0x188>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <st25r95_calibrate+0x104>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000e05 	.word	0x08000e05
 8000d84:	08000da1 	.word	0x08000da1
 8000d88:	08000daf 	.word	0x08000daf
 8000d8c:	08000dbd 	.word	0x08000dbd
 8000d90:	08000dcb 	.word	0x08000dcb
 8000d94:	08000dd9 	.word	0x08000dd9
 8000d98:	08000de7 	.word	0x08000de7
 8000d9c:	08000df5 	.word	0x08000df5
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000da2:	7b9b      	ldrb	r3, [r3, #14]
 8000da4:	3b80      	subs	r3, #128	; 0x80
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000daa:	739a      	strb	r2, [r3, #14]
            break;
 8000dac:	e02a      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000db0:	7b9b      	ldrb	r3, [r3, #14]
 8000db2:	3b40      	subs	r3, #64	; 0x40
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000db8:	739a      	strb	r2, [r3, #14]
            break;
 8000dba:	e023      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dbe:	7b9b      	ldrb	r3, [r3, #14]
 8000dc0:	3b20      	subs	r3, #32
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dc6:	739a      	strb	r2, [r3, #14]
            break;
 8000dc8:	e01c      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dcc:	7b9b      	ldrb	r3, [r3, #14]
 8000dce:	3b10      	subs	r3, #16
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dd4:	739a      	strb	r2, [r3, #14]
            break;
 8000dd6:	e015      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dda:	7b9b      	ldrb	r3, [r3, #14]
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000de2:	739a      	strb	r2, [r3, #14]
            break;
 8000de4:	e00e      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000de8:	7b9b      	ldrb	r3, [r3, #14]
 8000dea:	3b04      	subs	r3, #4
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000df0:	739a      	strb	r2, [r3, #14]
            break;
 8000df2:	e007      	b.n	8000e04 <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000df6:	7b9b      	ldrb	r3, [r3, #14]
 8000df8:	3b04      	subs	r3, #4
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000dfe:	739a      	strb	r2, [r3, #14]
            break;
 8000e00:	e000      	b.n	8000e04 <st25r95_calibrate+0x188>
        }
      }
 8000e02:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	3301      	adds	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	f67f af3c 	bls.w	8000c8a <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <st25r95_calibrate+0x1b0>)
 8000e14:	7b9a      	ldrb	r2, [r3, #14]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	709a      	strb	r2, [r3, #2]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001c8 	.word	0x200001c8
 8000e28:	200000c8 	.word	0x200000c8
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	200002cc 	.word	0x200002cc

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_MspInit+0x44>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_MspInit+0x44>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6613      	str	r3, [r2, #96]	; 0x60
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x44>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_MspInit+0x44>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x44>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x44>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_SPI_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d128      	bne.n	8000ef0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ece:	23c2      	movs	r3, #194	; 0xc2
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f000 fa20 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40021000 	.word	0x40021000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f89a 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8000f58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f5c:	f000 fb7a 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	; (8000fd4 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f002 f8d9 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fba:	f7ff f985 	bl	80002c8 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000fcc:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 8000fd0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000fd4:	200002d4 	.word	0x200002d4

08000fd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_IRQHandler>

08000fda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f961 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f80e 	bl	800100c <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e001      	b.n	8001000 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffc:	f7ff ff1a 	bl	8000e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d023      	beq.n	8001068 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x70>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f96d 	bl	8001316 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d809      	bhi.n	800105c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f937 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e007      	b.n	800106c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e004      	b.n	800106c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e001      	b.n	800106c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000001c 	.word	0x2000001c
 800107c:	20000014 	.word	0x20000014
 8001080:	20000018 	.word	0x20000018

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000001c 	.word	0x2000001c
 80010a8:	200002d0 	.word	0x200002d0

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200002d0 	.word	0x200002d0

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000001c 	.word	0x2000001c

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e154      	b.n	80015ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8146 	beq.w	80015e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0203 	and.w	r2, r3, #3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80a0 	beq.w	80015e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b58      	ldr	r3, [pc, #352]	; (8001608 <HAL_GPIO_Init+0x2d8>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x2d8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6613      	str	r3, [r2, #96]	; 0x60
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <HAL_GPIO_Init+0x2d8>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014bc:	4a53      	ldr	r2, [pc, #332]	; (800160c <HAL_GPIO_Init+0x2dc>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e6:	d019      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_GPIO_Init+0x2e0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d013      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00d      	beq.n	8001514 <HAL_GPIO_Init+0x1e4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x1e0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2ec>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_GPIO_Init+0x1dc>
 8001508:	2304      	movs	r3, #4
 800150a:	e008      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800150c:	2307      	movs	r3, #7
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001510:	2303      	movs	r3, #3
 8001512:	e004      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001514:	2302      	movs	r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800151c:	2300      	movs	r3, #0
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	f002 0203 	and.w	r2, r2, #3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4093      	lsls	r3, r2
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800152e:	4937      	ldr	r1, [pc, #220]	; (800160c <HAL_GPIO_Init+0x2dc>)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153c:	4b38      	ldr	r3, [pc, #224]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001560:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f47f aea3 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	48000400 	.word	0x48000400
 8001614:	48000800 	.word	0x48000800
 8001618:	48000c00 	.word	0x48000c00
 800161c:	48001000 	.word	0x48001000
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001640:	e002      	b.n	8001648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe06 	bl	8000284 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_PWREx_GetVoltageRange+0x18>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40007000 	.word	0x40007000

080016a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ae:	d130      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016bc:	d038      	beq.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2232      	movs	r2, #50	; 0x32
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c9b      	lsrs	r3, r3, #18
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e4:	e002      	b.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d102      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f2      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170c:	d110      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e00f      	b.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d007      	beq.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000
 8001744:	20000014 	.word	0x20000014
 8001748:	431bde83 	.word	0x431bde83

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f000 bc02 	b.w	8001f64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001760:	4b96      	ldr	r3, [pc, #600]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176a:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80e4 	beq.w	800194a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_RCC_OscConfig+0x4c>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	f040 808b 	bne.w	80018a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b01      	cmp	r3, #1
 8001794:	f040 8087 	bne.w	80018a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x64>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e3d9      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_RCC_OscConfig+0x7e>
 80017c0:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c8:	e005      	b.n	80017d6 <HAL_RCC_OscConfig+0x8a>
 80017ca:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d223      	bcs.n	8001822 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fd54 	bl	800228c <RCC_SetFlashLatencyFromMSIRange>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e3ba      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a72      	ldr	r2, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	496d      	ldr	r1, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4968      	ldr	r1, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e025      	b.n	800186e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4960      	ldr	r1, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001840:	4b5e      	ldr	r3, [pc, #376]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	495b      	ldr	r1, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fd14 	bl	800228c <RCC_SetFlashLatencyFromMSIRange>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e37a      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800186e:	f000 fc81 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	4950      	ldr	r1, [pc, #320]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	4a4e      	ldr	r2, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800188c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <HAL_RCC_OscConfig+0x27c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fbba 	bl	800100c <HAL_InitTick>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d052      	beq.n	8001948 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	e35e      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d032      	beq.n	8001914 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a42      	ldr	r2, [pc, #264]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fbf7 	bl	80010ac <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c2:	f7ff fbf3 	bl	80010ac <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e347      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a35      	ldr	r2, [pc, #212]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4930      	ldr	r1, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	492b      	ldr	r1, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
 8001912:	e01a      	b.n	800194a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001920:	f7ff fbc4 	bl	80010ac <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001928:	f7ff fbc0 	bl	80010ac <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e314      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1dc>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d073      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x21c>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d10e      	bne.n	8001980 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d10b      	bne.n	8001980 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d063      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d15f      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e2f1      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x24c>
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e025      	b.n	80019e4 <HAL_RCC_OscConfig+0x298>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d114      	bne.n	80019cc <HAL_RCC_OscConfig+0x280>
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a02      	ldr	r2, [pc, #8]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x298>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	080031fc 	.word	0x080031fc
 80019c4:	20000014 	.word	0x20000014
 80019c8:	20000018 	.word	0x20000018
 80019cc:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a9f      	ldr	r2, [pc, #636]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a9c      	ldr	r2, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb5e 	bl	80010ac <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff fb5a 	bl	80010ac <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e2ae      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2a8>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb4a 	bl	80010ac <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb46 	bl	80010ac <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e29a      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2d0>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d060      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x310>
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d116      	bne.n	8001a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	4b7c      	ldr	r3, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x328>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e277      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	4973      	ldr	r1, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	e040      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d023      	beq.n	8001ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb05 	bl	80010ac <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fb01 	bl	80010ac <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e255      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	495f      	ldr	r1, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e018      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fae1 	bl	80010ac <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fadd 	bl	80010ac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e231      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d03c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff fabc 	bl	80010ac <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fab8 	bl	80010ac <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e20c      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ef      	beq.n	8001b38 <HAL_RCC_OscConfig+0x3ec>
 8001b58:	e01b      	b.n	8001b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b60:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fa9f 	bl	80010ac <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fa9b 	bl	80010ac <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1ef      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ef      	bne.n	8001b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a6 	beq.w	8001cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d118      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa62 	bl	80010ac <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7ff fa5e 	bl	80010ac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1b2      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4d8>
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c22:	e029      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_OscConfig+0x50c>
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
 8001c58:	4b9a      	ldr	r3, [pc, #616]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a99      	ldr	r2, [pc, #612]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff fa14 	bl	80010ac <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff fa10 	bl	80010ac <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e162      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9e:	4b89      	ldr	r3, [pc, #548]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ed      	beq.n	8001c88 <HAL_RCC_OscConfig+0x53c>
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff f9fd 	bl	80010ac <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff f9f9 	bl	80010ac <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e14b      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ed      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cda:	7ffb      	ldrb	r3, [r7, #31]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d06:	4a6f      	ldr	r2, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff f9cc 	bl	80010ac <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d18:	f7ff f9c8 	bl	80010ac <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e11c      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ef      	beq.n	8001d18 <HAL_RCC_OscConfig+0x5cc>
 8001d38:	e01b      	b.n	8001d72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3a:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d40:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f9af 	bl	80010ac <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d52:	f7ff f9ab 	bl	80010ac <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0ff      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ef      	bne.n	8001d52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80f3 	beq.w	8001f62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	f040 80c9 	bne.w	8001f18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0203 	and.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d12c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	3b01      	subs	r3, #1
 8001da6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d123      	bne.n	8001df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d11b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d113      	bne.n	8001df4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d109      	bne.n	8001df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	3b01      	subs	r3, #1
 8001dee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d06b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d062      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0ac      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e16:	f7ff f949 	bl	80010ac <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f945 	bl	80010ac <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e099      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_OscConfig+0x77c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e56:	0212      	lsls	r2, r2, #8
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e5e:	0852      	lsrs	r2, r2, #1
 8001e60:	3a01      	subs	r2, #1
 8001e62:	0552      	lsls	r2, r2, #21
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e6a:	0852      	lsrs	r2, r2, #1
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	0652      	lsls	r2, r2, #25
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e76:	06d2      	lsls	r2, r2, #27
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e98:	f7ff f908 	bl	80010ac <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f904 	bl	80010ac <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e058      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x778>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ebe:	e050      	b.n	8001f62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e04f      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d144      	bne.n	8001f62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef0:	f7ff f8dc 	bl	80010ac <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f8d8 	bl	80010ac <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e02c      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x7ac>
 8001f16:	e024      	b.n	8001f62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d01f      	beq.n	8001f5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f8bf 	bl	80010ac <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff f8bb 	bl	80010ac <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4905      	ldr	r1, [pc, #20]	; (8001f6c <HAL_RCC_OscConfig+0x820>)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x824>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e001      	b.n	8001f62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	feeefffc 	.word	0xfeeefffc

08001f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0e7      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4970      	ldr	r1, [pc, #448]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0cf      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b66      	ldr	r3, [pc, #408]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d908      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4960      	ldr	r1, [pc, #384]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d04c      	beq.n	800208c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d121      	bne.n	800204a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0a6      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e09a      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202a:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e08e      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203a:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e086      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4943      	ldr	r1, [pc, #268]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800205c:	f7ff f826 	bl	80010ac <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff f822 	bl	80010ac <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e06e      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d208      	bcs.n	80020ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	492b      	ldr	r1, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d210      	bcs.n	80020ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 0207 	bic.w	r2, r3, #7
 80020d0:	4923      	ldr	r1, [pc, #140]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_RCC_ClockConfig+0x1ec>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e036      	b.n	8002158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4918      	ldr	r1, [pc, #96]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4910      	ldr	r1, [pc, #64]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002128:	f000 f824 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	490b      	ldr	r1, [pc, #44]	; (8002168 <HAL_RCC_ClockConfig+0x1f4>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1f8>)
 8002146:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1fc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ff5d 	bl	800100c <HAL_InitTick>
 8002152:	4603      	mov	r3, r0
 8002154:	72fb      	strb	r3, [r7, #11]

  return status;
 8002156:	7afb      	ldrb	r3, [r7, #11]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40022000 	.word	0x40022000
 8002164:	40021000 	.word	0x40021000
 8002168:	080031fc 	.word	0x080031fc
 800216c:	20000014 	.word	0x20000014
 8002170:	20000018 	.word	0x20000018

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x34>
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d121      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d11e      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	e004      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d134      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0xa6>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d003      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0xac>
 8002218:	e005      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCC_GetSysClockFreq+0x110>)
 800221c:	617b      	str	r3, [r7, #20]
      break;
 800221e:	e005      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_GetSysClockFreq+0x114>)
 8002222:	617b      	str	r3, [r7, #20]
      break;
 8002224:	e002      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	617b      	str	r3, [r7, #20]
      break;
 800222a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	3301      	adds	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	fb03 f202 	mul.w	r2, r3, r2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0e5b      	lsrs	r3, r3, #25
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	3301      	adds	r3, #1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800226c:	69bb      	ldr	r3, [r7, #24]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	0800320c 	.word	0x0800320c
 8002284:	00f42400 	.word	0x00f42400
 8002288:	007a1200 	.word	0x007a1200

0800228c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a4:	f7ff f9ee 	bl	8001684 <HAL_PWREx_GetVoltageRange>
 80022a8:	6178      	str	r0, [r7, #20]
 80022aa:	e014      	b.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	6593      	str	r3, [r2, #88]	; 0x58
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c4:	f7ff f9de 	bl	8001684 <HAL_PWREx_GetVoltageRange>
 80022c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022dc:	d10b      	bne.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d919      	bls.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2ba0      	cmp	r3, #160	; 0xa0
 80022e8:	d902      	bls.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ea:	2302      	movs	r3, #2
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e013      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f0:	2301      	movs	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e010      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d902      	bls.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022fc:	2303      	movs	r3, #3
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	e00a      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d102      	bne.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e004      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d101      	bne.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 0207 	bic.w	r2, r3, #7
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e095      	b.n	800248a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236e:	d009      	beq.n	8002384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
 8002376:	e005      	b.n	8002384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fd6c 	bl	8000e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023c4:	d902      	bls.n	80023cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e002      	b.n	80023d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023da:	d007      	beq.n	80023ec <HAL_SPI_Init+0xa0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023e4:	d002      	beq.n	80023ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	ea42 0103 	orr.w	r1, r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	f003 0204 	and.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_Transmit+0x22>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e158      	b.n	8002766 <HAL_SPI_Transmit+0x2d4>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024bc:	f7fe fdf6 	bl	80010ac <HAL_GetTick>
 80024c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024d6:	e13d      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x52>
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e8:	e134      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002534:	d10f      	bne.n	8002556 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d007      	beq.n	8002574 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800257c:	d94b      	bls.n	8002616 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_Transmit+0xfa>
 8002586:	8afb      	ldrh	r3, [r7, #22]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d13e      	bne.n	800260a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025b0:	e02b      	b.n	800260a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d112      	bne.n	80025e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025e4:	e011      	b.n	800260a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e6:	f7fe fd61 	bl	80010ac <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d803      	bhi.n	80025fe <HAL_SPI_Transmit+0x16c>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Transmit+0x172>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002608:	e0a4      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ce      	bne.n	80025b2 <HAL_SPI_Transmit+0x120>
 8002614:	e07c      	b.n	8002710 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Transmit+0x192>
 800261e:	8afb      	ldrh	r3, [r7, #22]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d170      	bne.n	8002706 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d912      	bls.n	8002654 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	1c9a      	adds	r2, r3, #2
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b02      	subs	r3, #2
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002652:	e058      	b.n	8002706 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800267a:	e044      	b.n	8002706 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d12b      	bne.n	80026e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d912      	bls.n	80026ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	1c9a      	adds	r2, r3, #2
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b02      	subs	r3, #2
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026b8:	e025      	b.n	8002706 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026e0:	e011      	b.n	8002706 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e2:	f7fe fce3 	bl	80010ac <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d803      	bhi.n	80026fa <HAL_SPI_Transmit+0x268>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Transmit+0x26e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002704:	e026      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1b5      	bne.n	800267c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fce3 	bl	80030e0 <SPI_EndRxTxTransaction>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
 8002750:	e000      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002764:	7ffb      	ldrb	r3, [r7, #31]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af02      	add	r7, sp, #8
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d112      	bne.n	80027b2 <HAL_SPI_Receive+0x44>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10e      	bne.n	80027b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2204      	movs	r2, #4
 8002798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f910 	bl	80029ce <HAL_SPI_TransmitReceive>
 80027ae:	4603      	mov	r3, r0
 80027b0:	e109      	b.n	80029c6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_SPI_Receive+0x52>
 80027bc:	2302      	movs	r3, #2
 80027be:	e102      	b.n	80029c6 <HAL_SPI_Receive+0x258>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c8:	f7fe fc70 	bl	80010ac <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d002      	beq.n	80027e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027de:	e0e9      	b.n	80029b4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_Receive+0x7e>
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027f0:	e0e0      	b.n	80029b4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2204      	movs	r2, #4
 80027f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800283c:	d908      	bls.n	8002850 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e007      	b.n	8002860 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002868:	d10f      	bne.n	800288a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002878:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d007      	beq.n	80028a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028b0:	d867      	bhi.n	8002982 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028b2:	e030      	b.n	8002916 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d117      	bne.n	80028f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f103 020c 	add.w	r2, r3, #12
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80028f0:	e011      	b.n	8002916 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f2:	f7fe fbdb 	bl	80010ac <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d803      	bhi.n	800290a <HAL_SPI_Receive+0x19c>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d102      	bne.n	8002910 <HAL_SPI_Receive+0x1a2>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002914:	e04e      	b.n	80029b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1c8      	bne.n	80028b4 <HAL_SPI_Receive+0x146>
 8002922:	e034      	b.n	800298e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d115      	bne.n	800295e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	b292      	uxth	r2, r2
 800293e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800295c:	e011      	b.n	8002982 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295e:	f7fe fba5 	bl	80010ac <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d803      	bhi.n	8002976 <HAL_SPI_Receive+0x208>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d102      	bne.n	800297c <HAL_SPI_Receive+0x20e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002980:	e018      	b.n	80029b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ca      	bne.n	8002924 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fb4c 	bl	8003030 <SPI_EndRxTransaction>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
 80029b0:	e000      	b.n	80029b4 <HAL_SPI_Receive+0x246>
  }

error :
 80029b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	; 0x28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x26>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e1fb      	b.n	8002dec <HAL_SPI_TransmitReceive+0x41e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fc:	f7fe fb56 	bl	80010ac <HAL_GetTick>
 8002a00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a18:	7efb      	ldrb	r3, [r7, #27]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d00e      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x6e>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a24:	d106      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x66>
 8002a2e:	7efb      	ldrb	r3, [r7, #27]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d003      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a3a:	e1cd      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x80>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x80>
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a54:	e1c0      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2205      	movs	r2, #5
 8002a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aac:	d802      	bhi.n	8002ab4 <HAL_SPI_TransmitReceive+0xe6>
 8002aae:	8a3b      	ldrh	r3, [r7, #16]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d908      	bls.n	8002ac6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	e007      	b.n	8002ad6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ad4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d007      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002afc:	d97c      	bls.n	8002bf8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x13e>
 8002b06:	8a7b      	ldrh	r3, [r7, #18]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d169      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	881a      	ldrh	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c9a      	adds	r2, r3, #2
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b30:	e056      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d11b      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x1aa>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x1aa>
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d113      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11c      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x1f2>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bc0:	f7fe fa74 	bl	80010ac <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d807      	bhi.n	8002be0 <HAL_SPI_TransmitReceive+0x212>
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d003      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bde:	e0fb      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1a3      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x164>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d19d      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x164>
 8002bf6:	e0df      	b.n	8002db8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0x23a>
 8002c00:	8a7b      	ldrh	r3, [r7, #18]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	f040 80cb 	bne.w	8002d9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d912      	bls.n	8002c38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	1c9a      	adds	r2, r3, #2
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b02      	subs	r3, #2
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c36:	e0b2      	b.n	8002d9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5e:	e09e      	b.n	8002d9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d134      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x30a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02f      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x30a>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12c      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d912      	bls.n	8002cae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	1c9a      	adds	r2, r3, #2
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b02      	subs	r3, #2
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cac:	e012      	b.n	8002cd4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d148      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x3aa>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d042      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d923      	bls.n	8002d46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b02      	subs	r3, #2
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d81f      	bhi.n	8002d74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	e016      	b.n	8002d74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f103 020c 	add.w	r2, r3, #12
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d74:	2301      	movs	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d78:	f7fe f998 	bl	80010ac <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d803      	bhi.n	8002d90 <HAL_SPI_TransmitReceive+0x3c2>
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d102      	bne.n	8002d96 <HAL_SPI_TransmitReceive+0x3c8>
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d9c:	e01c      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f af5b 	bne.w	8002c60 <HAL_SPI_TransmitReceive+0x292>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f af54 	bne.w	8002c60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f98f 	bl	80030e0 <SPI_EndRxTxTransaction>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60
 8002dd4:	e000      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002dd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e04:	f7fe f952 	bl	80010ac <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e14:	f7fe f94a 	bl	80010ac <HAL_GetTick>
 8002e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	015b      	lsls	r3, r3, #5
 8002e20:	0d1b      	lsrs	r3, r3, #20
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e2a:	e054      	b.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d050      	beq.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e34:	f7fe f93a 	bl	80010ac <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d902      	bls.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d13d      	bne.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d111      	bne.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6c:	d004      	beq.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e76:	d107      	bne.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d10f      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e017      	b.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d19b      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000014 	.word	0x20000014

08002f04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f16:	f7fe f8c9 	bl	80010ac <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f26:	f7fe f8c1 	bl	80010ac <HAL_GetTick>
 8002f2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f34:	4b3d      	ldr	r3, [pc, #244]	; (800302c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	0d1b      	lsrs	r3, r3, #20
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f4c:	e060      	b.n	8003010 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f54:	d107      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d050      	beq.n	8003010 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f6e:	f7fe f89d 	bl	80010ac <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d902      	bls.n	8002f84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13d      	bne.n	8003000 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9c:	d111      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa6:	d004      	beq.n	8002fb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d107      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d10f      	bne.n	8002fec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e010      	b.n	8003022 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3b01      	subs	r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d196      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3728      	adds	r7, #40	; 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000014 	.word	0x20000014

08003030 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003044:	d111      	bne.n	800306a <SPI_EndRxTransaction+0x3a>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304e:	d004      	beq.n	800305a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d107      	bne.n	800306a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff febd 	bl	8002df4 <SPI_WaitFlagStateUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e023      	b.n	80030d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003098:	d11d      	bne.n	80030d6 <SPI_EndRxTransaction+0xa6>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d004      	beq.n	80030ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d113      	bne.n	80030d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff ff22 	bl	8002f04 <SPI_WaitFifoStateUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e000      	b.n	80030d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff03 	bl	8002f04 <SPI_WaitFifoStateUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e027      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fe68 	bl	8002df4 <SPI_WaitFlagStateUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e014      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fedc 	bl	8002f04 <SPI_WaitFifoStateUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e000      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4d0d      	ldr	r5, [pc, #52]	; (80031a4 <__libc_init_array+0x38>)
 8003170:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003172:	1b64      	subs	r4, r4, r5
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	2600      	movs	r6, #0
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	4d0b      	ldr	r5, [pc, #44]	; (80031ac <__libc_init_array+0x40>)
 800317e:	4c0c      	ldr	r4, [pc, #48]	; (80031b0 <__libc_init_array+0x44>)
 8003180:	f000 f82e 	bl	80031e0 <_init>
 8003184:	1b64      	subs	r4, r4, r5
 8003186:	10a4      	asrs	r4, r4, #2
 8003188:	2600      	movs	r6, #0
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	0800323c 	.word	0x0800323c
 80031a8:	0800323c 	.word	0x0800323c
 80031ac:	0800323c 	.word	0x0800323c
 80031b0:	08003240 	.word	0x08003240

080031b4 <memcpy>:
 80031b4:	440a      	add	r2, r1
 80031b6:	4291      	cmp	r1, r2
 80031b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031bc:	d100      	bne.n	80031c0 <memcpy+0xc>
 80031be:	4770      	bx	lr
 80031c0:	b510      	push	{r4, lr}
 80031c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031ca:	4291      	cmp	r1, r2
 80031cc:	d1f9      	bne.n	80031c2 <memcpy+0xe>
 80031ce:	bd10      	pop	{r4, pc}

080031d0 <memset>:
 80031d0:	4402      	add	r2, r0
 80031d2:	4603      	mov	r3, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <memset+0xa>
 80031d8:	4770      	bx	lr
 80031da:	f803 1b01 	strb.w	r1, [r3], #1
 80031de:	e7f9      	b.n	80031d4 <memset+0x4>

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
