
rfid-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000325c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003434  08003434  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003434  08003434  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003434  08003434  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800343c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000020  0800345c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800345c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007df6  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001653  00000000  00000000  00027e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00029ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bfc  00000000  00000000  0002a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000895a  00000000  00000000  0004c074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc82c  00000000  00000000  000549ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001211fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002094  00000000  00000000  0012124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033d8 	.word	0x080033d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080033d8 	.word	0x080033d8

080001d4 <reader_irq_pulse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2110      	movs	r1, #16
 80001dc:	4807      	ldr	r0, [pc, #28]	; (80001fc <reader_irq_pulse+0x28>)
 80001de:	f001 fb1d 	bl	800181c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80001e2:	2001      	movs	r0, #1
 80001e4:	f001 f86a 	bl	80012bc <HAL_Delay>
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <reader_irq_pulse+0x28>)
 80001ee:	f001 fb15 	bl	800181c <HAL_GPIO_WritePin>
  HAL_Delay(8);
 80001f2:	2008      	movs	r0, #8
 80001f4:	f001 f862 	bl	80012bc <HAL_Delay>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	48000800 	.word	0x48000800

08000200 <reader_nss>:

void reader_nss(uint8_t enable) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	bf0c      	ite	eq
 8000210:	2301      	moveq	r3, #1
 8000212:	2300      	movne	r3, #0
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f001 fafd 	bl	800181c <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	b29a      	uxth	r2, r3
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	6879      	ldr	r1, [r7, #4]
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <reader_tx+0x28>)
 8000242:	f002 fa22 	bl	800268a <HAL_SPI_Transmit>
 8000246:	4603      	mov	r3, r0
 8000248:	60fb      	str	r3, [r7, #12]
  return ret;
 800024a:	68fb      	ldr	r3, [r7, #12]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000003c 	.word	0x2000003c

08000258 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b29a      	uxth	r2, r3
 8000266:	f04f 33ff 	mov.w	r3, #4294967295
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <reader_rx+0x28>)
 800026e:	f002 fb7a 	bl	8002966 <HAL_SPI_Receive>
 8000272:	4603      	mov	r3, r0
 8000274:	60fb      	str	r3, [r7, #12]
  return ret;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000003c 	.word	0x2000003c

08000284 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
  if (pin == RFID_NIRQ_OUT_PIN) {
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000294:	d102      	bne.n	800029c <HAL_GPIO_EXTI_Callback+0x18>
    reader_handler.irq_flag = 1;
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000298:	2201      	movs	r2, #1
 800029a:	745a      	strb	r2, [r3, #17]
  }
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	200000a0 	.word	0x200000a0

080002ac <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(uid[0]);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 ffff 	bl	80012bc <HAL_Delay>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <select_switch_port>:

// port is 1-indexed
void select_switch_port(uint8_t channel_index) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]

	// lol I originally wrote this to be 1 indexed, so I added
		// channel_index++ to make it 0 indexed, the rest of the
		// logic is 1 indexed though

		if (channel_index < 1 || channel_index > 12) {
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	f000 80d6 	beq.w	8000486 <select_switch_port+0x1be>
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b0c      	cmp	r3, #12
 80002de:	f200 80d2 	bhi.w	8000486 <select_switch_port+0x1be>
			return 1;  // Invalid switch index
		}

		// Set U2.4
		uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]
		if (channel_index <= 4) {
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d80e      	bhi.n	800030a <select_switch_port+0x42>
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	4867      	ldr	r0, [pc, #412]	; (8000490 <select_switch_port+0x1c8>)
 80002f4:	f001 fa92 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fe:	4864      	ldr	r0, [pc, #400]	; (8000490 <select_switch_port+0x1c8>)
 8000300:	f001 fa8c 	bl	800181c <HAL_GPIO_WritePin>
			switch_refdes = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	73fb      	strb	r3, [r7, #15]
 8000308:	e01f      	b.n	800034a <select_switch_port+0x82>
		}
		else if (channel_index <= 8) {
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b08      	cmp	r3, #8
 800030e:	d80e      	bhi.n	800032e <select_switch_port+0x66>
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000316:	485e      	ldr	r0, [pc, #376]	; (8000490 <select_switch_port+0x1c8>)
 8000318:	f001 fa80 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000322:	485b      	ldr	r0, [pc, #364]	; (8000490 <select_switch_port+0x1c8>)
 8000324:	f001 fa7a 	bl	800181c <HAL_GPIO_WritePin>
			switch_refdes = 2;
 8000328:	2302      	movs	r3, #2
 800032a:	73fb      	strb	r3, [r7, #15]
 800032c:	e00d      	b.n	800034a <select_switch_port+0x82>
		}
		else { // if channel_index <= 12
			HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4856      	ldr	r0, [pc, #344]	; (8000490 <select_switch_port+0x1c8>)
 8000336:	f001 fa71 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000340:	4853      	ldr	r0, [pc, #332]	; (8000490 <select_switch_port+0x1c8>)
 8000342:	f001 fa6b 	bl	800181c <HAL_GPIO_WritePin>
			switch_refdes = 3;
 8000346:	2303      	movs	r3, #3
 8000348:	73fb      	strb	r3, [r7, #15]
		}

		// The pattern on each 2nd layer switch is the same, use multiplexing
		uint8_t V0 = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	73bb      	strb	r3, [r7, #14]
		uint8_t V1 = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	737b      	strb	r3, [r7, #13]
		if (channel_index % 4 == 0) {  // 4, 8, 12
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 0303 	and.w	r3, r3, #3
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d104      	bne.n	8000368 <select_switch_port+0xa0>
			V0 = 1;
 800035e:	2301      	movs	r3, #1
 8000360:	73bb      	strb	r3, [r7, #14]
			V1 = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	737b      	strb	r3, [r7, #13]
 8000366:	e019      	b.n	800039c <select_switch_port+0xd4>
		}
		else if (channel_index % 4 == 1) {  // 1, 5, 9
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	f003 0303 	and.w	r3, r3, #3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b01      	cmp	r3, #1
 8000372:	d104      	bne.n	800037e <select_switch_port+0xb6>
			V0 = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	73bb      	strb	r3, [r7, #14]
			V1 = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	737b      	strb	r3, [r7, #13]
 800037c:	e00e      	b.n	800039c <select_switch_port+0xd4>
		}
		else if (channel_index % 4 == 2) {  // 2, 6, 10
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	f003 0303 	and.w	r3, r3, #3
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b02      	cmp	r3, #2
 8000388:	d104      	bne.n	8000394 <select_switch_port+0xcc>
			V0 = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	73bb      	strb	r3, [r7, #14]
			V1 = 1;
 800038e:	2301      	movs	r3, #1
 8000390:	737b      	strb	r3, [r7, #13]
 8000392:	e003      	b.n	800039c <select_switch_port+0xd4>
		}
		else {  // if channel_index % 4 == 3  // 3, 7, 11
			V0 = 1;
 8000394:	2301      	movs	r3, #1
 8000396:	73bb      	strb	r3, [r7, #14]
			V1 = 1;
 8000398:	2301      	movs	r3, #1
 800039a:	737b      	strb	r3, [r7, #13]
		}

		// The other switches' V0/V1 are don't care, but set them to 0 anyways
		switch(switch_refdes) {
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	d04c      	beq.n	800043c <select_switch_port+0x174>
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	dc6d      	bgt.n	8000482 <select_switch_port+0x1ba>
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d002      	beq.n	80003b0 <select_switch_port+0xe8>
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d023      	beq.n	80003f6 <select_switch_port+0x12e>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
			break;
		default:
			break;
 80003ae:	e068      	b.n	8000482 <select_switch_port+0x1ba>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 80003b0:	7bbb      	ldrb	r3, [r7, #14]
 80003b2:	461a      	mov	r2, r3
 80003b4:	2104      	movs	r1, #4
 80003b6:	4837      	ldr	r0, [pc, #220]	; (8000494 <select_switch_port+0x1cc>)
 80003b8:	f001 fa30 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 80003bc:	7b7b      	ldrb	r3, [r7, #13]
 80003be:	461a      	mov	r2, r3
 80003c0:	2102      	movs	r1, #2
 80003c2:	4834      	ldr	r0, [pc, #208]	; (8000494 <select_switch_port+0x1cc>)
 80003c4:	f001 fa2a 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ce:	4830      	ldr	r0, [pc, #192]	; (8000490 <select_switch_port+0x1c8>)
 80003d0:	f001 fa24 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003da:	482d      	ldr	r0, [pc, #180]	; (8000490 <select_switch_port+0x1c8>)
 80003dc:	f001 fa1e 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	482b      	ldr	r0, [pc, #172]	; (8000494 <select_switch_port+0x1cc>)
 80003e6:	f001 fa19 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4829      	ldr	r0, [pc, #164]	; (8000494 <select_switch_port+0x1cc>)
 80003f0:	f001 fa14 	bl	800181c <HAL_GPIO_WritePin>
			break;
 80003f4:	e046      	b.n	8000484 <select_switch_port+0x1bc>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2104      	movs	r1, #4
 80003fa:	4826      	ldr	r0, [pc, #152]	; (8000494 <select_switch_port+0x1cc>)
 80003fc:	f001 fa0e 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2102      	movs	r1, #2
 8000404:	4823      	ldr	r0, [pc, #140]	; (8000494 <select_switch_port+0x1cc>)
 8000406:	f001 fa09 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 800040a:	7bbb      	ldrb	r3, [r7, #14]
 800040c:	461a      	mov	r2, r3
 800040e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000412:	481f      	ldr	r0, [pc, #124]	; (8000490 <select_switch_port+0x1c8>)
 8000414:	f001 fa02 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 8000418:	7b7b      	ldrb	r3, [r7, #13]
 800041a:	461a      	mov	r2, r3
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	481b      	ldr	r0, [pc, #108]	; (8000490 <select_switch_port+0x1c8>)
 8000422:	f001 f9fb 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	481a      	ldr	r0, [pc, #104]	; (8000494 <select_switch_port+0x1cc>)
 800042c:	f001 f9f6 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4817      	ldr	r0, [pc, #92]	; (8000494 <select_switch_port+0x1cc>)
 8000436:	f001 f9f1 	bl	800181c <HAL_GPIO_WritePin>
			break;
 800043a:	e023      	b.n	8000484 <select_switch_port+0x1bc>
			HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2104      	movs	r1, #4
 8000440:	4814      	ldr	r0, [pc, #80]	; (8000494 <select_switch_port+0x1cc>)
 8000442:	f001 f9eb 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2102      	movs	r1, #2
 800044a:	4812      	ldr	r0, [pc, #72]	; (8000494 <select_switch_port+0x1cc>)
 800044c:	f001 f9e6 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000456:	480e      	ldr	r0, [pc, #56]	; (8000490 <select_switch_port+0x1c8>)
 8000458:	f001 f9e0 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <select_switch_port+0x1c8>)
 8000464:	f001 f9da 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 8000468:	7bbb      	ldrb	r3, [r7, #14]
 800046a:	461a      	mov	r2, r3
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	4809      	ldr	r0, [pc, #36]	; (8000494 <select_switch_port+0x1cc>)
 8000470:	f001 f9d4 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	461a      	mov	r2, r3
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	4806      	ldr	r0, [pc, #24]	; (8000494 <select_switch_port+0x1cc>)
 800047c:	f001 f9ce 	bl	800181c <HAL_GPIO_WritePin>
			break;
 8000480:	e000      	b.n	8000484 <select_switch_port+0x1bc>
			break;
 8000482:	bf00      	nop
		}

		return 0;
 8000484:	e000      	b.n	8000488 <select_switch_port+0x1c0>
			return 1;  // Invalid switch index
 8000486:	bf00      	nop
}
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	48000400 	.word	0x48000400
 8000494:	48000800 	.word	0x48000800

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 fe99 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f842 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f8c4 	bl	8000630 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004a8:	f000 f884 	bl	80005b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_14443A;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <main+0x78>)
 80004ae:	2202      	movs	r2, #2
 80004b0:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <main+0x78>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <main+0x78>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <main+0x78>)
 80004c0:	2258      	movs	r2, #88	; 0x58
 80004c2:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <main+0x78>)
 80004c6:	22d1      	movs	r2, #209	; 0xd1
 80004c8:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <main+0x78>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <main+0x78>)
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <main+0x7c>)
 80004d4:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <main+0x78>)
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <main+0x80>)
 80004da:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <main+0x78>)
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <main+0x84>)
 80004e0:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x78>)
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <main+0x88>)
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x78>)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <main+0x8c>)
 80004ec:	615a      	str	r2, [r3, #20]

  st25r95_init(&reader_handler);
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x78>)
 80004f0:	f000 f9d2 	bl	8000898 <st25r95_init>
  st25r95_calibrate(&reader_handler);
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x78>)
 80004f6:	f000 fcbd 	bl	8000e74 <st25r95_calibrate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  st25r95_idle(&reader_handler);
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x78>)
 80004fc:	f000 fc64 	bl	8000dc8 <st25r95_idle>
  while (1) {

	  select_switch_port(5); // 1-indexed :)
 8000500:	2005      	movs	r0, #5
 8000502:	f7ff fee1 	bl	80002c8 <select_switch_port>

    st25r95_service(&reader_handler);
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x78>)
 8000508:	f000 f960 	bl	80007cc <st25r95_service>
	  select_switch_port(5); // 1-indexed :)
 800050c:	e7f8      	b.n	8000500 <main+0x68>
 800050e:	bf00      	nop
 8000510:	200000a0 	.word	0x200000a0
 8000514:	08000201 	.word	0x08000201
 8000518:	0800022d 	.word	0x0800022d
 800051c:	08000259 	.word	0x08000259
 8000520:	080001d5 	.word	0x080001d5
 8000524:	080002ad 	.word	0x080002ad

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 ff46 	bl	80033c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f001 f9a3 	bl	8001898 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f904 	bl	8000764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f9e5 	bl	8001944 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000580:	f000 f8f0 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fde5 	bl	800216c <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f8dc 	bl	8000764 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_SPI1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_SPI1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_SPI1_Init+0x74>)
 80005e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SPI1_Init+0x74>)
 8000602:	2207      	movs	r2, #7
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SPI1_Init+0x74>)
 800060e:	2208      	movs	r2, #8
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_SPI1_Init+0x74>)
 8000614:	f001 ff96 	bl	8002544 <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8a1 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000003c 	.word	0x2000003c
 800062c:	40013000 	.word	0x40013000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <MX_GPIO_Init+0x128>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a43      	ldr	r2, [pc, #268]	; (8000758 <MX_GPIO_Init+0x128>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <MX_GPIO_Init+0x128>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <MX_GPIO_Init+0x128>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a3d      	ldr	r2, [pc, #244]	; (8000758 <MX_GPIO_Init+0x128>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <MX_GPIO_Init+0x128>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <MX_GPIO_Init+0x128>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a37      	ldr	r2, [pc, #220]	; (8000758 <MX_GPIO_Init+0x128>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <MX_GPIO_Init+0x128>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 800068e:	2200      	movs	r2, #0
 8000690:	21d6      	movs	r1, #214	; 0xd6
 8000692:	4832      	ldr	r0, [pc, #200]	; (800075c <MX_GPIO_Init+0x12c>)
 8000694:	f001 f8c2 	bl	800181c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 f8bc 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80006a4:	2200      	movs	r2, #0
 80006a6:	f24f 0130 	movw	r1, #61488	; 0xf030
 80006aa:	482d      	ldr	r0, [pc, #180]	; (8000760 <MX_GPIO_Init+0x130>)
 80006ac:	f001 f8b6 	bl	800181c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 80006b0:	23c6      	movs	r3, #198	; 0xc6
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <MX_GPIO_Init+0x12c>)
 80006c8:	f000 ff2e 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 80006cc:	2310      	movs	r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f000 ff1f 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 80006ea:	2310      	movs	r3, #16
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4816      	ldr	r0, [pc, #88]	; (800075c <MX_GPIO_Init+0x12c>)
 8000702:	f000 ff11 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8000706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <MX_GPIO_Init+0x130>)
 800071e:	f000 ff03 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000722:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000726:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_GPIO_Init+0x130>)
 800073c:	f000 fef4 	bl	8001528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 feb8 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f000 fed1 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800
 8000760:	48000400 	.word	0x48000400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <st25r95_spi_tx+0x24>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4611      	mov	r1, r2
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <st25r95_spi_tx+0x28>)
 8000784:	4798      	blx	r3
  tx_len = 0;
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <st25r95_spi_tx+0x24>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001c8 	.word	0x200001c8
 8000798:	200000c8 	.word	0x200000c8

0800079c <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <st25r95_spi_byte+0x28>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <st25r95_spi_byte+0x2c>)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ffdb 	bl	8000770 <st25r95_spi_tx>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001c8 	.word	0x200001c8
 80007c8:	200000c8 	.word	0x200000c8

080007cc <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7c5b      	ldrb	r3, [r3, #17]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d118      	bne.n	8000810 <st25r95_service+0x44>
    handler->irq_flag = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	745a      	strb	r2, [r3, #17]
    if (handler->state == ST25_STATE_IDLE) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d111      	bne.n	8000810 <st25r95_service+0x44>
      st25r95_init(handler);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f853 	bl	8000898 <st25r95_init>
      if (st25r95_14443A_detect(handler)) {
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f96c 	bl	8000ad0 <st25r95_14443A_detect>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <st25r95_service+0x3e>
        handler->callback(handler->uid);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	3207      	adds	r2, #7
 8000806:	4610      	mov	r0, r2
 8000808:	4798      	blx	r3
      }
      st25r95_idle(handler);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 fadc 	bl	8000dc8 <st25r95_idle>
    }
  }
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8000820:	bf00      	nop
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7c5b      	ldrb	r3, [r3, #17]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0fa      	beq.n	8000822 <st25r95_response+0xa>
  handler->irq_flag = 0;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	2001      	movs	r0, #1
 8000838:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 800083a:	2102      	movs	r1, #2
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffad 	bl	800079c <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a1b      	ldr	r3, [r3, #32]
 8000846:	2101      	movs	r1, #1
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <st25r95_response+0x74>)
 800084a:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <st25r95_response+0x74>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b55      	cmp	r3, #85	; 0x55
 8000852:	d105      	bne.n	8000860 <st25r95_response+0x48>
    handler->nss(0);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	2000      	movs	r0, #0
 800085a:	4798      	blx	r3
    return rx_data;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <st25r95_response+0x74>)
 800085e:	e011      	b.n	8000884 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a1b      	ldr	r3, [r3, #32]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <st25r95_response+0x78>)
 8000866:	2101      	movs	r1, #1
 8000868:	4610      	mov	r0, r2
 800086a:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <st25r95_response+0x7c>)
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <st25r95_response+0x74>)
 8000874:	7852      	ldrb	r2, [r2, #1]
 8000876:	4611      	mov	r1, r2
 8000878:	4798      	blx	r3
  handler->nss(0);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	2000      	movs	r0, #0
 8000880:	4798      	blx	r3
  return rx_data;
 8000882:	4b02      	ldr	r3, [pc, #8]	; (800088c <st25r95_response+0x74>)
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001cc 	.word	0x200001cc
 8000890:	200001cd 	.word	0x200001cd
 8000894:	200001ce 	.word	0x200001ce

08000898 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f823 	bl	80008ec <st25r95_reset>
  handler->irq_pulse();
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d110      	bne.n	80008dc <st25r95_init+0x44>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f85a 	bl	8000974 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	4619      	mov	r1, r3
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f890 	bl	80009ec <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	461a      	mov	r2, r3
 80008d2:	2101      	movs	r1, #1
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f8c1 	bl	8000a5c <st25r95_write_ARC>
      break;
 80008da:	e003      	b.n	80008e4 <st25r95_init+0x4c>
    default:
      st25r95_off(handler);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 f819 	bl	8000914 <st25r95_off>
      break;
 80008e2:	bf00      	nop
  }
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	2001      	movs	r0, #1
 80008fa:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 80008fc:	2101      	movs	r1, #1
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ff4c 	bl	800079c <st25r95_spi_byte>
  handler->nss(0);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	2000      	movs	r0, #0
 800090a:	4798      	blx	r3
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <st25r95_off+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <st25r95_off+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <st25r95_off+0x58>)
 800092a:	2202      	movs	r2, #2
 800092c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <st25r95_off+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <st25r95_off+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <st25r95_off+0x5c>)
 800093c:	2205      	movs	r2, #5
 800093e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	2001      	movs	r0, #1
 8000946:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff11 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2000      	movs	r0, #0
 8000954:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ff5e 	bl	8000818 <st25r95_response>
 800095c:	60f8      	str	r0, [r7, #12]
  return res[0];
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c8 	.word	0x200000c8
 8000970:	200001c8 	.word	0x200001c8

08000974 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <st25r95_14443A+0x70>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <st25r95_14443A+0x70>)
 8000984:	2202      	movs	r2, #2
 8000986:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <st25r95_14443A+0x70>)
 800098a:	2202      	movs	r2, #2
 800098c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <st25r95_14443A+0x70>)
 8000990:	2202      	movs	r2, #2
 8000992:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	b25a      	sxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <st25r95_14443A+0x70>)
 80009ac:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <st25r95_14443A+0x74>)
 80009b0:	2205      	movs	r2, #5
 80009b2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	2001      	movs	r0, #1
 80009ba:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fed7 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	2000      	movs	r0, #0
 80009c8:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2202      	movs	r2, #2
 80009ce:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff21 	bl	8000818 <st25r95_response>
 80009d6:	60f8      	str	r0, [r7, #12]
  return res[0];
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	200001c8 	.word	0x200001c8

080009ec <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <st25r95_write_timerw+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a00:	2209      	movs	r2, #9
 8000a02:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a0c:	223a      	movs	r2, #58	; 0x3a
 8000a0e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <st25r95_write_timerw+0x68>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <st25r95_write_timerw+0x6c>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fe9d 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff feea 	bl	8000818 <st25r95_response>
 8000a44:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	781b      	ldrb	r3, [r3, #0]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a74:	2209      	movs	r2, #9
 8000a76:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a80:	2268      	movs	r2, #104	; 0x68
 8000a82:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <st25r95_write_ARC+0x6c>)
 8000a92:	78bb      	ldrb	r3, [r7, #2]
 8000a94:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <st25r95_write_ARC+0x70>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fe63 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	2000      	movs	r0, #0
 8000ab0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff feb0 	bl	8000818 <st25r95_response>
 8000ab8:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	781b      	ldrb	r3, [r3, #0]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c8 	.word	0x200000c8
 8000acc:	200001c8 	.word	0x200001c8

08000ad0 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 8000ad8:	23ff      	movs	r3, #255	; 0xff
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f883 	bl	8000bf8 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	2bff      	cmp	r3, #255	; 0xff
 8000af6:	d101      	bne.n	8000afc <st25r95_14443A_detect+0x2c>
 8000af8:	2300      	movs	r3, #0
 8000afa:	e078      	b.n	8000bee <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 8000afc:	7d3b      	ldrb	r3, [r7, #20]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <st25r95_14443A_detect+0x3a>
    return 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e071      	b.n	8000bee <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8000b0a:	7d3b      	ldrb	r3, [r7, #20]
 8000b0c:	099b      	lsrs	r3, r3, #6
 8000b0e:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	77fb      	strb	r3, [r7, #31]
 8000b14:	e053      	b.n	8000bbe <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 8000b16:	23ff      	movs	r3, #255	; 0xff
 8000b18:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8000b1a:	f107 0214 	add.w	r2, r7, #20
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f8a4 	bl	8000c70 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8000b28:	7d3b      	ldrb	r3, [r7, #20]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d101      	bne.n	8000b32 <st25r95_14443A_detect+0x62>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e05d      	b.n	8000bee <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 8000b32:	7d3a      	ldrb	r2, [r7, #20]
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	4053      	eors	r3, r2
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	7dbb      	ldrb	r3, [r7, #22]
 8000b3c:	4053      	eors	r3, r2
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	4053      	eors	r3, r2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	7e3b      	ldrb	r3, [r7, #24]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d001      	beq.n	8000b50 <st25r95_14443A_detect+0x80>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e04e      	b.n	8000bee <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	7d3a      	ldrb	r2, [r7, #20]
 8000b56:	3320      	adds	r3, #32
 8000b58:	443b      	add	r3, r7
 8000b5a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8000b5e:	7ffb      	ldrb	r3, [r7, #31]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	3301      	adds	r3, #1
 8000b64:	7d7a      	ldrb	r2, [r7, #21]
 8000b66:	3320      	adds	r3, #32
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	7dba      	ldrb	r2, [r7, #22]
 8000b76:	3320      	adds	r3, #32
 8000b78:	443b      	add	r3, r7
 8000b7a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	3303      	adds	r3, #3
 8000b84:	7dfa      	ldrb	r2, [r7, #23]
 8000b86:	3320      	adds	r3, #32
 8000b88:	443b      	add	r3, r7
 8000b8a:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 8000b8e:	7d3d      	ldrb	r5, [r7, #20]
 8000b90:	7d7b      	ldrb	r3, [r7, #21]
 8000b92:	7dba      	ldrb	r2, [r7, #22]
 8000b94:	7df9      	ldrb	r1, [r7, #23]
 8000b96:	f107 0414 	add.w	r4, r7, #20
 8000b9a:	7ff8      	ldrb	r0, [r7, #31]
 8000b9c:	9102      	str	r1, [sp, #8]
 8000b9e:	9201      	str	r2, [sp, #4]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	4622      	mov	r2, r4
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f8a7 	bl	8000cfc <st25r95_14443A_select>
    if (data[0] & 0x4)
 8000bae:	7d3b      	ldrb	r3, [r7, #20]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d007      	beq.n	8000bc8 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000bb8:	7ffb      	ldrb	r3, [r7, #31]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	77fb      	strb	r3, [r7, #31]
 8000bbe:	7fba      	ldrb	r2, [r7, #30]
 8000bc0:	7ffb      	ldrb	r3, [r7, #31]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d2a7      	bcs.n	8000b16 <st25r95_14443A_detect+0x46>
 8000bc6:	e000      	b.n	8000bca <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 8000bc8:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3307      	adds	r3, #7
 8000bce:	220a      	movs	r2, #10
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fbf8 	bl	80033c8 <memset>
  memcpy(handler->uid, UID, 10);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3307      	adds	r3, #7
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	cb03      	ldmia	r3!, {r0, r1}
 8000be4:	6010      	str	r0, [r2, #0]
 8000be6:	6051      	str	r1, [r2, #4]
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	8113      	strh	r3, [r2, #8]
  return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000bf8 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <st25r95_14443A_REQA+0x70>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <st25r95_14443A_REQA+0x70>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <st25r95_14443A_REQA+0x70>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <st25r95_14443A_REQA+0x70>)
 8000c16:	2226      	movs	r2, #38	; 0x26
 8000c18:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <st25r95_14443A_REQA+0x70>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <st25r95_14443A_REQA+0x74>)
 8000c22:	2205      	movs	r2, #5
 8000c24:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fd9e 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fdeb 	bl	8000818 <st25r95_response>
 8000c42:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b80      	cmp	r3, #128	; 0x80
 8000c4a:	d109      	bne.n	8000c60 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	1c99      	adds	r1, r3, #2
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f002 fba7 	bl	80033ac <memcpy>
 8000c5e:	e000      	b.n	8000c62 <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000c60:	bf00      	nop

}
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000c8 	.word	0x200000c8
 8000c6c:	200001c8 	.word	0x200001c8

08000c70 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <st25r95_14443A_ANTICOLLISION+0x84>)
 8000c94:	5cd2      	ldrb	r2, [r2, r3]
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000c98:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <st25r95_14443A_ANTICOLLISION+0x88>)
 8000ca8:	2206      	movs	r2, #6
 8000caa:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff fd5b 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fda8 	bl	8000818 <st25r95_response>
 8000cc8:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b80      	cmp	r3, #128	; 0x80
 8000cd0:	d109      	bne.n	8000ce6 <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	1c99      	adds	r1, r3, #2
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f002 fb64 	bl	80033ac <memcpy>
 8000ce4:	e000      	b.n	8000ce8 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000ce6:	bf00      	nop
}
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000c8 	.word	0x200000c8
 8000cf4:	080033f0 	.word	0x080033f0
 8000cf8:	200001c8 	.word	0x200001c8

08000cfc <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	461a      	mov	r2, r3
 8000d08:	460b      	mov	r3, r1
 8000d0a:	72fb      	strb	r3, [r7, #11]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d18:	2204      	movs	r2, #4
 8000d1a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <st25r95_14443A_select+0xc4>)
 8000d26:	5cd2      	ldrb	r2, [r2, r3]
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d2a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d2e:	2270      	movs	r2, #112	; 0x70
 8000d30:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d34:	7abb      	ldrb	r3, [r7, #10]
 8000d36:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d3e:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d46:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8000d48:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d4e:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8000d50:	7aba      	ldrb	r2, [r7, #10]
 8000d52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d56:	4053      	eors	r3, r2
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d5e:	4053      	eors	r3, r2
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d6c:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <st25r95_14443A_select+0xc0>)
 8000d70:	2228      	movs	r2, #40	; 0x28
 8000d72:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <st25r95_14443A_select+0xc8>)
 8000d76:	220b      	movs	r2, #11
 8000d78:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff fcf4 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff fd41 	bl	8000818 <st25r95_response>
 8000d96:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b80      	cmp	r3, #128	; 0x80
 8000d9e:	d109      	bne.n	8000db4 <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	1c99      	adds	r1, r3, #2
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f002 fafd 	bl	80033ac <memcpy>
 8000db2:	e000      	b.n	8000db6 <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000db4:	bf00      	nop
}
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000c8 	.word	0x200000c8
 8000dc0:	080033f0 	.word	0x080033f0
 8000dc4:	200001c8 	.word	0x200001c8

08000dc8 <st25r95_idle>:

void st25r95_idle(st25r95_handle *handler) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <st25r95_idle+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <st25r95_idle+0xa4>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <st25r95_idle+0xa4>)
 8000dde:	220e      	movs	r2, #14
 8000de0:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_WU_SRC_TagDetection;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <st25r95_idle+0xa4>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <st25r95_idle+0xa4>)
 8000dea:	2221      	movs	r2, #33	; 0x21
 8000dec:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <st25r95_idle+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <st25r95_idle+0xa4>)
 8000df6:	2279      	movs	r2, #121	; 0x79
 8000df8:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <st25r95_idle+0xa4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <st25r95_idle+0xa4>)
 8000e02:	2218      	movs	r2, #24
 8000e04:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <st25r95_idle+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <st25r95_idle+0xa4>)
 8000e0e:	2220      	movs	r2, #32
 8000e10:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <st25r95_idle+0xa4>)
 8000e14:	2260      	movs	r2, #96	; 0x60
 8000e16:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <st25r95_idle+0xa4>)
 8000e1a:	2260      	movs	r2, #96	; 0x60
 8000e1c:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	789b      	ldrb	r3, [r3, #2]
 8000e22:	3b08      	subs	r3, #8
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <st25r95_idle+0xa4>)
 8000e28:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <st25r95_idle+0xa4>)
 8000e34:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <st25r95_idle+0xa4>)
 8000e38:	223f      	movs	r2, #63	; 0x3f
 8000e3a:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <st25r95_idle+0xa4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <st25r95_idle+0xa8>)
 8000e44:	2211      	movs	r2, #17
 8000e46:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fc8d 	bl	8000770 <st25r95_spi_tx>
  handler->nss(0);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000c8 	.word	0x200000c8
 8000e70:	200001c8 	.word	0x200001c8

08000e74 <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e0bf      	b.n	8001002 <st25r95_calibrate+0x18e>
    tx_len = 17;
 8000e82:	4b66      	ldr	r3, [pc, #408]	; (800101c <st25r95_calibrate+0x1a8>)
 8000e84:	2211      	movs	r2, #17
 8000e86:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8000e88:	4a65      	ldr	r2, [pc, #404]	; (8001020 <st25r95_calibrate+0x1ac>)
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	461d      	mov	r5, r3
 8000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fc65 	bl	8000770 <st25r95_spi_tx>
    handler->nss(0);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2000      	movs	r0, #0
 8000eac:	4798      	blx	r3

    res = st25r95_response(handler);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fcb2 	bl	8000818 <st25r95_response>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a5c      	ldr	r2, [pc, #368]	; (8001028 <st25r95_calibrate+0x1b4>)
 8000eb8:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8000eba:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <st25r95_calibrate+0x1b4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 809a 	bne.w	8000ffa <st25r95_calibrate+0x186>
 8000ec6:	4b58      	ldr	r3, [pc, #352]	; (8001028 <st25r95_calibrate+0x1b4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	f040 8093 	bne.w	8000ffa <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <st25r95_calibrate+0x1b4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d13e      	bne.n	8000f5e <st25r95_calibrate+0xea>
        switch (i - 1) {
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	f200 8089 	bhi.w	8000ffc <st25r95_calibrate+0x188>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <st25r95_calibrate+0x7c>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f11 	.word	0x08000f11
 8000ef4:	08000ffd 	.word	0x08000ffd
 8000ef8:	08000f19 	.word	0x08000f19
 8000efc:	08000f27 	.word	0x08000f27
 8000f00:	08000f35 	.word	0x08000f35
 8000f04:	08000f43 	.word	0x08000f43
 8000f08:	08000f51 	.word	0x08000f51
 8000f0c:	08000ffd 	.word	0x08000ffd
          case 0:
            calibrate_data[14] = 0xFC;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f12:	22fc      	movs	r2, #252	; 0xfc
 8000f14:	739a      	strb	r2, [r3, #14]
            break;
 8000f16:	e071      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f1a:	7b9b      	ldrb	r3, [r3, #14]
 8000f1c:	3340      	adds	r3, #64	; 0x40
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f22:	739a      	strb	r2, [r3, #14]
            break;
 8000f24:	e06a      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f28:	7b9b      	ldrb	r3, [r3, #14]
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f30:	739a      	strb	r2, [r3, #14]
            break;
 8000f32:	e063      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 8000f34:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f36:	7b9b      	ldrb	r3, [r3, #14]
 8000f38:	3310      	adds	r3, #16
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f3e:	739a      	strb	r2, [r3, #14]
            break;
 8000f40:	e05c      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f44:	7b9b      	ldrb	r3, [r3, #14]
 8000f46:	3308      	adds	r3, #8
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b36      	ldr	r3, [pc, #216]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f4c:	739a      	strb	r2, [r3, #14]
            break;
 8000f4e:	e055      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 8000f50:	4b34      	ldr	r3, [pc, #208]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f52:	7b9b      	ldrb	r3, [r3, #14]
 8000f54:	3304      	adds	r3, #4
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b32      	ldr	r3, [pc, #200]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f5a:	739a      	strb	r2, [r3, #14]
            break;
 8000f5c:	e04e      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <st25r95_calibrate+0x1b4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3302      	adds	r3, #2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d147      	bne.n	8000ffa <st25r95_calibrate+0x186>
        switch (i - 1) {
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	2b07      	cmp	r3, #7
 8000f70:	d844      	bhi.n	8000ffc <st25r95_calibrate+0x188>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <st25r95_calibrate+0x104>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000ffd 	.word	0x08000ffd
 8000f7c:	08000f99 	.word	0x08000f99
 8000f80:	08000fa7 	.word	0x08000fa7
 8000f84:	08000fb5 	.word	0x08000fb5
 8000f88:	08000fc3 	.word	0x08000fc3
 8000f8c:	08000fd1 	.word	0x08000fd1
 8000f90:	08000fdf 	.word	0x08000fdf
 8000f94:	08000fed 	.word	0x08000fed
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000f9a:	7b9b      	ldrb	r3, [r3, #14]
 8000f9c:	3b80      	subs	r3, #128	; 0x80
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fa2:	739a      	strb	r2, [r3, #14]
            break;
 8000fa4:	e02a      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fa8:	7b9b      	ldrb	r3, [r3, #14]
 8000faa:	3b40      	subs	r3, #64	; 0x40
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fb0:	739a      	strb	r2, [r3, #14]
            break;
 8000fb2:	e023      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fb6:	7b9b      	ldrb	r3, [r3, #14]
 8000fb8:	3b20      	subs	r3, #32
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fbe:	739a      	strb	r2, [r3, #14]
            break;
 8000fc0:	e01c      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fc4:	7b9b      	ldrb	r3, [r3, #14]
 8000fc6:	3b10      	subs	r3, #16
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fcc:	739a      	strb	r2, [r3, #14]
            break;
 8000fce:	e015      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fd2:	7b9b      	ldrb	r3, [r3, #14]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fda:	739a      	strb	r2, [r3, #14]
            break;
 8000fdc:	e00e      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fe0:	7b9b      	ldrb	r3, [r3, #14]
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fe8:	739a      	strb	r2, [r3, #14]
            break;
 8000fea:	e007      	b.n	8000ffc <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000fee:	7b9b      	ldrb	r3, [r3, #14]
 8000ff0:	3b04      	subs	r3, #4
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <st25r95_calibrate+0x1b0>)
 8000ff6:	739a      	strb	r2, [r3, #14]
            break;
 8000ff8:	e000      	b.n	8000ffc <st25r95_calibrate+0x188>
        }
      }
 8000ffa:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	3301      	adds	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b08      	cmp	r3, #8
 8001006:	f67f af3c 	bls.w	8000e82 <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <st25r95_calibrate+0x1b0>)
 800100c:	7b9a      	ldrb	r2, [r3, #14]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	709a      	strb	r2, [r3, #2]
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	bf00      	nop
 800101c:	200001c8 	.word	0x200001c8
 8001020:	200000c8 	.word	0x200000c8
 8001024:	20000000 	.word	0x20000000
 8001028:	200002cc 	.word	0x200002cc

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6593      	str	r3, [r2, #88]	; 0x58
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_SPI_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80010c6:	23c2      	movs	r3, #194	; 0xc2
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 fa20 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f89a 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8001150:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001154:	f000 fb7a 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f002 f8d9 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff f971 	bl	8000498 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80011c4:	0800343c 	.word	0x0800343c
  ldr r2, =_sbss
 80011c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80011cc:	200002d4 	.word	0x200002d4

080011d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f961 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f80e 	bl	8001204 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e001      	b.n	80011f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f4:	f7ff ff1a 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_InitTick+0x6c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d023      	beq.n	8001260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_InitTick+0x70>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_InitTick+0x6c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f96d 	bl	800150e <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d809      	bhi.n	8001254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f937 	bl	80014ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_InitTick+0x74>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e007      	b.n	8001264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e004      	b.n	8001264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e001      	b.n	8001264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000001c 	.word	0x2000001c
 8001274:	20000014 	.word	0x20000014
 8001278:	20000018 	.word	0x20000018

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000001c 	.word	0x2000001c
 80012a0:	200002d0 	.word	0x200002d0

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200002d0 	.word	0x200002d0

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000001c 	.word	0x2000001c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	e154      	b.n	80017e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8146 	beq.w	80017dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d005      	beq.n	8001568 <HAL_GPIO_Init+0x40>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d130      	bne.n	80015ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159e:	2201      	movs	r2, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f003 0201 	and.w	r2, r3, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d017      	beq.n	8001606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d123      	bne.n	800165a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0203 	and.w	r2, r3, #3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a0 	beq.w	80017dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_GPIO_Init+0x2d8>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	4a57      	ldr	r2, [pc, #348]	; (8001800 <HAL_GPIO_Init+0x2d8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6613      	str	r3, [r2, #96]	; 0x60
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x2d8>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b4:	4a53      	ldr	r2, [pc, #332]	; (8001804 <HAL_GPIO_Init+0x2dc>)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016de:	d019      	beq.n	8001714 <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2e0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d013      	beq.n	8001710 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2e4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00d      	beq.n	800170c <HAL_GPIO_Init+0x1e4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d007      	beq.n	8001708 <HAL_GPIO_Init+0x1e0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a46      	ldr	r2, [pc, #280]	; (8001814 <HAL_GPIO_Init+0x2ec>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_GPIO_Init+0x1dc>
 8001700:	2304      	movs	r3, #4
 8001702:	e008      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001704:	2307      	movs	r3, #7
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001708:	2303      	movs	r3, #3
 800170a:	e004      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 800170c:	2302      	movs	r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001714:	2300      	movs	r3, #0
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001726:	4937      	ldr	r1, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2dc>)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001758:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800175e:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f47f aea3 	bne.w	8001538 <HAL_GPIO_Init+0x10>
  }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	48000400 	.word	0x48000400
 800180c:	48000800 	.word	0x48000800
 8001810:	48000c00 	.word	0x48000c00
 8001814:	48001000 	.word	0x48001000
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001838:	e002      	b.n	8001840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fd0a 	bl	8000284 <HAL_GPIO_EXTI_Callback>
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_PWREx_GetVoltageRange+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a6:	d130      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d038      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2232      	movs	r2, #50	; 0x32
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018dc:	e002      	b.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f0:	d102      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f2      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	d110      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e00f      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001916:	d007      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000
 800193c:	20000014 	.word	0x20000014
 8001940:	431bde83 	.word	0x431bde83

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bc02 	b.w	800215c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001962:	4b94      	ldr	r3, [pc, #592]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80e4 	beq.w	8001b42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_RCC_OscConfig+0x4c>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	f040 808b 	bne.w	8001a9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b01      	cmp	r3, #1
 800198c:	f040 8087 	bne.w	8001a9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x64>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e3d9      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_RCC_OscConfig+0x7e>
 80019b8:	4b7e      	ldr	r3, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c0:	e005      	b.n	80019ce <HAL_RCC_OscConfig+0x8a>
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d223      	bcs.n	8001a1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd54 	bl	8002484 <RCC_SetFlashLatencyFromMSIRange>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e3ba      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	4968      	ldr	r1, [pc, #416]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e025      	b.n	8001a66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1a:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4960      	ldr	r1, [pc, #384]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	495b      	ldr	r1, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fd14 	bl	8002484 <RCC_SetFlashLatencyFromMSIRange>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e37a      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a66:	f000 fc81 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4950      	ldr	r1, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a86:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fbba 	bl	8001204 <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d052      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	e35e      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d032      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fbf7 	bl	80012a4 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aba:	f7ff fbf3 	bl	80012a4 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e347      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4930      	ldr	r1, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	e01a      	b.n	8001b42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fbc4 	bl	80012a4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b20:	f7ff fbc0 	bl	80012a4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e314      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1dc>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d073      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x21c>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d10e      	bne.n	8001b78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d063      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d15f      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e2f1      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x24c>
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e025      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d114      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x280>
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a02      	ldr	r2, [pc, #8]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	080033f4 	.word	0x080033f4
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	4ba0      	ldr	r3, [pc, #640]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a9f      	ldr	r2, [pc, #636]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a9c      	ldr	r2, [pc, #624]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb5e 	bl	80012a4 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb5a 	bl	80012a4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e2ae      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x2a8>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb4a 	bl	80012a4 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb46 	bl	80012a4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e29a      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2d0>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x310>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d116      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c54:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x328>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e277      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	4973      	ldr	r1, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	e040      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d023      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb05 	bl	80012a4 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fb01 	bl	80012a4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e255      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	495f      	ldr	r1, [pc, #380]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5c      	ldr	r2, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fae1 	bl	80012a4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fadd 	bl	80012a4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e231      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d03c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fabc 	bl	80012a4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fab8 	bl	80012a4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e20c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ef      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3ec>
 8001d50:	e01b      	b.n	8001d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa9f 	bl	80012a4 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fa9b 	bl	80012a4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1ef      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ef      	bne.n	8001d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80a6 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d118      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa62 	bl	80012a4 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7ff fa5e 	bl	80012a4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1b2      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4d8>
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1a:	e029      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d115      	bne.n	8001e50 <HAL_RCC_OscConfig+0x50c>
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a99      	ldr	r2, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e60:	4b96      	ldr	r3, [pc, #600]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a95      	ldr	r2, [pc, #596]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fa14 	bl	80012a4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fa10 	bl	80012a4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e162      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ed      	beq.n	8001e80 <HAL_RCC_OscConfig+0x53c>
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f9fd 	bl	80012a4 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff f9f9 	bl	80012a4 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e14b      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ed      	bne.n	8001eae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efe:	4a6f      	ldr	r2, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f9cc 	bl	80012a4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f10:	f7ff f9c8 	bl	80012a4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e11c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x5cc>
 8001f30:	e01b      	b.n	8001f6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f38:	4a60      	ldr	r2, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f9af 	bl	80012a4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4a:	f7ff f9ab 	bl	80012a4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0ff      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80f3 	beq.w	800215a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f040 80c9 	bne.w	8002110 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d12c      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d123      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11b      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d113      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d109      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d06b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d062      	beq.n	80020b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0ac      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800200e:	f7ff f949 	bl	80012a4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f945 	bl	80012a4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e099      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_OscConfig+0x77c>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002044:	3a01      	subs	r2, #1
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800204e:	0212      	lsls	r2, r2, #8
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002056:	0852      	lsrs	r2, r2, #1
 8002058:	3a01      	subs	r2, #1
 800205a:	0552      	lsls	r2, r2, #21
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0652      	lsls	r2, r2, #25
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800206e:	06d2      	lsls	r2, r2, #27
 8002070:	430a      	orrs	r2, r1
 8002072:	4912      	ldr	r1, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002090:	f7ff f908 	bl	80012a4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f904 	bl	80012a4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e058      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	e050      	b.n	800215a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04f      	b.n	800215c <HAL_RCC_OscConfig+0x818>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d144      	bne.n	800215a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e8:	f7ff f8dc 	bl	80012a4 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f8d8 	bl	80012a4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e02c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x7ac>
 800210e:	e024      	b.n	800215a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d01f      	beq.n	8002156 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff f8bf 	bl	80012a4 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f8bb 	bl	80012a4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4905      	ldr	r1, [pc, #20]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_OscConfig+0x824>)
 8002150:	4013      	ands	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e001      	b.n	800215a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	feeefffc 	.word	0xfeeefffc

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0e7      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4970      	ldr	r1, [pc, #448]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b6e      	ldr	r3, [pc, #440]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0cf      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4960      	ldr	r1, [pc, #384]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d04c      	beq.n	8002284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d121      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0a6      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d115      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e09a      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e08e      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e086      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 0203 	bic.w	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4943      	ldr	r1, [pc, #268]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7ff f826 	bl	80012a4 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7ff f822 	bl	80012a4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e06e      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d208      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	492b      	ldr	r1, [pc, #172]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d210      	bcs.n	80022e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0207 	bic.w	r2, r3, #7
 80022c8:	4923      	ldr	r1, [pc, #140]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e036      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002320:	f000 f824 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	490b      	ldr	r1, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1f4>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1f8>)
 800233e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1fc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ff5d 	bl	8001204 <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	72fb      	strb	r3, [r7, #11]

  return status;
 800234e:	7afb      	ldrb	r3, [r7, #11]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	080033f4 	.word	0x080033f4
 8002364:	20000014 	.word	0x20000014
 8002368:	20000018 	.word	0x20000018

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d121      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d11e      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e004      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d134      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0xa6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xac>
 8002410:	e005      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 8002414:	617b      	str	r3, [r7, #20]
      break;
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 800241a:	617b      	str	r3, [r7, #20]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	617b      	str	r3, [r7, #20]
      break;
 8002422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	3301      	adds	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	fb03 f202 	mul.w	r2, r3, r2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002464:	69bb      	ldr	r3, [r7, #24]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08003404 	.word	0x08003404
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800249c:	f7ff f9ee 	bl	800187c <HAL_PWREx_GetVoltageRange>
 80024a0:	6178      	str	r0, [r7, #20]
 80024a2:	e014      	b.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024bc:	f7ff f9de 	bl	800187c <HAL_PWREx_GetVoltageRange>
 80024c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d10b      	bne.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d919      	bls.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2ba0      	cmp	r3, #160	; 0xa0
 80024e0:	d902      	bls.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e2:	2302      	movs	r3, #2
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e013      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e8:	2301      	movs	r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e010      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d902      	bls.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024f4:	2303      	movs	r3, #3
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e00a      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d102      	bne.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002500:	2302      	movs	r3, #2
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	e004      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d101      	bne.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 0207 	bic.w	r2, r3, #7
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	40022000 	.word	0x40022000

08002544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e095      	b.n	8002682 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d009      	beq.n	800257c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
 800256e:	e005      	b.n	800257c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fd6c 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025bc:	d902      	bls.n	80025c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e002      	b.n	80025ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025d2:	d007      	beq.n	80025e4 <HAL_SPI_Init+0xa0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025dc:	d002      	beq.n	80025e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	ea42 0103 	orr.w	r1, r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 0204 	and.w	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002660:	ea42 0103 	orr.w	r1, r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_SPI_Transmit+0x22>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e158      	b.n	800295e <HAL_SPI_Transmit+0x2d4>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b4:	f7fe fdf6 	bl	80012a4 <HAL_GetTick>
 80026b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026ce:	e13d      	b.n	800294c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_Transmit+0x52>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026e0:	e134      	b.n	800294c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272c:	d10f      	bne.n	800274e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d007      	beq.n	800276c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002774:	d94b      	bls.n	800280e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_SPI_Transmit+0xfa>
 800277e:	8afb      	ldrh	r3, [r7, #22]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13e      	bne.n	8002802 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	1c9a      	adds	r2, r3, #2
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027a8:	e02b      	b.n	8002802 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d112      	bne.n	80027de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	1c9a      	adds	r2, r3, #2
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027dc:	e011      	b.n	8002802 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027de:	f7fe fd61 	bl	80012a4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d803      	bhi.n	80027f6 <HAL_SPI_Transmit+0x16c>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x172>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002800:	e0a4      	b.n	800294c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ce      	bne.n	80027aa <HAL_SPI_Transmit+0x120>
 800280c:	e07c      	b.n	8002908 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_SPI_Transmit+0x192>
 8002816:	8afb      	ldrh	r3, [r7, #22]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d170      	bne.n	80028fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d912      	bls.n	800284c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b02      	subs	r3, #2
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	87da      	strh	r2, [r3, #62]	; 0x3e
 800284a:	e058      	b.n	80028fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002872:	e044      	b.n	80028fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d12b      	bne.n	80028da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d912      	bls.n	80028b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b02      	subs	r3, #2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028b0:	e025      	b.n	80028fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028d8:	e011      	b.n	80028fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028da:	f7fe fce3 	bl	80012a4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d803      	bhi.n	80028f2 <HAL_SPI_Transmit+0x268>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d102      	bne.n	80028f8 <HAL_SPI_Transmit+0x26e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028fc:	e026      	b.n	800294c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1b5      	bne.n	8002874 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fce3 	bl	80032d8 <SPI_EndRxTxTransaction>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	77fb      	strb	r3, [r7, #31]
 8002948:	e000      	b.n	800294c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800294a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800295c:	7ffb      	ldrb	r3, [r7, #31]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b088      	sub	sp, #32
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002982:	d112      	bne.n	80029aa <HAL_SPI_Receive+0x44>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10e      	bne.n	80029aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2204      	movs	r2, #4
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f910 	bl	8002bc6 <HAL_SPI_TransmitReceive>
 80029a6:	4603      	mov	r3, r0
 80029a8:	e109      	b.n	8002bbe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_SPI_Receive+0x52>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e102      	b.n	8002bbe <HAL_SPI_Receive+0x258>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029c0:	f7fe fc70 	bl	80012a4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029d6:	e0e9      	b.n	8002bac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_Receive+0x7e>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029e8:	e0e0      	b.n	8002bac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2204      	movs	r2, #4
 80029ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a34:	d908      	bls.n	8002a48 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	d10f      	bne.n	8002a82 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d007      	beq.n	8002aa0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa8:	d867      	bhi.n	8002b7a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002aaa:	e030      	b.n	8002b0e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d117      	bne.n	8002aea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f103 020c 	add.w	r2, r3, #12
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ae8:	e011      	b.n	8002b0e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aea:	f7fe fbdb 	bl	80012a4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <HAL_SPI_Receive+0x19c>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d102      	bne.n	8002b08 <HAL_SPI_Receive+0x1a2>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b0c:	e04e      	b.n	8002bac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1c8      	bne.n	8002aac <HAL_SPI_Receive+0x146>
 8002b1a:	e034      	b.n	8002b86 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d115      	bne.n	8002b56 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	b292      	uxth	r2, r2
 8002b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	1c9a      	adds	r2, r3, #2
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002b54:	e011      	b.n	8002b7a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b56:	f7fe fba5 	bl	80012a4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d803      	bhi.n	8002b6e <HAL_SPI_Receive+0x208>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d102      	bne.n	8002b74 <HAL_SPI_Receive+0x20e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b78:	e018      	b.n	8002bac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ca      	bne.n	8002b1c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fb4c 	bl	8003228 <SPI_EndRxTransaction>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	75fb      	strb	r3, [r7, #23]
 8002ba8:	e000      	b.n	8002bac <HAL_SPI_Receive+0x246>
  }

error :
 8002baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08a      	sub	sp, #40	; 0x28
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x26>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e1fb      	b.n	8002fe4 <HAL_SPI_TransmitReceive+0x41e>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf4:	f7fe fb56 	bl	80012a4 <HAL_GetTick>
 8002bf8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c10:	7efb      	ldrb	r3, [r7, #27]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d00e      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0x6e>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c1c:	d106      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x66>
 8002c26:	7efb      	ldrb	r3, [r7, #27]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d003      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c32:	e1cd      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x80>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x80>
 8002c40:	887b      	ldrh	r3, [r7, #2]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c4c:	e1c0      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d003      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	887a      	ldrh	r2, [r7, #2]
 8002c8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca4:	d802      	bhi.n	8002cac <HAL_SPI_TransmitReceive+0xe6>
 8002ca6:	8a3b      	ldrh	r3, [r7, #16]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d908      	bls.n	8002cbe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	e007      	b.n	8002cce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ccc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf4:	d97c      	bls.n	8002df0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x13e>
 8002cfe:	8a7b      	ldrh	r3, [r7, #18]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d169      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d28:	e056      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11b      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x1aa>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x1aa>
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d113      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d11c      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x1f2>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	b292      	uxth	r2, r2
 8002d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db8:	f7fe fa74 	bl	80012a4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d807      	bhi.n	8002dd8 <HAL_SPI_TransmitReceive+0x212>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d003      	beq.n	8002dd8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dd6:	e0fb      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1a3      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x164>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d19d      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x164>
 8002dee:	e0df      	b.n	8002fb0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_SPI_TransmitReceive+0x23a>
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	f040 80cb 	bne.w	8002f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d912      	bls.n	8002e30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b02      	subs	r3, #2
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e2e:	e0b2      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e56:	e09e      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d134      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x30a>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02f      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x30a>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d12c      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d912      	bls.n	8002ea6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b02      	subs	r3, #2
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ea4:	e012      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d148      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x3aa>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d042      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d923      	bls.n	8002f3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	b292      	uxth	r2, r2
 8002f02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b02      	subs	r3, #2
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d81f      	bhi.n	8002f6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	e016      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 020c 	add.w	r2, r3, #12
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f70:	f7fe f998 	bl	80012a4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d803      	bhi.n	8002f88 <HAL_SPI_TransmitReceive+0x3c2>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x3c8>
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f94:	e01c      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af5b 	bne.w	8002e58 <HAL_SPI_TransmitReceive+0x292>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f47f af54 	bne.w	8002e58 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f98f 	bl	80032d8 <SPI_EndRxTxTransaction>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	661a      	str	r2, [r3, #96]	; 0x60
 8002fcc:	e000      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ffc:	f7fe f952 	bl	80012a4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800300c:	f7fe f94a 	bl	80012a4 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003022:	e054      	b.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d050      	beq.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800302c:	f7fe f93a 	bl	80012a4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d902      	bls.n	8003042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305a:	d111      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	d004      	beq.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d107      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d10f      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e017      	b.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d19b      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000014 	.word	0x20000014

080030fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800310e:	f7fe f8c9 	bl	80012a4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800311e:	f7fe f8c1 	bl	80012a4 <HAL_GetTick>
 8003122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	0d1b      	lsrs	r3, r3, #20
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003144:	e060      	b.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800314c:	d107      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800315c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d050      	beq.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003166:	f7fe f89d 	bl	80012a4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13d      	bne.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003194:	d111      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d004      	beq.n	80031aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d107      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d10f      	bne.n	80031e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e010      	b.n	800321a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3b01      	subs	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d196      	bne.n	8003146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000014 	.word	0x20000014

08003228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d111      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d004      	beq.n	8003252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d107      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff febd 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e023      	b.n	80032d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003290:	d11d      	bne.n	80032ce <SPI_EndRxTransaction+0xa6>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d004      	beq.n	80032a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d113      	bne.n	80032ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff22 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e000      	b.n	80032d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff ff03 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e027      	b.n	800335c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff fe68 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e014      	b.n	800335c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fedc 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f043 0220 	orr.w	r2, r3, #32
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e000      	b.n	800335c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4d0d      	ldr	r5, [pc, #52]	; (800339c <__libc_init_array+0x38>)
 8003368:	4c0d      	ldr	r4, [pc, #52]	; (80033a0 <__libc_init_array+0x3c>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	2600      	movs	r6, #0
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	4d0b      	ldr	r5, [pc, #44]	; (80033a4 <__libc_init_array+0x40>)
 8003376:	4c0c      	ldr	r4, [pc, #48]	; (80033a8 <__libc_init_array+0x44>)
 8003378:	f000 f82e 	bl	80033d8 <_init>
 800337c:	1b64      	subs	r4, r4, r5
 800337e:	10a4      	asrs	r4, r4, #2
 8003380:	2600      	movs	r6, #0
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	4798      	blx	r3
 800338e:	3601      	adds	r6, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	4798      	blx	r3
 8003398:	3601      	adds	r6, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003434 	.word	0x08003434
 80033a0:	08003434 	.word	0x08003434
 80033a4:	08003434 	.word	0x08003434
 80033a8:	08003438 	.word	0x08003438

080033ac <memcpy>:
 80033ac:	440a      	add	r2, r1
 80033ae:	4291      	cmp	r1, r2
 80033b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80033b4:	d100      	bne.n	80033b8 <memcpy+0xc>
 80033b6:	4770      	bx	lr
 80033b8:	b510      	push	{r4, lr}
 80033ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033c2:	4291      	cmp	r1, r2
 80033c4:	d1f9      	bne.n	80033ba <memcpy+0xe>
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <memset>:
 80033c8:	4402      	add	r2, r0
 80033ca:	4603      	mov	r3, r0
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d100      	bne.n	80033d2 <memset+0xa>
 80033d0:	4770      	bx	lr
 80033d2:	f803 1b01 	strb.w	r1, [r3], #1
 80033d6:	e7f9      	b.n	80033cc <memset+0x4>

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
